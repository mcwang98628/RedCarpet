// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dgsEnums.proto

#include "dgsEnums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace AR51 {
}  // namespace AR51
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_dgsEnums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dgsEnums_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dgsEnums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dgsEnums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas8 = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances8 = nullptr;

const char descriptor_table_protodef_dgsEnums_2eproto[] =
  "\n\016dgsEnums.proto\022\004AR51*F\n\tGameState\022\t\n\005R"
  "eady\020\000\022\t\n\005Lobby\020\001\022\013\n\007Started\020\002\022\013\n\007Stoppe"
  "d\020\003\022\t\n\005Setup\020\004*/\n\nLensFacing\022\t\n\005Front\020\000\022"
  "\010\n\004Back\020\001\022\014\n\010External\020\003*%\n\tInputType\022\013\n\007"
  "NoInput\020\000\022\013\n\007Clicked\020\001*\335\001\n\016TransformType"
  "s\022\017\n\013NoTransform\020\000\022\014\n\010position\020\001\022\021\n\rloca"
  "lPosition\020\002\022\014\n\010rotation\020\004\022\021\n\rlocalRotati"
  "on\020\010\022\016\n\nlocalScale\020\020\022\016\n\nlossyScale\020 \022\017\n\013"
  "eulerAngles\020@\022\025\n\020localEulerAngles\020\200\001\022\027\n\022"
  "worldToLocalMatrix\020\200\002\022\027\n\022localToWorldMat"
  "rix\020\200\004*U\n\rPrimitiveType\022\n\n\006Sphere\020\000\022\013\n\007C"
  "apsule\020\001\022\014\n\010Cylinder\020\002\022\010\n\004Cube\020\003\022\t\n\005Plan"
  "e\020\004\022\010\n\004Quad\020\005*\336\001\n\010TypeCode\022\n\n\006NoCode\020\000\022\n"
  "\n\006Object\020\001\022\n\n\006DBNull\020\002\022\013\n\007Boolean\020\003\022\010\n\004C"
  "har\020\004\022\t\n\005SByte\020\005\022\010\n\004Byte\020\006\022\t\n\005Int16\020\007\022\n\n"
  "\006UInt16\020\010\022\t\n\005Int32\020\t\022\n\n\006UInt32\020\n\022\t\n\005Int6"
  "4\020\013\022\n\n\006UInt64\020\014\022\n\n\006Single\020\r\022\n\n\006Double\020\016\022"
  "\013\n\007Decimal\020\017\022\014\n\010DateTime\020\020\022\n\n\006String\020\022B\021"
  "\252\002\016AR51.Unity.SDKb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dgsEnums_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dgsEnums_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dgsEnums_2eproto_once;
static bool descriptor_table_dgsEnums_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dgsEnums_2eproto = {
  &descriptor_table_dgsEnums_2eproto_initialized, descriptor_table_protodef_dgsEnums_2eproto, "dgsEnums.proto", 745,
  &descriptor_table_dgsEnums_2eproto_once, descriptor_table_dgsEnums_2eproto_sccs, descriptor_table_dgsEnums_2eproto_deps, 0, 0,
  schemas8, file_default_instances8, TableStruct_dgsEnums_2eproto::offsets,
  file_level_metadata_dgsEnums_2eproto, 0, file_level_enum_descriptors_dgsEnums_2eproto, file_level_service_descriptors_dgsEnums_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dgsEnums_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dgsEnums_2eproto), true);
namespace AR51 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dgsEnums_2eproto);
  return file_level_enum_descriptors_dgsEnums_2eproto[0];
}
bool GameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LensFacing_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dgsEnums_2eproto);
  return file_level_enum_descriptors_dgsEnums_2eproto[1];
}
bool LensFacing_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dgsEnums_2eproto);
  return file_level_enum_descriptors_dgsEnums_2eproto[2];
}
bool InputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransformTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dgsEnums_2eproto);
  return file_level_enum_descriptors_dgsEnums_2eproto[3];
}
bool TransformTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrimitiveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dgsEnums_2eproto);
  return file_level_enum_descriptors_dgsEnums_2eproto[4];
}
bool PrimitiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypeCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dgsEnums_2eproto);
  return file_level_enum_descriptors_dgsEnums_2eproto[5];
}
bool TypeCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 18:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AR51
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
