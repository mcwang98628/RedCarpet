// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dgsEnums.pb.h"
#include "AR51.Core.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[55]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dgs_2eproto;
namespace AR51 {
class ActiveMessage;
class ActiveMessageDefaultTypeInternal;
extern ActiveMessageDefaultTypeInternal _ActiveMessage_default_instance_;
class AnchorIdsReply;
class AnchorIdsReplyDefaultTypeInternal;
extern AnchorIdsReplyDefaultTypeInternal _AnchorIdsReply_default_instance_;
class CameraFeedRequest;
class CameraFeedRequestDefaultTypeInternal;
extern CameraFeedRequestDefaultTypeInternal _CameraFeedRequest_default_instance_;
class CameraFeedResponse;
class CameraFeedResponseDefaultTypeInternal;
extern CameraFeedResponseDefaultTypeInternal _CameraFeedResponse_default_instance_;
class ComponentFieldMessage;
class ComponentFieldMessageDefaultTypeInternal;
extern ComponentFieldMessageDefaultTypeInternal _ComponentFieldMessage_default_instance_;
class ComponentRequest;
class ComponentRequestDefaultTypeInternal;
extern ComponentRequestDefaultTypeInternal _ComponentRequest_default_instance_;
class CreateAnchorRequest;
class CreateAnchorRequestDefaultTypeInternal;
extern CreateAnchorRequestDefaultTypeInternal _CreateAnchorRequest_default_instance_;
class CreateGuardianRequest;
class CreateGuardianRequestDefaultTypeInternal;
extern CreateGuardianRequestDefaultTypeInternal _CreateGuardianRequest_default_instance_;
class CreatePrimitiveRequest;
class CreatePrimitiveRequestDefaultTypeInternal;
extern CreatePrimitiveRequestDefaultTypeInternal _CreatePrimitiveRequest_default_instance_;
class DownloadVideoRequest;
class DownloadVideoRequestDefaultTypeInternal;
extern DownloadVideoRequestDefaultTypeInternal _DownloadVideoRequest_default_instance_;
class DrawCircleRequest;
class DrawCircleRequestDefaultTypeInternal;
extern DrawCircleRequestDefaultTypeInternal _DrawCircleRequest_default_instance_;
class DrawCubeRequest;
class DrawCubeRequestDefaultTypeInternal;
extern DrawCubeRequestDefaultTypeInternal _DrawCubeRequest_default_instance_;
class DrawLine2DRequest;
class DrawLine2DRequestDefaultTypeInternal;
extern DrawLine2DRequestDefaultTypeInternal _DrawLine2DRequest_default_instance_;
class DrawLine3DRequest;
class DrawLine3DRequestDefaultTypeInternal;
extern DrawLine3DRequestDefaultTypeInternal _DrawLine3DRequest_default_instance_;
class DrawRectRequest;
class DrawRectRequestDefaultTypeInternal;
extern DrawRectRequestDefaultTypeInternal _DrawRectRequest_default_instance_;
class DrawRequest;
class DrawRequestDefaultTypeInternal;
extern DrawRequestDefaultTypeInternal _DrawRequest_default_instance_;
class DrawSphereRequest;
class DrawSphereRequestDefaultTypeInternal;
extern DrawSphereRequestDefaultTypeInternal _DrawSphereRequest_default_instance_;
class FieldInfo;
class FieldInfoDefaultTypeInternal;
extern FieldInfoDefaultTypeInternal _FieldInfo_default_instance_;
class FieldInfos;
class FieldInfosDefaultTypeInternal;
extern FieldInfosDefaultTypeInternal _FieldInfos_default_instance_;
class GameStateReply;
class GameStateReplyDefaultTypeInternal;
extern GameStateReplyDefaultTypeInternal _GameStateReply_default_instance_;
class GetAllVideoFilesResponse;
class GetAllVideoFilesResponseDefaultTypeInternal;
extern GetAllVideoFilesResponseDefaultTypeInternal _GetAllVideoFilesResponse_default_instance_;
class GetCameraCharacteristicsRequest;
class GetCameraCharacteristicsRequestDefaultTypeInternal;
extern GetCameraCharacteristicsRequestDefaultTypeInternal _GetCameraCharacteristicsRequest_default_instance_;
class GetGuardianIdsResponse;
class GetGuardianIdsResponseDefaultTypeInternal;
extern GetGuardianIdsResponseDefaultTypeInternal _GetGuardianIdsResponse_default_instance_;
class GetGuardianResponse;
class GetGuardianResponseDefaultTypeInternal;
extern GetGuardianResponseDefaultTypeInternal _GetGuardianResponse_default_instance_;
class GetMaterialColorRequest;
class GetMaterialColorRequestDefaultTypeInternal;
extern GetMaterialColorRequestDefaultTypeInternal _GetMaterialColorRequest_default_instance_;
class GetRecorderFieldRequest;
class GetRecorderFieldRequestDefaultTypeInternal;
extern GetRecorderFieldRequestDefaultTypeInternal _GetRecorderFieldRequest_default_instance_;
class GetTransformRequest;
class GetTransformRequestDefaultTypeInternal;
extern GetTransformRequestDefaultTypeInternal _GetTransformRequest_default_instance_;
class GetVideoRecordingSettingResponse;
class GetVideoRecordingSettingResponseDefaultTypeInternal;
extern GetVideoRecordingSettingResponseDefaultTypeInternal _GetVideoRecordingSettingResponse_default_instance_;
class GuardianRequest;
class GuardianRequestDefaultTypeInternal;
extern GuardianRequestDefaultTypeInternal _GuardianRequest_default_instance_;
class HandInfoResponse;
class HandInfoResponseDefaultTypeInternal;
extern HandInfoResponseDefaultTypeInternal _HandInfoResponse_default_instance_;
class InstantiateRequest;
class InstantiateRequestDefaultTypeInternal;
extern InstantiateRequestDefaultTypeInternal _InstantiateRequest_default_instance_;
class NameRequest;
class NameRequestDefaultTypeInternal;
extern NameRequestDefaultTypeInternal _NameRequest_default_instance_;
class ObjectIdMessage;
class ObjectIdMessageDefaultTypeInternal;
extern ObjectIdMessageDefaultTypeInternal _ObjectIdMessage_default_instance_;
class PlaceableDto;
class PlaceableDtoDefaultTypeInternal;
extern PlaceableDtoDefaultTypeInternal _PlaceableDto_default_instance_;
class RenderingRequest;
class RenderingRequestDefaultTypeInternal;
extern RenderingRequestDefaultTypeInternal _RenderingRequest_default_instance_;
class RenderingResponse;
class RenderingResponseDefaultTypeInternal;
extern RenderingResponseDefaultTypeInternal _RenderingResponse_default_instance_;
class SetAnchorVisiliblityRequest;
class SetAnchorVisiliblityRequestDefaultTypeInternal;
extern SetAnchorVisiliblityRequestDefaultTypeInternal _SetAnchorVisiliblityRequest_default_instance_;
class SetMaterialColorRequest;
class SetMaterialColorRequestDefaultTypeInternal;
extern SetMaterialColorRequestDefaultTypeInternal _SetMaterialColorRequest_default_instance_;
class SetMaterialFloatRequest;
class SetMaterialFloatRequestDefaultTypeInternal;
extern SetMaterialFloatRequestDefaultTypeInternal _SetMaterialFloatRequest_default_instance_;
class SetMaterialInt32Request;
class SetMaterialInt32RequestDefaultTypeInternal;
extern SetMaterialInt32RequestDefaultTypeInternal _SetMaterialInt32Request_default_instance_;
class SetMaterialTextureRequest;
class SetMaterialTextureRequestDefaultTypeInternal;
extern SetMaterialTextureRequestDefaultTypeInternal _SetMaterialTextureRequest_default_instance_;
class SetNameRequest;
class SetNameRequestDefaultTypeInternal;
extern SetNameRequestDefaultTypeInternal _SetNameRequest_default_instance_;
class SetParentRequest;
class SetParentRequestDefaultTypeInternal;
extern SetParentRequestDefaultTypeInternal _SetParentRequest_default_instance_;
class SetPlaceableReply;
class SetPlaceableReplyDefaultTypeInternal;
extern SetPlaceableReplyDefaultTypeInternal _SetPlaceableReply_default_instance_;
class SetPlaceableRequest;
class SetPlaceableRequestDefaultTypeInternal;
extern SetPlaceableRequestDefaultTypeInternal _SetPlaceableRequest_default_instance_;
class SetRecorderFieldRequest;
class SetRecorderFieldRequestDefaultTypeInternal;
extern SetRecorderFieldRequestDefaultTypeInternal _SetRecorderFieldRequest_default_instance_;
class SetRendererEnabledRequest;
class SetRendererEnabledRequestDefaultTypeInternal;
extern SetRendererEnabledRequestDefaultTypeInternal _SetRendererEnabledRequest_default_instance_;
class SetTransformRequest;
class SetTransformRequestDefaultTypeInternal;
extern SetTransformRequestDefaultTypeInternal _SetTransformRequest_default_instance_;
class SetupReply;
class SetupReplyDefaultTypeInternal;
extern SetupReplyDefaultTypeInternal _SetupReply_default_instance_;
class StartMediaRecoderRequest;
class StartMediaRecoderRequestDefaultTypeInternal;
extern StartMediaRecoderRequestDefaultTypeInternal _StartMediaRecoderRequest_default_instance_;
class StartRecordingRequest;
class StartRecordingRequestDefaultTypeInternal;
extern StartRecordingRequestDefaultTypeInternal _StartRecordingRequest_default_instance_;
class StartRecordingResponse;
class StartRecordingResponseDefaultTypeInternal;
extern StartRecordingResponseDefaultTypeInternal _StartRecordingResponse_default_instance_;
class TransformMessage;
class TransformMessageDefaultTypeInternal;
extern TransformMessageDefaultTypeInternal _TransformMessage_default_instance_;
class TwoHandsInfoResponse;
class TwoHandsInfoResponseDefaultTypeInternal;
extern TwoHandsInfoResponseDefaultTypeInternal _TwoHandsInfoResponse_default_instance_;
class VideoRecordingSettings;
class VideoRecordingSettingsDefaultTypeInternal;
extern VideoRecordingSettingsDefaultTypeInternal _VideoRecordingSettings_default_instance_;
}  // namespace AR51
PROTOBUF_NAMESPACE_OPEN
template<> ::AR51::ActiveMessage* Arena::CreateMaybeMessage<::AR51::ActiveMessage>(Arena*);
template<> ::AR51::AnchorIdsReply* Arena::CreateMaybeMessage<::AR51::AnchorIdsReply>(Arena*);
template<> ::AR51::CameraFeedRequest* Arena::CreateMaybeMessage<::AR51::CameraFeedRequest>(Arena*);
template<> ::AR51::CameraFeedResponse* Arena::CreateMaybeMessage<::AR51::CameraFeedResponse>(Arena*);
template<> ::AR51::ComponentFieldMessage* Arena::CreateMaybeMessage<::AR51::ComponentFieldMessage>(Arena*);
template<> ::AR51::ComponentRequest* Arena::CreateMaybeMessage<::AR51::ComponentRequest>(Arena*);
template<> ::AR51::CreateAnchorRequest* Arena::CreateMaybeMessage<::AR51::CreateAnchorRequest>(Arena*);
template<> ::AR51::CreateGuardianRequest* Arena::CreateMaybeMessage<::AR51::CreateGuardianRequest>(Arena*);
template<> ::AR51::CreatePrimitiveRequest* Arena::CreateMaybeMessage<::AR51::CreatePrimitiveRequest>(Arena*);
template<> ::AR51::DownloadVideoRequest* Arena::CreateMaybeMessage<::AR51::DownloadVideoRequest>(Arena*);
template<> ::AR51::DrawCircleRequest* Arena::CreateMaybeMessage<::AR51::DrawCircleRequest>(Arena*);
template<> ::AR51::DrawCubeRequest* Arena::CreateMaybeMessage<::AR51::DrawCubeRequest>(Arena*);
template<> ::AR51::DrawLine2DRequest* Arena::CreateMaybeMessage<::AR51::DrawLine2DRequest>(Arena*);
template<> ::AR51::DrawLine3DRequest* Arena::CreateMaybeMessage<::AR51::DrawLine3DRequest>(Arena*);
template<> ::AR51::DrawRectRequest* Arena::CreateMaybeMessage<::AR51::DrawRectRequest>(Arena*);
template<> ::AR51::DrawRequest* Arena::CreateMaybeMessage<::AR51::DrawRequest>(Arena*);
template<> ::AR51::DrawSphereRequest* Arena::CreateMaybeMessage<::AR51::DrawSphereRequest>(Arena*);
template<> ::AR51::FieldInfo* Arena::CreateMaybeMessage<::AR51::FieldInfo>(Arena*);
template<> ::AR51::FieldInfos* Arena::CreateMaybeMessage<::AR51::FieldInfos>(Arena*);
template<> ::AR51::GameStateReply* Arena::CreateMaybeMessage<::AR51::GameStateReply>(Arena*);
template<> ::AR51::GetAllVideoFilesResponse* Arena::CreateMaybeMessage<::AR51::GetAllVideoFilesResponse>(Arena*);
template<> ::AR51::GetCameraCharacteristicsRequest* Arena::CreateMaybeMessage<::AR51::GetCameraCharacteristicsRequest>(Arena*);
template<> ::AR51::GetGuardianIdsResponse* Arena::CreateMaybeMessage<::AR51::GetGuardianIdsResponse>(Arena*);
template<> ::AR51::GetGuardianResponse* Arena::CreateMaybeMessage<::AR51::GetGuardianResponse>(Arena*);
template<> ::AR51::GetMaterialColorRequest* Arena::CreateMaybeMessage<::AR51::GetMaterialColorRequest>(Arena*);
template<> ::AR51::GetRecorderFieldRequest* Arena::CreateMaybeMessage<::AR51::GetRecorderFieldRequest>(Arena*);
template<> ::AR51::GetTransformRequest* Arena::CreateMaybeMessage<::AR51::GetTransformRequest>(Arena*);
template<> ::AR51::GetVideoRecordingSettingResponse* Arena::CreateMaybeMessage<::AR51::GetVideoRecordingSettingResponse>(Arena*);
template<> ::AR51::GuardianRequest* Arena::CreateMaybeMessage<::AR51::GuardianRequest>(Arena*);
template<> ::AR51::HandInfoResponse* Arena::CreateMaybeMessage<::AR51::HandInfoResponse>(Arena*);
template<> ::AR51::InstantiateRequest* Arena::CreateMaybeMessage<::AR51::InstantiateRequest>(Arena*);
template<> ::AR51::NameRequest* Arena::CreateMaybeMessage<::AR51::NameRequest>(Arena*);
template<> ::AR51::ObjectIdMessage* Arena::CreateMaybeMessage<::AR51::ObjectIdMessage>(Arena*);
template<> ::AR51::PlaceableDto* Arena::CreateMaybeMessage<::AR51::PlaceableDto>(Arena*);
template<> ::AR51::RenderingRequest* Arena::CreateMaybeMessage<::AR51::RenderingRequest>(Arena*);
template<> ::AR51::RenderingResponse* Arena::CreateMaybeMessage<::AR51::RenderingResponse>(Arena*);
template<> ::AR51::SetAnchorVisiliblityRequest* Arena::CreateMaybeMessage<::AR51::SetAnchorVisiliblityRequest>(Arena*);
template<> ::AR51::SetMaterialColorRequest* Arena::CreateMaybeMessage<::AR51::SetMaterialColorRequest>(Arena*);
template<> ::AR51::SetMaterialFloatRequest* Arena::CreateMaybeMessage<::AR51::SetMaterialFloatRequest>(Arena*);
template<> ::AR51::SetMaterialInt32Request* Arena::CreateMaybeMessage<::AR51::SetMaterialInt32Request>(Arena*);
template<> ::AR51::SetMaterialTextureRequest* Arena::CreateMaybeMessage<::AR51::SetMaterialTextureRequest>(Arena*);
template<> ::AR51::SetNameRequest* Arena::CreateMaybeMessage<::AR51::SetNameRequest>(Arena*);
template<> ::AR51::SetParentRequest* Arena::CreateMaybeMessage<::AR51::SetParentRequest>(Arena*);
template<> ::AR51::SetPlaceableReply* Arena::CreateMaybeMessage<::AR51::SetPlaceableReply>(Arena*);
template<> ::AR51::SetPlaceableRequest* Arena::CreateMaybeMessage<::AR51::SetPlaceableRequest>(Arena*);
template<> ::AR51::SetRecorderFieldRequest* Arena::CreateMaybeMessage<::AR51::SetRecorderFieldRequest>(Arena*);
template<> ::AR51::SetRendererEnabledRequest* Arena::CreateMaybeMessage<::AR51::SetRendererEnabledRequest>(Arena*);
template<> ::AR51::SetTransformRequest* Arena::CreateMaybeMessage<::AR51::SetTransformRequest>(Arena*);
template<> ::AR51::SetupReply* Arena::CreateMaybeMessage<::AR51::SetupReply>(Arena*);
template<> ::AR51::StartMediaRecoderRequest* Arena::CreateMaybeMessage<::AR51::StartMediaRecoderRequest>(Arena*);
template<> ::AR51::StartRecordingRequest* Arena::CreateMaybeMessage<::AR51::StartRecordingRequest>(Arena*);
template<> ::AR51::StartRecordingResponse* Arena::CreateMaybeMessage<::AR51::StartRecordingResponse>(Arena*);
template<> ::AR51::TransformMessage* Arena::CreateMaybeMessage<::AR51::TransformMessage>(Arena*);
template<> ::AR51::TwoHandsInfoResponse* Arena::CreateMaybeMessage<::AR51::TwoHandsInfoResponse>(Arena*);
template<> ::AR51::VideoRecordingSettings* Arena::CreateMaybeMessage<::AR51::VideoRecordingSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AR51 {

enum SetPlaceableEvent : int {
  PlacingCompleted = 0,
  PlacingCancelled = 1,
  PlacingFailed = 2,
  SetPlaceableEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SetPlaceableEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SetPlaceableEvent_IsValid(int value);
constexpr SetPlaceableEvent SetPlaceableEvent_MIN = PlacingCompleted;
constexpr SetPlaceableEvent SetPlaceableEvent_MAX = PlacingFailed;
constexpr int SetPlaceableEvent_ARRAYSIZE = SetPlaceableEvent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetPlaceableEvent_descriptor();
template<typename T>
inline const std::string& SetPlaceableEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetPlaceableEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetPlaceableEvent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetPlaceableEvent_descriptor(), enum_t_value);
}
inline bool SetPlaceableEvent_Parse(
    const std::string& name, SetPlaceableEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetPlaceableEvent>(
    SetPlaceableEvent_descriptor(), name, value);
}
enum FieldTypeEnum : int {
  BooleanType = 0,
  Float32Type = 1,
  Int32Type = 2,
  StringType = 3,
  FieldTypeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FieldTypeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FieldTypeEnum_IsValid(int value);
constexpr FieldTypeEnum FieldTypeEnum_MIN = BooleanType;
constexpr FieldTypeEnum FieldTypeEnum_MAX = StringType;
constexpr int FieldTypeEnum_ARRAYSIZE = FieldTypeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldTypeEnum_descriptor();
template<typename T>
inline const std::string& FieldTypeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FieldTypeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FieldTypeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FieldTypeEnum_descriptor(), enum_t_value);
}
inline bool FieldTypeEnum_Parse(
    const std::string& name, FieldTypeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldTypeEnum>(
    FieldTypeEnum_descriptor(), name, value);
}
enum HandJoints : int {
  None = 0,
  Wrist = 1,
  Palm = 2,
  ThumbMetacarpalJoint = 3,
  ThumbProximalJoint = 4,
  ThumbDistalJoint = 5,
  ThumbTip = 6,
  IndexMetacarpal = 7,
  IndexKnuckle = 8,
  IndexMiddleJoint = 9,
  IndexDistalJoint = 10,
  IndexTip = 11,
  MiddleMetacarpal = 12,
  MiddleKnuckle = 13,
  MiddleMiddleJoint = 14,
  MiddleDistalJoint = 15,
  MiddleTip = 16,
  RingMetacarpal = 17,
  RingKnuckle = 18,
  RingMiddleJoint = 19,
  RingDistalJoint = 20,
  RingTip = 21,
  PinkyMetacarpal = 22,
  PinkyKnuckle = 23,
  PinkyMiddleJoint = 24,
  PinkyDistalJoint = 25,
  PinkyTip = 26,
  HandJoints_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HandJoints_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HandJoints_IsValid(int value);
constexpr HandJoints HandJoints_MIN = None;
constexpr HandJoints HandJoints_MAX = PinkyTip;
constexpr int HandJoints_ARRAYSIZE = HandJoints_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HandJoints_descriptor();
template<typename T>
inline const std::string& HandJoints_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HandJoints>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HandJoints_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HandJoints_descriptor(), enum_t_value);
}
inline bool HandJoints_Parse(
    const std::string& name, HandJoints* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HandJoints>(
    HandJoints_descriptor(), name, value);
}
enum HandednessTypes : int {
  NoHand = 0,
  LeftHand = 1,
  RightHand = 2,
  HandednessTypes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HandednessTypes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HandednessTypes_IsValid(int value);
constexpr HandednessTypes HandednessTypes_MIN = NoHand;
constexpr HandednessTypes HandednessTypes_MAX = RightHand;
constexpr int HandednessTypes_ARRAYSIZE = HandednessTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HandednessTypes_descriptor();
template<typename T>
inline const std::string& HandednessTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HandednessTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HandednessTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HandednessTypes_descriptor(), enum_t_value);
}
inline bool HandednessTypes_Parse(
    const std::string& name, HandednessTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HandednessTypes>(
    HandednessTypes_descriptor(), name, value);
}
// ===================================================================

class GameStateReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.GameStateReply) */ {
 public:
  GameStateReply();
  virtual ~GameStateReply();

  GameStateReply(const GameStateReply& from);
  GameStateReply(GameStateReply&& from) noexcept
    : GameStateReply() {
    *this = ::std::move(from);
  }

  inline GameStateReply& operator=(const GameStateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStateReply& operator=(GameStateReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameStateReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameStateReply* internal_default_instance() {
    return reinterpret_cast<const GameStateReply*>(
               &_GameStateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameStateReply* other);
  friend void swap(GameStateReply& a, GameStateReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameStateReply* New() const final {
    return CreateMaybeMessage<GameStateReply>(nullptr);
  }

  GameStateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameStateReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameStateReply& from);
  void MergeFrom(const GameStateReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStateReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.GameStateReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // .AR51.GameState State = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::AR51::GameState state() const;
  void set_state(::AR51::GameState value);

  // @@protoc_insertion_point(class_scope:AR51.GameStateReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class SetupReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.SetupReply) */ {
 public:
  SetupReply();
  virtual ~SetupReply();

  SetupReply(const SetupReply& from);
  SetupReply(SetupReply&& from) noexcept
    : SetupReply() {
    *this = ::std::move(from);
  }

  inline SetupReply& operator=(const SetupReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupReply& operator=(SetupReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetupReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetupReply* internal_default_instance() {
    return reinterpret_cast<const SetupReply*>(
               &_SetupReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SetupReply* other);
  friend void swap(SetupReply& a, SetupReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetupReply* New() const final {
    return CreateMaybeMessage<SetupReply>(nullptr);
  }

  SetupReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetupReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetupReply& from);
  void MergeFrom(const SetupReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.SetupReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AR51.PlaceableDto Placeables = 1;
  int placeables_size() const;
  void clear_placeables();
  static const int kPlaceablesFieldNumber = 1;
  ::AR51::PlaceableDto* mutable_placeables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::PlaceableDto >*
      mutable_placeables();
  const ::AR51::PlaceableDto& placeables(int index) const;
  ::AR51::PlaceableDto* add_placeables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::PlaceableDto >&
      placeables() const;

  // @@protoc_insertion_point(class_scope:AR51.SetupReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::PlaceableDto > placeables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class PlaceableDto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.PlaceableDto) */ {
 public:
  PlaceableDto();
  virtual ~PlaceableDto();

  PlaceableDto(const PlaceableDto& from);
  PlaceableDto(PlaceableDto&& from) noexcept
    : PlaceableDto() {
    *this = ::std::move(from);
  }

  inline PlaceableDto& operator=(const PlaceableDto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceableDto& operator=(PlaceableDto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceableDto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaceableDto* internal_default_instance() {
    return reinterpret_cast<const PlaceableDto*>(
               &_PlaceableDto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PlaceableDto* other);
  friend void swap(PlaceableDto& a, PlaceableDto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaceableDto* New() const final {
    return CreateMaybeMessage<PlaceableDto>(nullptr);
  }

  PlaceableDto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceableDto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceableDto& from);
  void MergeFrom(const PlaceableDto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceableDto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.PlaceableDto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string Icon = 2;
  void clear_icon();
  static const int kIconFieldNumber = 2;
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);

  // @@protoc_insertion_point(class_scope:AR51.PlaceableDto)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class SetPlaceableRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.SetPlaceableRequest) */ {
 public:
  SetPlaceableRequest();
  virtual ~SetPlaceableRequest();

  SetPlaceableRequest(const SetPlaceableRequest& from);
  SetPlaceableRequest(SetPlaceableRequest&& from) noexcept
    : SetPlaceableRequest() {
    *this = ::std::move(from);
  }

  inline SetPlaceableRequest& operator=(const SetPlaceableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPlaceableRequest& operator=(SetPlaceableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPlaceableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPlaceableRequest* internal_default_instance() {
    return reinterpret_cast<const SetPlaceableRequest*>(
               &_SetPlaceableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SetPlaceableRequest* other);
  friend void swap(SetPlaceableRequest& a, SetPlaceableRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetPlaceableRequest* New() const final {
    return CreateMaybeMessage<SetPlaceableRequest>(nullptr);
  }

  SetPlaceableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPlaceableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPlaceableRequest& from);
  void MergeFrom(const SetPlaceableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPlaceableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.SetPlaceableRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:AR51.SetPlaceableRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class SetPlaceableReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.SetPlaceableReply) */ {
 public:
  SetPlaceableReply();
  virtual ~SetPlaceableReply();

  SetPlaceableReply(const SetPlaceableReply& from);
  SetPlaceableReply(SetPlaceableReply&& from) noexcept
    : SetPlaceableReply() {
    *this = ::std::move(from);
  }

  inline SetPlaceableReply& operator=(const SetPlaceableReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPlaceableReply& operator=(SetPlaceableReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPlaceableReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPlaceableReply* internal_default_instance() {
    return reinterpret_cast<const SetPlaceableReply*>(
               &_SetPlaceableReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SetPlaceableReply* other);
  friend void swap(SetPlaceableReply& a, SetPlaceableReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetPlaceableReply* New() const final {
    return CreateMaybeMessage<SetPlaceableReply>(nullptr);
  }

  SetPlaceableReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPlaceableReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPlaceableReply& from);
  void MergeFrom(const SetPlaceableReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPlaceableReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.SetPlaceableReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string AnchorId = 2;
  void clear_anchorid();
  static const int kAnchorIdFieldNumber = 2;
  const std::string& anchorid() const;
  void set_anchorid(const std::string& value);
  void set_anchorid(std::string&& value);
  void set_anchorid(const char* value);
  void set_anchorid(const char* value, size_t size);
  std::string* mutable_anchorid();
  std::string* release_anchorid();
  void set_allocated_anchorid(std::string* anchorid);

  // string ErrorMessage = 3;
  void clear_errormessage();
  static const int kErrorMessageFieldNumber = 3;
  const std::string& errormessage() const;
  void set_errormessage(const std::string& value);
  void set_errormessage(std::string&& value);
  void set_errormessage(const char* value);
  void set_errormessage(const char* value, size_t size);
  std::string* mutable_errormessage();
  std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);

  // .AR51.SetPlaceableEvent Event = 1;
  void clear_event();
  static const int kEventFieldNumber = 1;
  ::AR51::SetPlaceableEvent event() const;
  void set_event(::AR51::SetPlaceableEvent value);

  // @@protoc_insertion_point(class_scope:AR51.SetPlaceableReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anchorid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
  int event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class GetRecorderFieldRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.GetRecorderFieldRequest) */ {
 public:
  GetRecorderFieldRequest();
  virtual ~GetRecorderFieldRequest();

  GetRecorderFieldRequest(const GetRecorderFieldRequest& from);
  GetRecorderFieldRequest(GetRecorderFieldRequest&& from) noexcept
    : GetRecorderFieldRequest() {
    *this = ::std::move(from);
  }

  inline GetRecorderFieldRequest& operator=(const GetRecorderFieldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecorderFieldRequest& operator=(GetRecorderFieldRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRecorderFieldRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRecorderFieldRequest* internal_default_instance() {
    return reinterpret_cast<const GetRecorderFieldRequest*>(
               &_GetRecorderFieldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetRecorderFieldRequest* other);
  friend void swap(GetRecorderFieldRequest& a, GetRecorderFieldRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRecorderFieldRequest* New() const final {
    return CreateMaybeMessage<GetRecorderFieldRequest>(nullptr);
  }

  GetRecorderFieldRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRecorderFieldRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRecorderFieldRequest& from);
  void MergeFrom(const GetRecorderFieldRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecorderFieldRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.GetRecorderFieldRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string FieldName = 1;
  void clear_fieldname();
  static const int kFieldNameFieldNumber = 1;
  const std::string& fieldname() const;
  void set_fieldname(const std::string& value);
  void set_fieldname(std::string&& value);
  void set_fieldname(const char* value);
  void set_fieldname(const char* value, size_t size);
  std::string* mutable_fieldname();
  std::string* release_fieldname();
  void set_allocated_fieldname(std::string* fieldname);

  // @@protoc_insertion_point(class_scope:AR51.GetRecorderFieldRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fieldname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class SetRecorderFieldRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.SetRecorderFieldRequest) */ {
 public:
  SetRecorderFieldRequest();
  virtual ~SetRecorderFieldRequest();

  SetRecorderFieldRequest(const SetRecorderFieldRequest& from);
  SetRecorderFieldRequest(SetRecorderFieldRequest&& from) noexcept
    : SetRecorderFieldRequest() {
    *this = ::std::move(from);
  }

  inline SetRecorderFieldRequest& operator=(const SetRecorderFieldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRecorderFieldRequest& operator=(SetRecorderFieldRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetRecorderFieldRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRecorderFieldRequest* internal_default_instance() {
    return reinterpret_cast<const SetRecorderFieldRequest*>(
               &_SetRecorderFieldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SetRecorderFieldRequest* other);
  friend void swap(SetRecorderFieldRequest& a, SetRecorderFieldRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetRecorderFieldRequest* New() const final {
    return CreateMaybeMessage<SetRecorderFieldRequest>(nullptr);
  }

  SetRecorderFieldRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRecorderFieldRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRecorderFieldRequest& from);
  void MergeFrom(const SetRecorderFieldRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRecorderFieldRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.SetRecorderFieldRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string FieldName = 1;
  void clear_fieldname();
  static const int kFieldNameFieldNumber = 1;
  const std::string& fieldname() const;
  void set_fieldname(const std::string& value);
  void set_fieldname(std::string&& value);
  void set_fieldname(const char* value);
  void set_fieldname(const char* value, size_t size);
  std::string* mutable_fieldname();
  std::string* release_fieldname();
  void set_allocated_fieldname(std::string* fieldname);

  // bytes Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:AR51.SetRecorderFieldRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fieldname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class GetCameraCharacteristicsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.GetCameraCharacteristicsRequest) */ {
 public:
  GetCameraCharacteristicsRequest();
  virtual ~GetCameraCharacteristicsRequest();

  GetCameraCharacteristicsRequest(const GetCameraCharacteristicsRequest& from);
  GetCameraCharacteristicsRequest(GetCameraCharacteristicsRequest&& from) noexcept
    : GetCameraCharacteristicsRequest() {
    *this = ::std::move(from);
  }

  inline GetCameraCharacteristicsRequest& operator=(const GetCameraCharacteristicsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCameraCharacteristicsRequest& operator=(GetCameraCharacteristicsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCameraCharacteristicsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCameraCharacteristicsRequest* internal_default_instance() {
    return reinterpret_cast<const GetCameraCharacteristicsRequest*>(
               &_GetCameraCharacteristicsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetCameraCharacteristicsRequest* other);
  friend void swap(GetCameraCharacteristicsRequest& a, GetCameraCharacteristicsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCameraCharacteristicsRequest* New() const final {
    return CreateMaybeMessage<GetCameraCharacteristicsRequest>(nullptr);
  }

  GetCameraCharacteristicsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCameraCharacteristicsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCameraCharacteristicsRequest& from);
  void MergeFrom(const GetCameraCharacteristicsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCameraCharacteristicsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.GetCameraCharacteristicsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string FieldName = 1;
  void clear_fieldname();
  static const int kFieldNameFieldNumber = 1;
  const std::string& fieldname() const;
  void set_fieldname(const std::string& value);
  void set_fieldname(std::string&& value);
  void set_fieldname(const char* value);
  void set_fieldname(const char* value, size_t size);
  std::string* mutable_fieldname();
  std::string* release_fieldname();
  void set_allocated_fieldname(std::string* fieldname);

  // @@protoc_insertion_point(class_scope:AR51.GetCameraCharacteristicsRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fieldname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class GetAllVideoFilesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.GetAllVideoFilesResponse) */ {
 public:
  GetAllVideoFilesResponse();
  virtual ~GetAllVideoFilesResponse();

  GetAllVideoFilesResponse(const GetAllVideoFilesResponse& from);
  GetAllVideoFilesResponse(GetAllVideoFilesResponse&& from) noexcept
    : GetAllVideoFilesResponse() {
    *this = ::std::move(from);
  }

  inline GetAllVideoFilesResponse& operator=(const GetAllVideoFilesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllVideoFilesResponse& operator=(GetAllVideoFilesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllVideoFilesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllVideoFilesResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllVideoFilesResponse*>(
               &_GetAllVideoFilesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GetAllVideoFilesResponse* other);
  friend void swap(GetAllVideoFilesResponse& a, GetAllVideoFilesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAllVideoFilesResponse* New() const final {
    return CreateMaybeMessage<GetAllVideoFilesResponse>(nullptr);
  }

  GetAllVideoFilesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllVideoFilesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllVideoFilesResponse& from);
  void MergeFrom(const GetAllVideoFilesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllVideoFilesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.GetAllVideoFilesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string FileNames = 1;
  int filenames_size() const;
  void clear_filenames();
  static const int kFileNamesFieldNumber = 1;
  const std::string& filenames(int index) const;
  std::string* mutable_filenames(int index);
  void set_filenames(int index, const std::string& value);
  void set_filenames(int index, std::string&& value);
  void set_filenames(int index, const char* value);
  void set_filenames(int index, const char* value, size_t size);
  std::string* add_filenames();
  void add_filenames(const std::string& value);
  void add_filenames(std::string&& value);
  void add_filenames(const char* value);
  void add_filenames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filenames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filenames();

  // @@protoc_insertion_point(class_scope:AR51.GetAllVideoFilesResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filenames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class StartMediaRecoderRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.StartMediaRecoderRequest) */ {
 public:
  StartMediaRecoderRequest();
  virtual ~StartMediaRecoderRequest();

  StartMediaRecoderRequest(const StartMediaRecoderRequest& from);
  StartMediaRecoderRequest(StartMediaRecoderRequest&& from) noexcept
    : StartMediaRecoderRequest() {
    *this = ::std::move(from);
  }

  inline StartMediaRecoderRequest& operator=(const StartMediaRecoderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartMediaRecoderRequest& operator=(StartMediaRecoderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartMediaRecoderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartMediaRecoderRequest* internal_default_instance() {
    return reinterpret_cast<const StartMediaRecoderRequest*>(
               &_StartMediaRecoderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(StartMediaRecoderRequest* other);
  friend void swap(StartMediaRecoderRequest& a, StartMediaRecoderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartMediaRecoderRequest* New() const final {
    return CreateMaybeMessage<StartMediaRecoderRequest>(nullptr);
  }

  StartMediaRecoderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartMediaRecoderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartMediaRecoderRequest& from);
  void MergeFrom(const StartMediaRecoderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartMediaRecoderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.StartMediaRecoderRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double StartTime = 1;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 1;
  double starttime() const;
  void set_starttime(double value);

  // @@protoc_insertion_point(class_scope:AR51.StartMediaRecoderRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double starttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class DownloadVideoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.DownloadVideoRequest) */ {
 public:
  DownloadVideoRequest();
  virtual ~DownloadVideoRequest();

  DownloadVideoRequest(const DownloadVideoRequest& from);
  DownloadVideoRequest(DownloadVideoRequest&& from) noexcept
    : DownloadVideoRequest() {
    *this = ::std::move(from);
  }

  inline DownloadVideoRequest& operator=(const DownloadVideoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadVideoRequest& operator=(DownloadVideoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownloadVideoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadVideoRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadVideoRequest*>(
               &_DownloadVideoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(DownloadVideoRequest* other);
  friend void swap(DownloadVideoRequest& a, DownloadVideoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DownloadVideoRequest* New() const final {
    return CreateMaybeMessage<DownloadVideoRequest>(nullptr);
  }

  DownloadVideoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadVideoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownloadVideoRequest& from);
  void MergeFrom(const DownloadVideoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadVideoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.DownloadVideoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string FileName = 1;
  void clear_filename();
  static const int kFileNameFieldNumber = 1;
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);

  // int32 PacketSize = 2;
  void clear_packetsize();
  static const int kPacketSizeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 packetsize() const;
  void set_packetsize(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:AR51.DownloadVideoRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::int32 packetsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class StartRecordingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.StartRecordingRequest) */ {
 public:
  StartRecordingRequest();
  virtual ~StartRecordingRequest();

  StartRecordingRequest(const StartRecordingRequest& from);
  StartRecordingRequest(StartRecordingRequest&& from) noexcept
    : StartRecordingRequest() {
    *this = ::std::move(from);
  }

  inline StartRecordingRequest& operator=(const StartRecordingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRecordingRequest& operator=(StartRecordingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartRecordingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartRecordingRequest* internal_default_instance() {
    return reinterpret_cast<const StartRecordingRequest*>(
               &_StartRecordingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(StartRecordingRequest* other);
  friend void swap(StartRecordingRequest& a, StartRecordingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartRecordingRequest* New() const final {
    return CreateMaybeMessage<StartRecordingRequest>(nullptr);
  }

  StartRecordingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartRecordingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartRecordingRequest& from);
  void MergeFrom(const StartRecordingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRecordingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.StartRecordingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string FileName = 1;
  void clear_filename();
  static const int kFileNameFieldNumber = 1;
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);

  // string CameraId = 3;
  void clear_cameraid();
  static const int kCameraIdFieldNumber = 3;
  const std::string& cameraid() const;
  void set_cameraid(const std::string& value);
  void set_cameraid(std::string&& value);
  void set_cameraid(const char* value);
  void set_cameraid(const char* value, size_t size);
  std::string* mutable_cameraid();
  std::string* release_cameraid();
  void set_allocated_cameraid(std::string* cameraid);

  // bool useBestSetting = 2;
  void clear_usebestsetting();
  static const int kUseBestSettingFieldNumber = 2;
  bool usebestsetting() const;
  void set_usebestsetting(bool value);

  // int32 width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 height = 5;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 FrameRate = 6;
  void clear_framerate();
  static const int kFrameRateFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 framerate() const;
  void set_framerate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float maxDuration = 7;
  void clear_maxduration();
  static const int kMaxDurationFieldNumber = 7;
  float maxduration() const;
  void set_maxduration(float value);

  // @@protoc_insertion_point(class_scope:AR51.StartRecordingRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraid_;
  bool usebestsetting_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 framerate_;
  float maxduration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class StartRecordingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.StartRecordingResponse) */ {
 public:
  StartRecordingResponse();
  virtual ~StartRecordingResponse();

  StartRecordingResponse(const StartRecordingResponse& from);
  StartRecordingResponse(StartRecordingResponse&& from) noexcept
    : StartRecordingResponse() {
    *this = ::std::move(from);
  }

  inline StartRecordingResponse& operator=(const StartRecordingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRecordingResponse& operator=(StartRecordingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartRecordingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartRecordingResponse* internal_default_instance() {
    return reinterpret_cast<const StartRecordingResponse*>(
               &_StartRecordingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(StartRecordingResponse* other);
  friend void swap(StartRecordingResponse& a, StartRecordingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartRecordingResponse* New() const final {
    return CreateMaybeMessage<StartRecordingResponse>(nullptr);
  }

  StartRecordingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartRecordingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartRecordingResponse& from);
  void MergeFrom(const StartRecordingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRecordingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.StartRecordingResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string FileName = 1;
  void clear_filename();
  static const int kFileNameFieldNumber = 1;
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);

  // @@protoc_insertion_point(class_scope:AR51.StartRecordingResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class VideoRecordingSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.VideoRecordingSettings) */ {
 public:
  VideoRecordingSettings();
  virtual ~VideoRecordingSettings();

  VideoRecordingSettings(const VideoRecordingSettings& from);
  VideoRecordingSettings(VideoRecordingSettings&& from) noexcept
    : VideoRecordingSettings() {
    *this = ::std::move(from);
  }

  inline VideoRecordingSettings& operator=(const VideoRecordingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoRecordingSettings& operator=(VideoRecordingSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoRecordingSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoRecordingSettings* internal_default_instance() {
    return reinterpret_cast<const VideoRecordingSettings*>(
               &_VideoRecordingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(VideoRecordingSettings* other);
  friend void swap(VideoRecordingSettings& a, VideoRecordingSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoRecordingSettings* New() const final {
    return CreateMaybeMessage<VideoRecordingSettings>(nullptr);
  }

  VideoRecordingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoRecordingSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoRecordingSettings& from);
  void MergeFrom(const VideoRecordingSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoRecordingSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.VideoRecordingSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string CameraId = 1;
  void clear_cameraid();
  static const int kCameraIdFieldNumber = 1;
  const std::string& cameraid() const;
  void set_cameraid(const std::string& value);
  void set_cameraid(std::string&& value);
  void set_cameraid(const char* value);
  void set_cameraid(const char* value, size_t size);
  std::string* mutable_cameraid();
  std::string* release_cameraid();
  void set_allocated_cameraid(std::string* cameraid);

  // int32 Width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 Height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 FrameRate = 4;
  void clear_framerate();
  static const int kFrameRateFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 framerate() const;
  void set_framerate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .AR51.LensFacing LensFacing = 5;
  void clear_lensfacing();
  static const int kLensFacingFieldNumber = 5;
  ::AR51::LensFacing lensfacing() const;
  void set_lensfacing(::AR51::LensFacing value);

  // bool IsHighSpeed = 6;
  void clear_ishighspeed();
  static const int kIsHighSpeedFieldNumber = 6;
  bool ishighspeed() const;
  void set_ishighspeed(bool value);

  // @@protoc_insertion_point(class_scope:AR51.VideoRecordingSettings)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraid_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 framerate_;
  int lensfacing_;
  bool ishighspeed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class GetVideoRecordingSettingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.GetVideoRecordingSettingResponse) */ {
 public:
  GetVideoRecordingSettingResponse();
  virtual ~GetVideoRecordingSettingResponse();

  GetVideoRecordingSettingResponse(const GetVideoRecordingSettingResponse& from);
  GetVideoRecordingSettingResponse(GetVideoRecordingSettingResponse&& from) noexcept
    : GetVideoRecordingSettingResponse() {
    *this = ::std::move(from);
  }

  inline GetVideoRecordingSettingResponse& operator=(const GetVideoRecordingSettingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVideoRecordingSettingResponse& operator=(GetVideoRecordingSettingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVideoRecordingSettingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVideoRecordingSettingResponse* internal_default_instance() {
    return reinterpret_cast<const GetVideoRecordingSettingResponse*>(
               &_GetVideoRecordingSettingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(GetVideoRecordingSettingResponse* other);
  friend void swap(GetVideoRecordingSettingResponse& a, GetVideoRecordingSettingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVideoRecordingSettingResponse* New() const final {
    return CreateMaybeMessage<GetVideoRecordingSettingResponse>(nullptr);
  }

  GetVideoRecordingSettingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVideoRecordingSettingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVideoRecordingSettingResponse& from);
  void MergeFrom(const GetVideoRecordingSettingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVideoRecordingSettingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.GetVideoRecordingSettingResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AR51.VideoRecordingSettings Settings = 1;
  int settings_size() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 1;
  ::AR51::VideoRecordingSettings* mutable_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::VideoRecordingSettings >*
      mutable_settings();
  const ::AR51::VideoRecordingSettings& settings(int index) const;
  ::AR51::VideoRecordingSettings* add_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::VideoRecordingSettings >&
      settings() const;

  // @@protoc_insertion_point(class_scope:AR51.GetVideoRecordingSettingResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::VideoRecordingSettings > settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class CameraFeedRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.CameraFeedRequest) */ {
 public:
  CameraFeedRequest();
  virtual ~CameraFeedRequest();

  CameraFeedRequest(const CameraFeedRequest& from);
  CameraFeedRequest(CameraFeedRequest&& from) noexcept
    : CameraFeedRequest() {
    *this = ::std::move(from);
  }

  inline CameraFeedRequest& operator=(const CameraFeedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraFeedRequest& operator=(CameraFeedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraFeedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraFeedRequest* internal_default_instance() {
    return reinterpret_cast<const CameraFeedRequest*>(
               &_CameraFeedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CameraFeedRequest* other);
  friend void swap(CameraFeedRequest& a, CameraFeedRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraFeedRequest* New() const final {
    return CreateMaybeMessage<CameraFeedRequest>(nullptr);
  }

  CameraFeedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraFeedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraFeedRequest& from);
  void MergeFrom(const CameraFeedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraFeedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.CameraFeedRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 JpgQuality = 1;
  void clear_jpgquality();
  static const int kJpgQualityFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 jpgquality() const;
  void set_jpgquality(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 MaxWidth = 2;
  void clear_maxwidth();
  static const int kMaxWidthFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 maxwidth() const;
  void set_maxwidth(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 MaxHeight = 3;
  void clear_maxheight();
  static const int kMaxHeightFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 maxheight() const;
  void set_maxheight(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 FrameRate = 4;
  void clear_framerate();
  static const int kFrameRateFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 framerate() const;
  void set_framerate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool HologramsEnabled = 5;
  void clear_hologramsenabled();
  static const int kHologramsEnabledFieldNumber = 5;
  bool hologramsenabled() const;
  void set_hologramsenabled(bool value);

  // @@protoc_insertion_point(class_scope:AR51.CameraFeedRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 jpgquality_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxwidth_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxheight_;
  ::PROTOBUF_NAMESPACE_ID::int32 framerate_;
  bool hologramsenabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class CameraFeedResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.CameraFeedResponse) */ {
 public:
  CameraFeedResponse();
  virtual ~CameraFeedResponse();

  CameraFeedResponse(const CameraFeedResponse& from);
  CameraFeedResponse(CameraFeedResponse&& from) noexcept
    : CameraFeedResponse() {
    *this = ::std::move(from);
  }

  inline CameraFeedResponse& operator=(const CameraFeedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraFeedResponse& operator=(CameraFeedResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraFeedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraFeedResponse* internal_default_instance() {
    return reinterpret_cast<const CameraFeedResponse*>(
               &_CameraFeedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CameraFeedResponse* other);
  friend void swap(CameraFeedResponse& a, CameraFeedResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraFeedResponse* New() const final {
    return CreateMaybeMessage<CameraFeedResponse>(nullptr);
  }

  CameraFeedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraFeedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraFeedResponse& from);
  void MergeFrom(const CameraFeedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraFeedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.CameraFeedResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes CameraToWorld = 2;
  void clear_cameratoworld();
  static const int kCameraToWorldFieldNumber = 2;
  const std::string& cameratoworld() const;
  void set_cameratoworld(const std::string& value);
  void set_cameratoworld(std::string&& value);
  void set_cameratoworld(const char* value);
  void set_cameratoworld(const void* value, size_t size);
  std::string* mutable_cameratoworld();
  std::string* release_cameratoworld();
  void set_allocated_cameratoworld(std::string* cameratoworld);

  // bytes Projection = 3;
  void clear_projection();
  static const int kProjectionFieldNumber = 3;
  const std::string& projection() const;
  void set_projection(const std::string& value);
  void set_projection(std::string&& value);
  void set_projection(const char* value);
  void set_projection(const void* value, size_t size);
  std::string* mutable_projection();
  std::string* release_projection();
  void set_allocated_projection(std::string* projection);

  // bytes Jpg = 4;
  void clear_jpg();
  static const int kJpgFieldNumber = 4;
  const std::string& jpg() const;
  void set_jpg(const std::string& value);
  void set_jpg(std::string&& value);
  void set_jpg(const char* value);
  void set_jpg(const void* value, size_t size);
  std::string* mutable_jpg();
  std::string* release_jpg();
  void set_allocated_jpg(std::string* jpg);

  // int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:AR51.CameraFeedResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameratoworld_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jpg_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class RenderingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.RenderingRequest) */ {
 public:
  RenderingRequest();
  virtual ~RenderingRequest();

  RenderingRequest(const RenderingRequest& from);
  RenderingRequest(RenderingRequest&& from) noexcept
    : RenderingRequest() {
    *this = ::std::move(from);
  }

  inline RenderingRequest& operator=(const RenderingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderingRequest& operator=(RenderingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenderingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenderingRequest* internal_default_instance() {
    return reinterpret_cast<const RenderingRequest*>(
               &_RenderingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(RenderingRequest* other);
  friend void swap(RenderingRequest& a, RenderingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RenderingRequest* New() const final {
    return CreateMaybeMessage<RenderingRequest>(nullptr);
  }

  RenderingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenderingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenderingRequest& from);
  void MergeFrom(const RenderingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.RenderingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string CameraId = 1;
  void clear_cameraid();
  static const int kCameraIdFieldNumber = 1;
  const std::string& cameraid() const;
  void set_cameraid(const std::string& value);
  void set_cameraid(std::string&& value);
  void set_cameraid(const char* value);
  void set_cameraid(const char* value, size_t size);
  std::string* mutable_cameraid();
  std::string* release_cameraid();
  void set_allocated_cameraid(std::string* cameraid);

  // string IpAddress = 2;
  void clear_ipaddress();
  static const int kIpAddressFieldNumber = 2;
  const std::string& ipaddress() const;
  void set_ipaddress(const std::string& value);
  void set_ipaddress(std::string&& value);
  void set_ipaddress(const char* value);
  void set_ipaddress(const char* value, size_t size);
  std::string* mutable_ipaddress();
  std::string* release_ipaddress();
  void set_allocated_ipaddress(std::string* ipaddress);

  // int32 Port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 Width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 Height = 5;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 FrameRate = 6;
  void clear_framerate();
  static const int kFrameRateFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 framerate() const;
  void set_framerate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 JpgQuality = 7;
  void clear_jpgquality();
  static const int kJpgQualityFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 jpgquality() const;
  void set_jpgquality(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:AR51.RenderingRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipaddress_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 framerate_;
  ::PROTOBUF_NAMESPACE_ID::int32 jpgquality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class RenderingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.RenderingResponse) */ {
 public:
  RenderingResponse();
  virtual ~RenderingResponse();

  RenderingResponse(const RenderingResponse& from);
  RenderingResponse(RenderingResponse&& from) noexcept
    : RenderingResponse() {
    *this = ::std::move(from);
  }

  inline RenderingResponse& operator=(const RenderingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderingResponse& operator=(RenderingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenderingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenderingResponse* internal_default_instance() {
    return reinterpret_cast<const RenderingResponse*>(
               &_RenderingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(RenderingResponse* other);
  friend void swap(RenderingResponse& a, RenderingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RenderingResponse* New() const final {
    return CreateMaybeMessage<RenderingResponse>(nullptr);
  }

  RenderingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenderingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenderingResponse& from);
  void MergeFrom(const RenderingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.RenderingResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Jpg = 1;
  void clear_jpg();
  static const int kJpgFieldNumber = 1;
  const std::string& jpg() const;
  void set_jpg(const std::string& value);
  void set_jpg(std::string&& value);
  void set_jpg(const char* value);
  void set_jpg(const void* value, size_t size);
  std::string* mutable_jpg();
  std::string* release_jpg();
  void set_allocated_jpg(std::string* jpg);

  // @@protoc_insertion_point(class_scope:AR51.RenderingResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jpg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class DrawRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.DrawRequest) */ {
 public:
  DrawRequest();
  virtual ~DrawRequest();

  DrawRequest(const DrawRequest& from);
  DrawRequest(DrawRequest&& from) noexcept
    : DrawRequest() {
    *this = ::std::move(from);
  }

  inline DrawRequest& operator=(const DrawRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawRequest& operator=(DrawRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawRequest* internal_default_instance() {
    return reinterpret_cast<const DrawRequest*>(
               &_DrawRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(DrawRequest* other);
  friend void swap(DrawRequest& a, DrawRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DrawRequest* New() const final {
    return CreateMaybeMessage<DrawRequest>(nullptr);
  }

  DrawRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawRequest& from);
  void MergeFrom(const DrawRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.DrawRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);

  // .AR51.Color Color = 3;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 3;
  const ::AR51::Color& color() const;
  ::AR51::Color* release_color();
  ::AR51::Color* mutable_color();
  void set_allocated_color(::AR51::Color* color);

  // .AR51.Color FillColor = 4;
  bool has_fillcolor() const;
  void clear_fillcolor();
  static const int kFillColorFieldNumber = 4;
  const ::AR51::Color& fillcolor() const;
  ::AR51::Color* release_fillcolor();
  ::AR51::Color* mutable_fillcolor();
  void set_allocated_fillcolor(::AR51::Color* fillcolor);

  // float LineWidth = 2;
  void clear_linewidth();
  static const int kLineWidthFieldNumber = 2;
  float linewidth() const;
  void set_linewidth(float value);

  // @@protoc_insertion_point(class_scope:AR51.DrawRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::AR51::Color* color_;
  ::AR51::Color* fillcolor_;
  float linewidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class DrawLine2DRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.DrawLine2DRequest) */ {
 public:
  DrawLine2DRequest();
  virtual ~DrawLine2DRequest();

  DrawLine2DRequest(const DrawLine2DRequest& from);
  DrawLine2DRequest(DrawLine2DRequest&& from) noexcept
    : DrawLine2DRequest() {
    *this = ::std::move(from);
  }

  inline DrawLine2DRequest& operator=(const DrawLine2DRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawLine2DRequest& operator=(DrawLine2DRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawLine2DRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawLine2DRequest* internal_default_instance() {
    return reinterpret_cast<const DrawLine2DRequest*>(
               &_DrawLine2DRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(DrawLine2DRequest* other);
  friend void swap(DrawLine2DRequest& a, DrawLine2DRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DrawLine2DRequest* New() const final {
    return CreateMaybeMessage<DrawLine2DRequest>(nullptr);
  }

  DrawLine2DRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawLine2DRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawLine2DRequest& from);
  void MergeFrom(const DrawLine2DRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawLine2DRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.DrawLine2DRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AR51.DrawRequest Settings = 1;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 1;
  const ::AR51::DrawRequest& settings() const;
  ::AR51::DrawRequest* release_settings();
  ::AR51::DrawRequest* mutable_settings();
  void set_allocated_settings(::AR51::DrawRequest* settings);

  // .AR51.Vector2 From = 2;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 2;
  const ::AR51::Vector2& from() const;
  ::AR51::Vector2* release_from();
  ::AR51::Vector2* mutable_from();
  void set_allocated_from(::AR51::Vector2* from);

  // .AR51.Vector2 To = 3;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 3;
  const ::AR51::Vector2& to() const;
  ::AR51::Vector2* release_to();
  ::AR51::Vector2* mutable_to();
  void set_allocated_to(::AR51::Vector2* to);

  // @@protoc_insertion_point(class_scope:AR51.DrawLine2DRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::AR51::DrawRequest* settings_;
  ::AR51::Vector2* from_;
  ::AR51::Vector2* to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class DrawLine3DRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.DrawLine3DRequest) */ {
 public:
  DrawLine3DRequest();
  virtual ~DrawLine3DRequest();

  DrawLine3DRequest(const DrawLine3DRequest& from);
  DrawLine3DRequest(DrawLine3DRequest&& from) noexcept
    : DrawLine3DRequest() {
    *this = ::std::move(from);
  }

  inline DrawLine3DRequest& operator=(const DrawLine3DRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawLine3DRequest& operator=(DrawLine3DRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawLine3DRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawLine3DRequest* internal_default_instance() {
    return reinterpret_cast<const DrawLine3DRequest*>(
               &_DrawLine3DRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(DrawLine3DRequest* other);
  friend void swap(DrawLine3DRequest& a, DrawLine3DRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DrawLine3DRequest* New() const final {
    return CreateMaybeMessage<DrawLine3DRequest>(nullptr);
  }

  DrawLine3DRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawLine3DRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawLine3DRequest& from);
  void MergeFrom(const DrawLine3DRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawLine3DRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.DrawLine3DRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AR51.DrawRequest Settings = 1;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 1;
  const ::AR51::DrawRequest& settings() const;
  ::AR51::DrawRequest* release_settings();
  ::AR51::DrawRequest* mutable_settings();
  void set_allocated_settings(::AR51::DrawRequest* settings);

  // .AR51.Vector3 From = 2;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 2;
  const ::AR51::Vector3& from() const;
  ::AR51::Vector3* release_from();
  ::AR51::Vector3* mutable_from();
  void set_allocated_from(::AR51::Vector3* from);

  // .AR51.Vector3 To = 3;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 3;
  const ::AR51::Vector3& to() const;
  ::AR51::Vector3* release_to();
  ::AR51::Vector3* mutable_to();
  void set_allocated_to(::AR51::Vector3* to);

  // @@protoc_insertion_point(class_scope:AR51.DrawLine3DRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::AR51::DrawRequest* settings_;
  ::AR51::Vector3* from_;
  ::AR51::Vector3* to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class DrawRectRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.DrawRectRequest) */ {
 public:
  DrawRectRequest();
  virtual ~DrawRectRequest();

  DrawRectRequest(const DrawRectRequest& from);
  DrawRectRequest(DrawRectRequest&& from) noexcept
    : DrawRectRequest() {
    *this = ::std::move(from);
  }

  inline DrawRectRequest& operator=(const DrawRectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawRectRequest& operator=(DrawRectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawRectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawRectRequest* internal_default_instance() {
    return reinterpret_cast<const DrawRectRequest*>(
               &_DrawRectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(DrawRectRequest* other);
  friend void swap(DrawRectRequest& a, DrawRectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DrawRectRequest* New() const final {
    return CreateMaybeMessage<DrawRectRequest>(nullptr);
  }

  DrawRectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawRectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawRectRequest& from);
  void MergeFrom(const DrawRectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawRectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.DrawRectRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AR51.DrawRequest Settings = 1;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 1;
  const ::AR51::DrawRequest& settings() const;
  ::AR51::DrawRequest* release_settings();
  ::AR51::DrawRequest* mutable_settings();
  void set_allocated_settings(::AR51::DrawRequest* settings);

  // .AR51.Vector2 Center = 2;
  bool has_center() const;
  void clear_center();
  static const int kCenterFieldNumber = 2;
  const ::AR51::Vector2& center() const;
  ::AR51::Vector2* release_center();
  ::AR51::Vector2* mutable_center();
  void set_allocated_center(::AR51::Vector2* center);

  // .AR51.Vector2 Size = 3;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  const ::AR51::Vector2& size() const;
  ::AR51::Vector2* release_size();
  ::AR51::Vector2* mutable_size();
  void set_allocated_size(::AR51::Vector2* size);

  // @@protoc_insertion_point(class_scope:AR51.DrawRectRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::AR51::DrawRequest* settings_;
  ::AR51::Vector2* center_;
  ::AR51::Vector2* size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class DrawCubeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.DrawCubeRequest) */ {
 public:
  DrawCubeRequest();
  virtual ~DrawCubeRequest();

  DrawCubeRequest(const DrawCubeRequest& from);
  DrawCubeRequest(DrawCubeRequest&& from) noexcept
    : DrawCubeRequest() {
    *this = ::std::move(from);
  }

  inline DrawCubeRequest& operator=(const DrawCubeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawCubeRequest& operator=(DrawCubeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawCubeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawCubeRequest* internal_default_instance() {
    return reinterpret_cast<const DrawCubeRequest*>(
               &_DrawCubeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(DrawCubeRequest* other);
  friend void swap(DrawCubeRequest& a, DrawCubeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DrawCubeRequest* New() const final {
    return CreateMaybeMessage<DrawCubeRequest>(nullptr);
  }

  DrawCubeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawCubeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawCubeRequest& from);
  void MergeFrom(const DrawCubeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawCubeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.DrawCubeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AR51.DrawRequest Settings = 1;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 1;
  const ::AR51::DrawRequest& settings() const;
  ::AR51::DrawRequest* release_settings();
  ::AR51::DrawRequest* mutable_settings();
  void set_allocated_settings(::AR51::DrawRequest* settings);

  // .AR51.Vector3 Center = 2;
  bool has_center() const;
  void clear_center();
  static const int kCenterFieldNumber = 2;
  const ::AR51::Vector3& center() const;
  ::AR51::Vector3* release_center();
  ::AR51::Vector3* mutable_center();
  void set_allocated_center(::AR51::Vector3* center);

  // .AR51.Vector3 Size = 3;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  const ::AR51::Vector3& size() const;
  ::AR51::Vector3* release_size();
  ::AR51::Vector3* mutable_size();
  void set_allocated_size(::AR51::Vector3* size);

  // @@protoc_insertion_point(class_scope:AR51.DrawCubeRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::AR51::DrawRequest* settings_;
  ::AR51::Vector3* center_;
  ::AR51::Vector3* size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class DrawCircleRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.DrawCircleRequest) */ {
 public:
  DrawCircleRequest();
  virtual ~DrawCircleRequest();

  DrawCircleRequest(const DrawCircleRequest& from);
  DrawCircleRequest(DrawCircleRequest&& from) noexcept
    : DrawCircleRequest() {
    *this = ::std::move(from);
  }

  inline DrawCircleRequest& operator=(const DrawCircleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawCircleRequest& operator=(DrawCircleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawCircleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawCircleRequest* internal_default_instance() {
    return reinterpret_cast<const DrawCircleRequest*>(
               &_DrawCircleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(DrawCircleRequest* other);
  friend void swap(DrawCircleRequest& a, DrawCircleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DrawCircleRequest* New() const final {
    return CreateMaybeMessage<DrawCircleRequest>(nullptr);
  }

  DrawCircleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawCircleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawCircleRequest& from);
  void MergeFrom(const DrawCircleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawCircleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.DrawCircleRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AR51.DrawRequest Settings = 1;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 1;
  const ::AR51::DrawRequest& settings() const;
  ::AR51::DrawRequest* release_settings();
  ::AR51::DrawRequest* mutable_settings();
  void set_allocated_settings(::AR51::DrawRequest* settings);

  // .AR51.Vector2 Center = 2;
  bool has_center() const;
  void clear_center();
  static const int kCenterFieldNumber = 2;
  const ::AR51::Vector2& center() const;
  ::AR51::Vector2* release_center();
  ::AR51::Vector2* mutable_center();
  void set_allocated_center(::AR51::Vector2* center);

  // float Radius = 3;
  void clear_radius();
  static const int kRadiusFieldNumber = 3;
  float radius() const;
  void set_radius(float value);

  // int32 Segments = 4;
  void clear_segments();
  static const int kSegmentsFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 segments() const;
  void set_segments(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:AR51.DrawCircleRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::AR51::DrawRequest* settings_;
  ::AR51::Vector2* center_;
  float radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 segments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class DrawSphereRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.DrawSphereRequest) */ {
 public:
  DrawSphereRequest();
  virtual ~DrawSphereRequest();

  DrawSphereRequest(const DrawSphereRequest& from);
  DrawSphereRequest(DrawSphereRequest&& from) noexcept
    : DrawSphereRequest() {
    *this = ::std::move(from);
  }

  inline DrawSphereRequest& operator=(const DrawSphereRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawSphereRequest& operator=(DrawSphereRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawSphereRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawSphereRequest* internal_default_instance() {
    return reinterpret_cast<const DrawSphereRequest*>(
               &_DrawSphereRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(DrawSphereRequest* other);
  friend void swap(DrawSphereRequest& a, DrawSphereRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DrawSphereRequest* New() const final {
    return CreateMaybeMessage<DrawSphereRequest>(nullptr);
  }

  DrawSphereRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawSphereRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawSphereRequest& from);
  void MergeFrom(const DrawSphereRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawSphereRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.DrawSphereRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AR51.DrawRequest Settings = 1;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 1;
  const ::AR51::DrawRequest& settings() const;
  ::AR51::DrawRequest* release_settings();
  ::AR51::DrawRequest* mutable_settings();
  void set_allocated_settings(::AR51::DrawRequest* settings);

  // .AR51.Vector3 Center = 2;
  bool has_center() const;
  void clear_center();
  static const int kCenterFieldNumber = 2;
  const ::AR51::Vector3& center() const;
  ::AR51::Vector3* release_center();
  ::AR51::Vector3* mutable_center();
  void set_allocated_center(::AR51::Vector3* center);

  // float Radius = 3;
  void clear_radius();
  static const int kRadiusFieldNumber = 3;
  float radius() const;
  void set_radius(float value);

  // @@protoc_insertion_point(class_scope:AR51.DrawSphereRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::AR51::DrawRequest* settings_;
  ::AR51::Vector3* center_;
  float radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class InstantiateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.InstantiateRequest) */ {
 public:
  InstantiateRequest();
  virtual ~InstantiateRequest();

  InstantiateRequest(const InstantiateRequest& from);
  InstantiateRequest(InstantiateRequest&& from) noexcept
    : InstantiateRequest() {
    *this = ::std::move(from);
  }

  inline InstantiateRequest& operator=(const InstantiateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstantiateRequest& operator=(InstantiateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstantiateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstantiateRequest* internal_default_instance() {
    return reinterpret_cast<const InstantiateRequest*>(
               &_InstantiateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(InstantiateRequest* other);
  friend void swap(InstantiateRequest& a, InstantiateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstantiateRequest* New() const final {
    return CreateMaybeMessage<InstantiateRequest>(nullptr);
  }

  InstantiateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstantiateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstantiateRequest& from);
  void MergeFrom(const InstantiateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstantiateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.InstantiateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .AR51.Vector3 Position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::AR51::Vector3& position() const;
  ::AR51::Vector3* release_position();
  ::AR51::Vector3* mutable_position();
  void set_allocated_position(::AR51::Vector3* position);

  // .AR51.Quaternion Rotation = 3;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 3;
  const ::AR51::Quaternion& rotation() const;
  ::AR51::Quaternion* release_rotation();
  ::AR51::Quaternion* mutable_rotation();
  void set_allocated_rotation(::AR51::Quaternion* rotation);

  // .AR51.Vector3 Scale = 4;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 4;
  const ::AR51::Vector3& scale() const;
  ::AR51::Vector3* release_scale();
  ::AR51::Vector3* mutable_scale();
  void set_allocated_scale(::AR51::Vector3* scale);

  // .AR51.Color color = 6;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 6;
  const ::AR51::Color& color() const;
  ::AR51::Color* release_color();
  ::AR51::Color* mutable_color();
  void set_allocated_color(::AR51::Color* color);

  // int64 ParentId = 5;
  void clear_parentid();
  static const int kParentIdFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 parentid() const;
  void set_parentid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:AR51.InstantiateRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::AR51::Vector3* position_;
  ::AR51::Quaternion* rotation_;
  ::AR51::Vector3* scale_;
  ::AR51::Color* color_;
  ::PROTOBUF_NAMESPACE_ID::int64 parentid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class CreatePrimitiveRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.CreatePrimitiveRequest) */ {
 public:
  CreatePrimitiveRequest();
  virtual ~CreatePrimitiveRequest();

  CreatePrimitiveRequest(const CreatePrimitiveRequest& from);
  CreatePrimitiveRequest(CreatePrimitiveRequest&& from) noexcept
    : CreatePrimitiveRequest() {
    *this = ::std::move(from);
  }

  inline CreatePrimitiveRequest& operator=(const CreatePrimitiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePrimitiveRequest& operator=(CreatePrimitiveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePrimitiveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePrimitiveRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePrimitiveRequest*>(
               &_CreatePrimitiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(CreatePrimitiveRequest* other);
  friend void swap(CreatePrimitiveRequest& a, CreatePrimitiveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreatePrimitiveRequest* New() const final {
    return CreateMaybeMessage<CreatePrimitiveRequest>(nullptr);
  }

  CreatePrimitiveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePrimitiveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePrimitiveRequest& from);
  void MergeFrom(const CreatePrimitiveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePrimitiveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.CreatePrimitiveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AR51.InstantiateRequest Instance = 2;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 2;
  const ::AR51::InstantiateRequest& instance() const;
  ::AR51::InstantiateRequest* release_instance();
  ::AR51::InstantiateRequest* mutable_instance();
  void set_allocated_instance(::AR51::InstantiateRequest* instance);

  // .AR51.PrimitiveType pritmiveType = 1;
  void clear_pritmivetype();
  static const int kPritmiveTypeFieldNumber = 1;
  ::AR51::PrimitiveType pritmivetype() const;
  void set_pritmivetype(::AR51::PrimitiveType value);

  // @@protoc_insertion_point(class_scope:AR51.CreatePrimitiveRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::AR51::InstantiateRequest* instance_;
  int pritmivetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class NameRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.NameRequest) */ {
 public:
  NameRequest();
  virtual ~NameRequest();

  NameRequest(const NameRequest& from);
  NameRequest(NameRequest&& from) noexcept
    : NameRequest() {
    *this = ::std::move(from);
  }

  inline NameRequest& operator=(const NameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameRequest& operator=(NameRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameRequest* internal_default_instance() {
    return reinterpret_cast<const NameRequest*>(
               &_NameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(NameRequest* other);
  friend void swap(NameRequest& a, NameRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NameRequest* New() const final {
    return CreateMaybeMessage<NameRequest>(nullptr);
  }

  NameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NameRequest& from);
  void MergeFrom(const NameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.NameRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:AR51.NameRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class ObjectIdMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.ObjectIdMessage) */ {
 public:
  ObjectIdMessage();
  virtual ~ObjectIdMessage();

  ObjectIdMessage(const ObjectIdMessage& from);
  ObjectIdMessage(ObjectIdMessage&& from) noexcept
    : ObjectIdMessage() {
    *this = ::std::move(from);
  }

  inline ObjectIdMessage& operator=(const ObjectIdMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectIdMessage& operator=(ObjectIdMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectIdMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectIdMessage* internal_default_instance() {
    return reinterpret_cast<const ObjectIdMessage*>(
               &_ObjectIdMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(ObjectIdMessage* other);
  friend void swap(ObjectIdMessage& a, ObjectIdMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectIdMessage* New() const final {
    return CreateMaybeMessage<ObjectIdMessage>(nullptr);
  }

  ObjectIdMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectIdMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectIdMessage& from);
  void MergeFrom(const ObjectIdMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectIdMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.ObjectIdMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:AR51.ObjectIdMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class ActiveMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.ActiveMessage) */ {
 public:
  ActiveMessage();
  virtual ~ActiveMessage();

  ActiveMessage(const ActiveMessage& from);
  ActiveMessage(ActiveMessage&& from) noexcept
    : ActiveMessage() {
    *this = ::std::move(from);
  }

  inline ActiveMessage& operator=(const ActiveMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveMessage& operator=(ActiveMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActiveMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveMessage* internal_default_instance() {
    return reinterpret_cast<const ActiveMessage*>(
               &_ActiveMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(ActiveMessage* other);
  friend void swap(ActiveMessage& a, ActiveMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActiveMessage* New() const final {
    return CreateMaybeMessage<ActiveMessage>(nullptr);
  }

  ActiveMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActiveMessage& from);
  void MergeFrom(const ActiveMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.ActiveMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool IsActive = 2;
  void clear_isactive();
  static const int kIsActiveFieldNumber = 2;
  bool isactive() const;
  void set_isactive(bool value);

  // @@protoc_insertion_point(class_scope:AR51.ActiveMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  bool isactive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class SetParentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.SetParentRequest) */ {
 public:
  SetParentRequest();
  virtual ~SetParentRequest();

  SetParentRequest(const SetParentRequest& from);
  SetParentRequest(SetParentRequest&& from) noexcept
    : SetParentRequest() {
    *this = ::std::move(from);
  }

  inline SetParentRequest& operator=(const SetParentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetParentRequest& operator=(SetParentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetParentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetParentRequest* internal_default_instance() {
    return reinterpret_cast<const SetParentRequest*>(
               &_SetParentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(SetParentRequest* other);
  friend void swap(SetParentRequest& a, SetParentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetParentRequest* New() const final {
    return CreateMaybeMessage<SetParentRequest>(nullptr);
  }

  SetParentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetParentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetParentRequest& from);
  void MergeFrom(const SetParentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetParentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.SetParentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 parentId = 2;
  void clear_parentid();
  static const int kParentIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 parentid() const;
  void set_parentid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:AR51.SetParentRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 parentid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class SetNameRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.SetNameRequest) */ {
 public:
  SetNameRequest();
  virtual ~SetNameRequest();

  SetNameRequest(const SetNameRequest& from);
  SetNameRequest(SetNameRequest&& from) noexcept
    : SetNameRequest() {
    *this = ::std::move(from);
  }

  inline SetNameRequest& operator=(const SetNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetNameRequest& operator=(SetNameRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetNameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetNameRequest* internal_default_instance() {
    return reinterpret_cast<const SetNameRequest*>(
               &_SetNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(SetNameRequest* other);
  friend void swap(SetNameRequest& a, SetNameRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetNameRequest* New() const final {
    return CreateMaybeMessage<SetNameRequest>(nullptr);
  }

  SetNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetNameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetNameRequest& from);
  void MergeFrom(const SetNameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetNameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.SetNameRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:AR51.SetNameRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class GetTransformRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.GetTransformRequest) */ {
 public:
  GetTransformRequest();
  virtual ~GetTransformRequest();

  GetTransformRequest(const GetTransformRequest& from);
  GetTransformRequest(GetTransformRequest&& from) noexcept
    : GetTransformRequest() {
    *this = ::std::move(from);
  }

  inline GetTransformRequest& operator=(const GetTransformRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransformRequest& operator=(GetTransformRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTransformRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTransformRequest* internal_default_instance() {
    return reinterpret_cast<const GetTransformRequest*>(
               &_GetTransformRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(GetTransformRequest* other);
  friend void swap(GetTransformRequest& a, GetTransformRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTransformRequest* New() const final {
    return CreateMaybeMessage<GetTransformRequest>(nullptr);
  }

  GetTransformRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTransformRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTransformRequest& from);
  void MergeFrom(const GetTransformRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransformRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.GetTransformRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 GameObjectId = 1;
  void clear_gameobjectid();
  static const int kGameObjectIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid() const;
  void set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .AR51.TransformTypes Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::AR51::TransformTypes type() const;
  void set_type(::AR51::TransformTypes value);

  // @@protoc_insertion_point(class_scope:AR51.GetTransformRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class SetTransformRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.SetTransformRequest) */ {
 public:
  SetTransformRequest();
  virtual ~SetTransformRequest();

  SetTransformRequest(const SetTransformRequest& from);
  SetTransformRequest(SetTransformRequest&& from) noexcept
    : SetTransformRequest() {
    *this = ::std::move(from);
  }

  inline SetTransformRequest& operator=(const SetTransformRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTransformRequest& operator=(SetTransformRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTransformRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTransformRequest* internal_default_instance() {
    return reinterpret_cast<const SetTransformRequest*>(
               &_SetTransformRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(SetTransformRequest* other);
  friend void swap(SetTransformRequest& a, SetTransformRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetTransformRequest* New() const final {
    return CreateMaybeMessage<SetTransformRequest>(nullptr);
  }

  SetTransformRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTransformRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTransformRequest& from);
  void MergeFrom(const SetTransformRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTransformRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.SetTransformRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // int64 GameObjectId = 1;
  void clear_gameobjectid();
  static const int kGameObjectIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid() const;
  void set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .AR51.TransformTypes Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::AR51::TransformTypes type() const;
  void set_type(::AR51::TransformTypes value);

  // @@protoc_insertion_point(class_scope:AR51.SetTransformRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class TransformMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.TransformMessage) */ {
 public:
  TransformMessage();
  virtual ~TransformMessage();

  TransformMessage(const TransformMessage& from);
  TransformMessage(TransformMessage&& from) noexcept
    : TransformMessage() {
    *this = ::std::move(from);
  }

  inline TransformMessage& operator=(const TransformMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformMessage& operator=(TransformMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransformMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransformMessage* internal_default_instance() {
    return reinterpret_cast<const TransformMessage*>(
               &_TransformMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(TransformMessage* other);
  friend void swap(TransformMessage& a, TransformMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransformMessage* New() const final {
    return CreateMaybeMessage<TransformMessage>(nullptr);
  }

  TransformMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransformMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransformMessage& from);
  void MergeFrom(const TransformMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.TransformMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:AR51.TransformMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class ComponentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.ComponentRequest) */ {
 public:
  ComponentRequest();
  virtual ~ComponentRequest();

  ComponentRequest(const ComponentRequest& from);
  ComponentRequest(ComponentRequest&& from) noexcept
    : ComponentRequest() {
    *this = ::std::move(from);
  }

  inline ComponentRequest& operator=(const ComponentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentRequest& operator=(ComponentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComponentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComponentRequest* internal_default_instance() {
    return reinterpret_cast<const ComponentRequest*>(
               &_ComponentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(ComponentRequest* other);
  friend void swap(ComponentRequest& a, ComponentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComponentRequest* New() const final {
    return CreateMaybeMessage<ComponentRequest>(nullptr);
  }

  ComponentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComponentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComponentRequest& from);
  void MergeFrom(const ComponentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.ComponentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ComponentType = 2;
  void clear_componenttype();
  static const int kComponentTypeFieldNumber = 2;
  const std::string& componenttype() const;
  void set_componenttype(const std::string& value);
  void set_componenttype(std::string&& value);
  void set_componenttype(const char* value);
  void set_componenttype(const char* value, size_t size);
  std::string* mutable_componenttype();
  std::string* release_componenttype();
  void set_allocated_componenttype(std::string* componenttype);

  // int64 GameObjectId = 1;
  void clear_gameobjectid();
  static const int kGameObjectIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid() const;
  void set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:AR51.ComponentRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr componenttype_;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class ComponentFieldMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.ComponentFieldMessage) */ {
 public:
  ComponentFieldMessage();
  virtual ~ComponentFieldMessage();

  ComponentFieldMessage(const ComponentFieldMessage& from);
  ComponentFieldMessage(ComponentFieldMessage&& from) noexcept
    : ComponentFieldMessage() {
    *this = ::std::move(from);
  }

  inline ComponentFieldMessage& operator=(const ComponentFieldMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentFieldMessage& operator=(ComponentFieldMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComponentFieldMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComponentFieldMessage* internal_default_instance() {
    return reinterpret_cast<const ComponentFieldMessage*>(
               &_ComponentFieldMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(ComponentFieldMessage* other);
  friend void swap(ComponentFieldMessage& a, ComponentFieldMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComponentFieldMessage* New() const final {
    return CreateMaybeMessage<ComponentFieldMessage>(nullptr);
  }

  ComponentFieldMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComponentFieldMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComponentFieldMessage& from);
  void MergeFrom(const ComponentFieldMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentFieldMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.ComponentFieldMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string FieldName = 2;
  void clear_fieldname();
  static const int kFieldNameFieldNumber = 2;
  const std::string& fieldname() const;
  void set_fieldname(const std::string& value);
  void set_fieldname(std::string&& value);
  void set_fieldname(const char* value);
  void set_fieldname(const char* value, size_t size);
  std::string* mutable_fieldname();
  std::string* release_fieldname();
  void set_allocated_fieldname(std::string* fieldname);

  // bytes Value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // int64 ComponentId = 1;
  void clear_componentid();
  static const int kComponentIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 componentid() const;
  void set_componentid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:AR51.ComponentFieldMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fieldname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 componentid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class SetMaterialTextureRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.SetMaterialTextureRequest) */ {
 public:
  SetMaterialTextureRequest();
  virtual ~SetMaterialTextureRequest();

  SetMaterialTextureRequest(const SetMaterialTextureRequest& from);
  SetMaterialTextureRequest(SetMaterialTextureRequest&& from) noexcept
    : SetMaterialTextureRequest() {
    *this = ::std::move(from);
  }

  inline SetMaterialTextureRequest& operator=(const SetMaterialTextureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMaterialTextureRequest& operator=(SetMaterialTextureRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetMaterialTextureRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMaterialTextureRequest* internal_default_instance() {
    return reinterpret_cast<const SetMaterialTextureRequest*>(
               &_SetMaterialTextureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(SetMaterialTextureRequest* other);
  friend void swap(SetMaterialTextureRequest& a, SetMaterialTextureRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetMaterialTextureRequest* New() const final {
    return CreateMaybeMessage<SetMaterialTextureRequest>(nullptr);
  }

  SetMaterialTextureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMaterialTextureRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetMaterialTextureRequest& from);
  void MergeFrom(const SetMaterialTextureRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMaterialTextureRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.SetMaterialTextureRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string TextureName = 2;
  void clear_texturename();
  static const int kTextureNameFieldNumber = 2;
  const std::string& texturename() const;
  void set_texturename(const std::string& value);
  void set_texturename(std::string&& value);
  void set_texturename(const char* value);
  void set_texturename(const char* value, size_t size);
  std::string* mutable_texturename();
  std::string* release_texturename();
  void set_allocated_texturename(std::string* texturename);

  // bytes Jpg = 3;
  void clear_jpg();
  static const int kJpgFieldNumber = 3;
  const std::string& jpg() const;
  void set_jpg(const std::string& value);
  void set_jpg(std::string&& value);
  void set_jpg(const char* value);
  void set_jpg(const void* value, size_t size);
  std::string* mutable_jpg();
  std::string* release_jpg();
  void set_allocated_jpg(std::string* jpg);

  // int64 GameObjectId = 1;
  void clear_gameobjectid();
  static const int kGameObjectIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid() const;
  void set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool DestroyCurrentTexture = 4;
  void clear_destroycurrenttexture();
  static const int kDestroyCurrentTextureFieldNumber = 4;
  bool destroycurrenttexture() const;
  void set_destroycurrenttexture(bool value);

  // bool Shared = 5;
  void clear_shared();
  static const int kSharedFieldNumber = 5;
  bool shared() const;
  void set_shared(bool value);

  // @@protoc_insertion_point(class_scope:AR51.SetMaterialTextureRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texturename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jpg_;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid_;
  bool destroycurrenttexture_;
  bool shared_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class SetMaterialInt32Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.SetMaterialInt32Request) */ {
 public:
  SetMaterialInt32Request();
  virtual ~SetMaterialInt32Request();

  SetMaterialInt32Request(const SetMaterialInt32Request& from);
  SetMaterialInt32Request(SetMaterialInt32Request&& from) noexcept
    : SetMaterialInt32Request() {
    *this = ::std::move(from);
  }

  inline SetMaterialInt32Request& operator=(const SetMaterialInt32Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMaterialInt32Request& operator=(SetMaterialInt32Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetMaterialInt32Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMaterialInt32Request* internal_default_instance() {
    return reinterpret_cast<const SetMaterialInt32Request*>(
               &_SetMaterialInt32Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(SetMaterialInt32Request* other);
  friend void swap(SetMaterialInt32Request& a, SetMaterialInt32Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetMaterialInt32Request* New() const final {
    return CreateMaybeMessage<SetMaterialInt32Request>(nullptr);
  }

  SetMaterialInt32Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMaterialInt32Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetMaterialInt32Request& from);
  void MergeFrom(const SetMaterialInt32Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMaterialInt32Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.SetMaterialInt32Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // int64 GameObjectId = 1;
  void clear_gameobjectid();
  static const int kGameObjectIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid() const;
  void set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 Value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool Shared = 4;
  void clear_shared();
  static const int kSharedFieldNumber = 4;
  bool shared() const;
  void set_shared(bool value);

  // @@protoc_insertion_point(class_scope:AR51.SetMaterialInt32Request)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  bool shared_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class SetMaterialFloatRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.SetMaterialFloatRequest) */ {
 public:
  SetMaterialFloatRequest();
  virtual ~SetMaterialFloatRequest();

  SetMaterialFloatRequest(const SetMaterialFloatRequest& from);
  SetMaterialFloatRequest(SetMaterialFloatRequest&& from) noexcept
    : SetMaterialFloatRequest() {
    *this = ::std::move(from);
  }

  inline SetMaterialFloatRequest& operator=(const SetMaterialFloatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMaterialFloatRequest& operator=(SetMaterialFloatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetMaterialFloatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMaterialFloatRequest* internal_default_instance() {
    return reinterpret_cast<const SetMaterialFloatRequest*>(
               &_SetMaterialFloatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(SetMaterialFloatRequest* other);
  friend void swap(SetMaterialFloatRequest& a, SetMaterialFloatRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetMaterialFloatRequest* New() const final {
    return CreateMaybeMessage<SetMaterialFloatRequest>(nullptr);
  }

  SetMaterialFloatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMaterialFloatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetMaterialFloatRequest& from);
  void MergeFrom(const SetMaterialFloatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMaterialFloatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.SetMaterialFloatRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // int64 GameObjectId = 1;
  void clear_gameobjectid();
  static const int kGameObjectIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid() const;
  void set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // float Value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  float value() const;
  void set_value(float value);

  // bool Shared = 4;
  void clear_shared();
  static const int kSharedFieldNumber = 4;
  bool shared() const;
  void set_shared(bool value);

  // @@protoc_insertion_point(class_scope:AR51.SetMaterialFloatRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid_;
  float value_;
  bool shared_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class SetMaterialColorRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.SetMaterialColorRequest) */ {
 public:
  SetMaterialColorRequest();
  virtual ~SetMaterialColorRequest();

  SetMaterialColorRequest(const SetMaterialColorRequest& from);
  SetMaterialColorRequest(SetMaterialColorRequest&& from) noexcept
    : SetMaterialColorRequest() {
    *this = ::std::move(from);
  }

  inline SetMaterialColorRequest& operator=(const SetMaterialColorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMaterialColorRequest& operator=(SetMaterialColorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetMaterialColorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMaterialColorRequest* internal_default_instance() {
    return reinterpret_cast<const SetMaterialColorRequest*>(
               &_SetMaterialColorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(SetMaterialColorRequest* other);
  friend void swap(SetMaterialColorRequest& a, SetMaterialColorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetMaterialColorRequest* New() const final {
    return CreateMaybeMessage<SetMaterialColorRequest>(nullptr);
  }

  SetMaterialColorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMaterialColorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetMaterialColorRequest& from);
  void MergeFrom(const SetMaterialColorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMaterialColorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.SetMaterialColorRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .AR51.Color color = 2;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 2;
  const ::AR51::Color& color() const;
  ::AR51::Color* release_color();
  ::AR51::Color* mutable_color();
  void set_allocated_color(::AR51::Color* color);

  // int64 GameObjectId = 1;
  void clear_gameobjectid();
  static const int kGameObjectIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid() const;
  void set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool Shared = 4;
  void clear_shared();
  static const int kSharedFieldNumber = 4;
  bool shared() const;
  void set_shared(bool value);

  // @@protoc_insertion_point(class_scope:AR51.SetMaterialColorRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::AR51::Color* color_;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid_;
  bool shared_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class GetMaterialColorRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.GetMaterialColorRequest) */ {
 public:
  GetMaterialColorRequest();
  virtual ~GetMaterialColorRequest();

  GetMaterialColorRequest(const GetMaterialColorRequest& from);
  GetMaterialColorRequest(GetMaterialColorRequest&& from) noexcept
    : GetMaterialColorRequest() {
    *this = ::std::move(from);
  }

  inline GetMaterialColorRequest& operator=(const GetMaterialColorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMaterialColorRequest& operator=(GetMaterialColorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMaterialColorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMaterialColorRequest* internal_default_instance() {
    return reinterpret_cast<const GetMaterialColorRequest*>(
               &_GetMaterialColorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(GetMaterialColorRequest* other);
  friend void swap(GetMaterialColorRequest& a, GetMaterialColorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMaterialColorRequest* New() const final {
    return CreateMaybeMessage<GetMaterialColorRequest>(nullptr);
  }

  GetMaterialColorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMaterialColorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMaterialColorRequest& from);
  void MergeFrom(const GetMaterialColorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMaterialColorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.GetMaterialColorRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // int64 GameObjectId = 1;
  void clear_gameobjectid();
  static const int kGameObjectIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid() const;
  void set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool Shared = 3;
  void clear_shared();
  static const int kSharedFieldNumber = 3;
  bool shared() const;
  void set_shared(bool value);

  // @@protoc_insertion_point(class_scope:AR51.GetMaterialColorRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid_;
  bool shared_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class SetRendererEnabledRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.SetRendererEnabledRequest) */ {
 public:
  SetRendererEnabledRequest();
  virtual ~SetRendererEnabledRequest();

  SetRendererEnabledRequest(const SetRendererEnabledRequest& from);
  SetRendererEnabledRequest(SetRendererEnabledRequest&& from) noexcept
    : SetRendererEnabledRequest() {
    *this = ::std::move(from);
  }

  inline SetRendererEnabledRequest& operator=(const SetRendererEnabledRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRendererEnabledRequest& operator=(SetRendererEnabledRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetRendererEnabledRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRendererEnabledRequest* internal_default_instance() {
    return reinterpret_cast<const SetRendererEnabledRequest*>(
               &_SetRendererEnabledRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(SetRendererEnabledRequest* other);
  friend void swap(SetRendererEnabledRequest& a, SetRendererEnabledRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetRendererEnabledRequest* New() const final {
    return CreateMaybeMessage<SetRendererEnabledRequest>(nullptr);
  }

  SetRendererEnabledRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRendererEnabledRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRendererEnabledRequest& from);
  void MergeFrom(const SetRendererEnabledRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRendererEnabledRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.SetRendererEnabledRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 GameObjectId = 1;
  void clear_gameobjectid();
  static const int kGameObjectIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid() const;
  void set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool Enabled = 2;
  void clear_enabled();
  static const int kEnabledFieldNumber = 2;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:AR51.SetRendererEnabledRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 gameobjectid_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class GetGuardianIdsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.GetGuardianIdsResponse) */ {
 public:
  GetGuardianIdsResponse();
  virtual ~GetGuardianIdsResponse();

  GetGuardianIdsResponse(const GetGuardianIdsResponse& from);
  GetGuardianIdsResponse(GetGuardianIdsResponse&& from) noexcept
    : GetGuardianIdsResponse() {
    *this = ::std::move(from);
  }

  inline GetGuardianIdsResponse& operator=(const GetGuardianIdsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuardianIdsResponse& operator=(GetGuardianIdsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuardianIdsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuardianIdsResponse* internal_default_instance() {
    return reinterpret_cast<const GetGuardianIdsResponse*>(
               &_GetGuardianIdsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(GetGuardianIdsResponse* other);
  friend void swap(GetGuardianIdsResponse& a, GetGuardianIdsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGuardianIdsResponse* New() const final {
    return CreateMaybeMessage<GetGuardianIdsResponse>(nullptr);
  }

  GetGuardianIdsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuardianIdsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuardianIdsResponse& from);
  void MergeFrom(const GetGuardianIdsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuardianIdsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.GetGuardianIdsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string GuardianIds = 1;
  int guardianids_size() const;
  void clear_guardianids();
  static const int kGuardianIdsFieldNumber = 1;
  const std::string& guardianids(int index) const;
  std::string* mutable_guardianids(int index);
  void set_guardianids(int index, const std::string& value);
  void set_guardianids(int index, std::string&& value);
  void set_guardianids(int index, const char* value);
  void set_guardianids(int index, const char* value, size_t size);
  std::string* add_guardianids();
  void add_guardianids(const std::string& value);
  void add_guardianids(std::string&& value);
  void add_guardianids(const char* value);
  void add_guardianids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& guardianids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_guardianids();

  // @@protoc_insertion_point(class_scope:AR51.GetGuardianIdsResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> guardianids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class GuardianRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.GuardianRequest) */ {
 public:
  GuardianRequest();
  virtual ~GuardianRequest();

  GuardianRequest(const GuardianRequest& from);
  GuardianRequest(GuardianRequest&& from) noexcept
    : GuardianRequest() {
    *this = ::std::move(from);
  }

  inline GuardianRequest& operator=(const GuardianRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuardianRequest& operator=(GuardianRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GuardianRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuardianRequest* internal_default_instance() {
    return reinterpret_cast<const GuardianRequest*>(
               &_GuardianRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(GuardianRequest* other);
  friend void swap(GuardianRequest& a, GuardianRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GuardianRequest* New() const final {
    return CreateMaybeMessage<GuardianRequest>(nullptr);
  }

  GuardianRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuardianRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuardianRequest& from);
  void MergeFrom(const GuardianRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuardianRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.GuardianRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string GuardianId = 1;
  void clear_guardianid();
  static const int kGuardianIdFieldNumber = 1;
  const std::string& guardianid() const;
  void set_guardianid(const std::string& value);
  void set_guardianid(std::string&& value);
  void set_guardianid(const char* value);
  void set_guardianid(const char* value, size_t size);
  std::string* mutable_guardianid();
  std::string* release_guardianid();
  void set_allocated_guardianid(std::string* guardianid);

  // @@protoc_insertion_point(class_scope:AR51.GuardianRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guardianid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class GetGuardianResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.GetGuardianResponse) */ {
 public:
  GetGuardianResponse();
  virtual ~GetGuardianResponse();

  GetGuardianResponse(const GetGuardianResponse& from);
  GetGuardianResponse(GetGuardianResponse&& from) noexcept
    : GetGuardianResponse() {
    *this = ::std::move(from);
  }

  inline GetGuardianResponse& operator=(const GetGuardianResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuardianResponse& operator=(GetGuardianResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuardianResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuardianResponse* internal_default_instance() {
    return reinterpret_cast<const GetGuardianResponse*>(
               &_GetGuardianResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(GetGuardianResponse* other);
  friend void swap(GetGuardianResponse& a, GetGuardianResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGuardianResponse* New() const final {
    return CreateMaybeMessage<GetGuardianResponse>(nullptr);
  }

  GetGuardianResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuardianResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuardianResponse& from);
  void MergeFrom(const GetGuardianResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuardianResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.GetGuardianResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string GuardianId = 1;
  void clear_guardianid();
  static const int kGuardianIdFieldNumber = 1;
  const std::string& guardianid() const;
  void set_guardianid(const std::string& value);
  void set_guardianid(std::string&& value);
  void set_guardianid(const char* value);
  void set_guardianid(const char* value, size_t size);
  std::string* mutable_guardianid();
  std::string* release_guardianid();
  void set_allocated_guardianid(std::string* guardianid);

  // bytes Points = 2;
  void clear_points();
  static const int kPointsFieldNumber = 2;
  const std::string& points() const;
  void set_points(const std::string& value);
  void set_points(std::string&& value);
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  std::string* mutable_points();
  std::string* release_points();
  void set_allocated_points(std::string* points);

  // @@protoc_insertion_point(class_scope:AR51.GetGuardianResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guardianid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class CreateGuardianRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.CreateGuardianRequest) */ {
 public:
  CreateGuardianRequest();
  virtual ~CreateGuardianRequest();

  CreateGuardianRequest(const CreateGuardianRequest& from);
  CreateGuardianRequest(CreateGuardianRequest&& from) noexcept
    : CreateGuardianRequest() {
    *this = ::std::move(from);
  }

  inline CreateGuardianRequest& operator=(const CreateGuardianRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGuardianRequest& operator=(CreateGuardianRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateGuardianRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGuardianRequest* internal_default_instance() {
    return reinterpret_cast<const CreateGuardianRequest*>(
               &_CreateGuardianRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(CreateGuardianRequest* other);
  friend void swap(CreateGuardianRequest& a, CreateGuardianRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateGuardianRequest* New() const final {
    return CreateMaybeMessage<CreateGuardianRequest>(nullptr);
  }

  CreateGuardianRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateGuardianRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateGuardianRequest& from);
  void MergeFrom(const CreateGuardianRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGuardianRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.CreateGuardianRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string GuardianId = 1;
  void clear_guardianid();
  static const int kGuardianIdFieldNumber = 1;
  const std::string& guardianid() const;
  void set_guardianid(const std::string& value);
  void set_guardianid(std::string&& value);
  void set_guardianid(const char* value);
  void set_guardianid(const char* value, size_t size);
  std::string* mutable_guardianid();
  std::string* release_guardianid();
  void set_allocated_guardianid(std::string* guardianid);

  // bytes Points = 2;
  void clear_points();
  static const int kPointsFieldNumber = 2;
  const std::string& points() const;
  void set_points(const std::string& value);
  void set_points(std::string&& value);
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  std::string* mutable_points();
  std::string* release_points();
  void set_allocated_points(std::string* points);

  // float Height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  float height() const;
  void set_height(float value);

  // @@protoc_insertion_point(class_scope:AR51.CreateGuardianRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guardianid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_;
  float height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class CreateAnchorRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.CreateAnchorRequest) */ {
 public:
  CreateAnchorRequest();
  virtual ~CreateAnchorRequest();

  CreateAnchorRequest(const CreateAnchorRequest& from);
  CreateAnchorRequest(CreateAnchorRequest&& from) noexcept
    : CreateAnchorRequest() {
    *this = ::std::move(from);
  }

  inline CreateAnchorRequest& operator=(const CreateAnchorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAnchorRequest& operator=(CreateAnchorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAnchorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAnchorRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAnchorRequest*>(
               &_CreateAnchorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(CreateAnchorRequest* other);
  friend void swap(CreateAnchorRequest& a, CreateAnchorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateAnchorRequest* New() const final {
    return CreateMaybeMessage<CreateAnchorRequest>(nullptr);
  }

  CreateAnchorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAnchorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAnchorRequest& from);
  void MergeFrom(const CreateAnchorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAnchorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.CreateAnchorRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string AnchorId = 1;
  void clear_anchorid();
  static const int kAnchorIdFieldNumber = 1;
  const std::string& anchorid() const;
  void set_anchorid(const std::string& value);
  void set_anchorid(std::string&& value);
  void set_anchorid(const char* value);
  void set_anchorid(const char* value, size_t size);
  std::string* mutable_anchorid();
  std::string* release_anchorid();
  void set_allocated_anchorid(std::string* anchorid);

  // string ParentId = 2;
  void clear_parentid();
  static const int kParentIdFieldNumber = 2;
  const std::string& parentid() const;
  void set_parentid(const std::string& value);
  void set_parentid(std::string&& value);
  void set_parentid(const char* value);
  void set_parentid(const char* value, size_t size);
  std::string* mutable_parentid();
  std::string* release_parentid();
  void set_allocated_parentid(std::string* parentid);

  // .AR51.Vector3 Position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  const ::AR51::Vector3& position() const;
  ::AR51::Vector3* release_position();
  ::AR51::Vector3* mutable_position();
  void set_allocated_position(::AR51::Vector3* position);

  // .AR51.Quaternion Rotation = 4;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 4;
  const ::AR51::Quaternion& rotation() const;
  ::AR51::Quaternion* release_rotation();
  ::AR51::Quaternion* mutable_rotation();
  void set_allocated_rotation(::AR51::Quaternion* rotation);

  // bool Visible = 5;
  void clear_visible();
  static const int kVisibleFieldNumber = 5;
  bool visible() const;
  void set_visible(bool value);

  // @@protoc_insertion_point(class_scope:AR51.CreateAnchorRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anchorid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentid_;
  ::AR51::Vector3* position_;
  ::AR51::Quaternion* rotation_;
  bool visible_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class SetAnchorVisiliblityRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.SetAnchorVisiliblityRequest) */ {
 public:
  SetAnchorVisiliblityRequest();
  virtual ~SetAnchorVisiliblityRequest();

  SetAnchorVisiliblityRequest(const SetAnchorVisiliblityRequest& from);
  SetAnchorVisiliblityRequest(SetAnchorVisiliblityRequest&& from) noexcept
    : SetAnchorVisiliblityRequest() {
    *this = ::std::move(from);
  }

  inline SetAnchorVisiliblityRequest& operator=(const SetAnchorVisiliblityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAnchorVisiliblityRequest& operator=(SetAnchorVisiliblityRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAnchorVisiliblityRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAnchorVisiliblityRequest* internal_default_instance() {
    return reinterpret_cast<const SetAnchorVisiliblityRequest*>(
               &_SetAnchorVisiliblityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(SetAnchorVisiliblityRequest* other);
  friend void swap(SetAnchorVisiliblityRequest& a, SetAnchorVisiliblityRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetAnchorVisiliblityRequest* New() const final {
    return CreateMaybeMessage<SetAnchorVisiliblityRequest>(nullptr);
  }

  SetAnchorVisiliblityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAnchorVisiliblityRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAnchorVisiliblityRequest& from);
  void MergeFrom(const SetAnchorVisiliblityRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAnchorVisiliblityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.SetAnchorVisiliblityRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string AnchorId = 1;
  void clear_anchorid();
  static const int kAnchorIdFieldNumber = 1;
  const std::string& anchorid() const;
  void set_anchorid(const std::string& value);
  void set_anchorid(std::string&& value);
  void set_anchorid(const char* value);
  void set_anchorid(const char* value, size_t size);
  std::string* mutable_anchorid();
  std::string* release_anchorid();
  void set_allocated_anchorid(std::string* anchorid);

  // bool Visible = 2;
  void clear_visible();
  static const int kVisibleFieldNumber = 2;
  bool visible() const;
  void set_visible(bool value);

  // @@protoc_insertion_point(class_scope:AR51.SetAnchorVisiliblityRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anchorid_;
  bool visible_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class AnchorIdsReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.AnchorIdsReply) */ {
 public:
  AnchorIdsReply();
  virtual ~AnchorIdsReply();

  AnchorIdsReply(const AnchorIdsReply& from);
  AnchorIdsReply(AnchorIdsReply&& from) noexcept
    : AnchorIdsReply() {
    *this = ::std::move(from);
  }

  inline AnchorIdsReply& operator=(const AnchorIdsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnchorIdsReply& operator=(AnchorIdsReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnchorIdsReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnchorIdsReply* internal_default_instance() {
    return reinterpret_cast<const AnchorIdsReply*>(
               &_AnchorIdsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(AnchorIdsReply* other);
  friend void swap(AnchorIdsReply& a, AnchorIdsReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnchorIdsReply* New() const final {
    return CreateMaybeMessage<AnchorIdsReply>(nullptr);
  }

  AnchorIdsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnchorIdsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnchorIdsReply& from);
  void MergeFrom(const AnchorIdsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnchorIdsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.AnchorIdsReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string AnchorIds = 1;
  int anchorids_size() const;
  void clear_anchorids();
  static const int kAnchorIdsFieldNumber = 1;
  const std::string& anchorids(int index) const;
  std::string* mutable_anchorids(int index);
  void set_anchorids(int index, const std::string& value);
  void set_anchorids(int index, std::string&& value);
  void set_anchorids(int index, const char* value);
  void set_anchorids(int index, const char* value, size_t size);
  std::string* add_anchorids();
  void add_anchorids(const std::string& value);
  void add_anchorids(std::string&& value);
  void add_anchorids(const char* value);
  void add_anchorids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& anchorids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_anchorids();

  // repeated string VisibleAnchorIds = 2;
  int visibleanchorids_size() const;
  void clear_visibleanchorids();
  static const int kVisibleAnchorIdsFieldNumber = 2;
  const std::string& visibleanchorids(int index) const;
  std::string* mutable_visibleanchorids(int index);
  void set_visibleanchorids(int index, const std::string& value);
  void set_visibleanchorids(int index, std::string&& value);
  void set_visibleanchorids(int index, const char* value);
  void set_visibleanchorids(int index, const char* value, size_t size);
  std::string* add_visibleanchorids();
  void add_visibleanchorids(const std::string& value);
  void add_visibleanchorids(std::string&& value);
  void add_visibleanchorids(const char* value);
  void add_visibleanchorids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& visibleanchorids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_visibleanchorids();

  // @@protoc_insertion_point(class_scope:AR51.AnchorIdsReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> anchorids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> visibleanchorids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class FieldInfos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.FieldInfos) */ {
 public:
  FieldInfos();
  virtual ~FieldInfos();

  FieldInfos(const FieldInfos& from);
  FieldInfos(FieldInfos&& from) noexcept
    : FieldInfos() {
    *this = ::std::move(from);
  }

  inline FieldInfos& operator=(const FieldInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldInfos& operator=(FieldInfos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldInfos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldInfos* internal_default_instance() {
    return reinterpret_cast<const FieldInfos*>(
               &_FieldInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(FieldInfos* other);
  friend void swap(FieldInfos& a, FieldInfos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FieldInfos* New() const final {
    return CreateMaybeMessage<FieldInfos>(nullptr);
  }

  FieldInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldInfos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldInfos& from);
  void MergeFrom(const FieldInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.FieldInfos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AR51.FieldInfo Fields = 1;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 1;
  ::AR51::FieldInfo* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::FieldInfo >*
      mutable_fields();
  const ::AR51::FieldInfo& fields(int index) const;
  ::AR51::FieldInfo* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::FieldInfo >&
      fields() const;

  // @@protoc_insertion_point(class_scope:AR51.FieldInfos)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::FieldInfo > fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class FieldInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.FieldInfo) */ {
 public:
  FieldInfo();
  virtual ~FieldInfo();

  FieldInfo(const FieldInfo& from);
  FieldInfo(FieldInfo&& from) noexcept
    : FieldInfo() {
    *this = ::std::move(from);
  }

  inline FieldInfo& operator=(const FieldInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldInfo& operator=(FieldInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldInfo* internal_default_instance() {
    return reinterpret_cast<const FieldInfo*>(
               &_FieldInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(FieldInfo* other);
  friend void swap(FieldInfo& a, FieldInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FieldInfo* New() const final {
    return CreateMaybeMessage<FieldInfo>(nullptr);
  }

  FieldInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldInfo& from);
  void MergeFrom(const FieldInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.FieldInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string Value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // string Category = 4;
  void clear_category();
  static const int kCategoryFieldNumber = 4;
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);

  // .AR51.FieldTypeEnum Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::AR51::FieldTypeEnum type() const;
  void set_type(::AR51::FieldTypeEnum value);

  // @@protoc_insertion_point(class_scope:AR51.FieldInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class HandInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.HandInfoResponse) */ {
 public:
  HandInfoResponse();
  virtual ~HandInfoResponse();

  HandInfoResponse(const HandInfoResponse& from);
  HandInfoResponse(HandInfoResponse&& from) noexcept
    : HandInfoResponse() {
    *this = ::std::move(from);
  }

  inline HandInfoResponse& operator=(const HandInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandInfoResponse& operator=(HandInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HandInfoResponse* internal_default_instance() {
    return reinterpret_cast<const HandInfoResponse*>(
               &_HandInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(HandInfoResponse* other);
  friend void swap(HandInfoResponse& a, HandInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HandInfoResponse* New() const final {
    return CreateMaybeMessage<HandInfoResponse>(nullptr);
  }

  HandInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandInfoResponse& from);
  void MergeFrom(const HandInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.HandInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Positions = 3;
  void clear_positions();
  static const int kPositionsFieldNumber = 3;
  const std::string& positions() const;
  void set_positions(const std::string& value);
  void set_positions(std::string&& value);
  void set_positions(const char* value);
  void set_positions(const void* value, size_t size);
  std::string* mutable_positions();
  std::string* release_positions();
  void set_allocated_positions(std::string* positions);

  // bytes Rotations = 4;
  void clear_rotations();
  static const int kRotationsFieldNumber = 4;
  const std::string& rotations() const;
  void set_rotations(const std::string& value);
  void set_rotations(std::string&& value);
  void set_rotations(const char* value);
  void set_rotations(const void* value, size_t size);
  std::string* mutable_rotations();
  std::string* release_rotations();
  void set_allocated_rotations(std::string* rotations);

  // bytes Confidence = 5;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 5;
  const std::string& confidence() const;
  void set_confidence(const std::string& value);
  void set_confidence(std::string&& value);
  void set_confidence(const char* value);
  void set_confidence(const void* value, size_t size);
  std::string* mutable_confidence();
  std::string* release_confidence();
  void set_allocated_confidence(std::string* confidence);

  // .AR51.HandednessTypes Handedness = 1;
  void clear_handedness();
  static const int kHandednessFieldNumber = 1;
  ::AR51::HandednessTypes handedness() const;
  void set_handedness(::AR51::HandednessTypes value);

  // bool IsTracked = 2;
  void clear_istracked();
  static const int kIsTrackedFieldNumber = 2;
  bool istracked() const;
  void set_istracked(bool value);

  // @@protoc_insertion_point(class_scope:AR51.HandInfoResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr positions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_;
  int handedness_;
  bool istracked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// -------------------------------------------------------------------

class TwoHandsInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.TwoHandsInfoResponse) */ {
 public:
  TwoHandsInfoResponse();
  virtual ~TwoHandsInfoResponse();

  TwoHandsInfoResponse(const TwoHandsInfoResponse& from);
  TwoHandsInfoResponse(TwoHandsInfoResponse&& from) noexcept
    : TwoHandsInfoResponse() {
    *this = ::std::move(from);
  }

  inline TwoHandsInfoResponse& operator=(const TwoHandsInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwoHandsInfoResponse& operator=(TwoHandsInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TwoHandsInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TwoHandsInfoResponse* internal_default_instance() {
    return reinterpret_cast<const TwoHandsInfoResponse*>(
               &_TwoHandsInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(TwoHandsInfoResponse* other);
  friend void swap(TwoHandsInfoResponse& a, TwoHandsInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TwoHandsInfoResponse* New() const final {
    return CreateMaybeMessage<TwoHandsInfoResponse>(nullptr);
  }

  TwoHandsInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TwoHandsInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TwoHandsInfoResponse& from);
  void MergeFrom(const TwoHandsInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwoHandsInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.TwoHandsInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dgs_2eproto);
    return ::descriptor_table_dgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AR51.HandInfoResponse LeftHandInfo = 1;
  bool has_lefthandinfo() const;
  void clear_lefthandinfo();
  static const int kLeftHandInfoFieldNumber = 1;
  const ::AR51::HandInfoResponse& lefthandinfo() const;
  ::AR51::HandInfoResponse* release_lefthandinfo();
  ::AR51::HandInfoResponse* mutable_lefthandinfo();
  void set_allocated_lefthandinfo(::AR51::HandInfoResponse* lefthandinfo);

  // .AR51.HandInfoResponse RightHandInfo = 2;
  bool has_righthandinfo() const;
  void clear_righthandinfo();
  static const int kRightHandInfoFieldNumber = 2;
  const ::AR51::HandInfoResponse& righthandinfo() const;
  ::AR51::HandInfoResponse* release_righthandinfo();
  ::AR51::HandInfoResponse* mutable_righthandinfo();
  void set_allocated_righthandinfo(::AR51::HandInfoResponse* righthandinfo);

  // @@protoc_insertion_point(class_scope:AR51.TwoHandsInfoResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::AR51::HandInfoResponse* lefthandinfo_;
  ::AR51::HandInfoResponse* righthandinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameStateReply

// .AR51.GameState State = 1;
inline void GameStateReply::clear_state() {
  state_ = 0;
}
inline ::AR51::GameState GameStateReply::state() const {
  // @@protoc_insertion_point(field_get:AR51.GameStateReply.State)
  return static_cast< ::AR51::GameState >(state_);
}
inline void GameStateReply::set_state(::AR51::GameState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:AR51.GameStateReply.State)
}

// string Message = 2;
inline void GameStateReply::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameStateReply::message() const {
  // @@protoc_insertion_point(field_get:AR51.GameStateReply.Message)
  return message_.GetNoArena();
}
inline void GameStateReply::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.GameStateReply.Message)
}
inline void GameStateReply::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.GameStateReply.Message)
}
inline void GameStateReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.GameStateReply.Message)
}
inline void GameStateReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.GameStateReply.Message)
}
inline std::string* GameStateReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:AR51.GameStateReply.Message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameStateReply::release_message() {
  // @@protoc_insertion_point(field_release:AR51.GameStateReply.Message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameStateReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:AR51.GameStateReply.Message)
}

// -------------------------------------------------------------------

// SetupReply

// repeated .AR51.PlaceableDto Placeables = 1;
inline int SetupReply::placeables_size() const {
  return placeables_.size();
}
inline void SetupReply::clear_placeables() {
  placeables_.Clear();
}
inline ::AR51::PlaceableDto* SetupReply::mutable_placeables(int index) {
  // @@protoc_insertion_point(field_mutable:AR51.SetupReply.Placeables)
  return placeables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::PlaceableDto >*
SetupReply::mutable_placeables() {
  // @@protoc_insertion_point(field_mutable_list:AR51.SetupReply.Placeables)
  return &placeables_;
}
inline const ::AR51::PlaceableDto& SetupReply::placeables(int index) const {
  // @@protoc_insertion_point(field_get:AR51.SetupReply.Placeables)
  return placeables_.Get(index);
}
inline ::AR51::PlaceableDto* SetupReply::add_placeables() {
  // @@protoc_insertion_point(field_add:AR51.SetupReply.Placeables)
  return placeables_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::PlaceableDto >&
SetupReply::placeables() const {
  // @@protoc_insertion_point(field_list:AR51.SetupReply.Placeables)
  return placeables_;
}

// -------------------------------------------------------------------

// PlaceableDto

// string Name = 1;
inline void PlaceableDto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlaceableDto::name() const {
  // @@protoc_insertion_point(field_get:AR51.PlaceableDto.Name)
  return name_.GetNoArena();
}
inline void PlaceableDto::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.PlaceableDto.Name)
}
inline void PlaceableDto::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.PlaceableDto.Name)
}
inline void PlaceableDto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.PlaceableDto.Name)
}
inline void PlaceableDto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.PlaceableDto.Name)
}
inline std::string* PlaceableDto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AR51.PlaceableDto.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlaceableDto::release_name() {
  // @@protoc_insertion_point(field_release:AR51.PlaceableDto.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceableDto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AR51.PlaceableDto.Name)
}

// string Icon = 2;
inline void PlaceableDto::clear_icon() {
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlaceableDto::icon() const {
  // @@protoc_insertion_point(field_get:AR51.PlaceableDto.Icon)
  return icon_.GetNoArena();
}
inline void PlaceableDto::set_icon(const std::string& value) {
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.PlaceableDto.Icon)
}
inline void PlaceableDto::set_icon(std::string&& value) {
  
  icon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.PlaceableDto.Icon)
}
inline void PlaceableDto::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.PlaceableDto.Icon)
}
inline void PlaceableDto::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.PlaceableDto.Icon)
}
inline std::string* PlaceableDto::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:AR51.PlaceableDto.Icon)
  return icon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlaceableDto::release_icon() {
  // @@protoc_insertion_point(field_release:AR51.PlaceableDto.Icon)
  
  return icon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceableDto::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:AR51.PlaceableDto.Icon)
}

// -------------------------------------------------------------------

// SetPlaceableRequest

// string Name = 1;
inline void SetPlaceableRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetPlaceableRequest::name() const {
  // @@protoc_insertion_point(field_get:AR51.SetPlaceableRequest.Name)
  return name_.GetNoArena();
}
inline void SetPlaceableRequest::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.SetPlaceableRequest.Name)
}
inline void SetPlaceableRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.SetPlaceableRequest.Name)
}
inline void SetPlaceableRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.SetPlaceableRequest.Name)
}
inline void SetPlaceableRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.SetPlaceableRequest.Name)
}
inline std::string* SetPlaceableRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AR51.SetPlaceableRequest.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetPlaceableRequest::release_name() {
  // @@protoc_insertion_point(field_release:AR51.SetPlaceableRequest.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetPlaceableRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AR51.SetPlaceableRequest.Name)
}

// -------------------------------------------------------------------

// SetPlaceableReply

// .AR51.SetPlaceableEvent Event = 1;
inline void SetPlaceableReply::clear_event() {
  event_ = 0;
}
inline ::AR51::SetPlaceableEvent SetPlaceableReply::event() const {
  // @@protoc_insertion_point(field_get:AR51.SetPlaceableReply.Event)
  return static_cast< ::AR51::SetPlaceableEvent >(event_);
}
inline void SetPlaceableReply::set_event(::AR51::SetPlaceableEvent value) {
  
  event_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetPlaceableReply.Event)
}

// string AnchorId = 2;
inline void SetPlaceableReply::clear_anchorid() {
  anchorid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetPlaceableReply::anchorid() const {
  // @@protoc_insertion_point(field_get:AR51.SetPlaceableReply.AnchorId)
  return anchorid_.GetNoArena();
}
inline void SetPlaceableReply::set_anchorid(const std::string& value) {
  
  anchorid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.SetPlaceableReply.AnchorId)
}
inline void SetPlaceableReply::set_anchorid(std::string&& value) {
  
  anchorid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.SetPlaceableReply.AnchorId)
}
inline void SetPlaceableReply::set_anchorid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  anchorid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.SetPlaceableReply.AnchorId)
}
inline void SetPlaceableReply::set_anchorid(const char* value, size_t size) {
  
  anchorid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.SetPlaceableReply.AnchorId)
}
inline std::string* SetPlaceableReply::mutable_anchorid() {
  
  // @@protoc_insertion_point(field_mutable:AR51.SetPlaceableReply.AnchorId)
  return anchorid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetPlaceableReply::release_anchorid() {
  // @@protoc_insertion_point(field_release:AR51.SetPlaceableReply.AnchorId)
  
  return anchorid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetPlaceableReply::set_allocated_anchorid(std::string* anchorid) {
  if (anchorid != nullptr) {
    
  } else {
    
  }
  anchorid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), anchorid);
  // @@protoc_insertion_point(field_set_allocated:AR51.SetPlaceableReply.AnchorId)
}

// string ErrorMessage = 3;
inline void SetPlaceableReply::clear_errormessage() {
  errormessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetPlaceableReply::errormessage() const {
  // @@protoc_insertion_point(field_get:AR51.SetPlaceableReply.ErrorMessage)
  return errormessage_.GetNoArena();
}
inline void SetPlaceableReply::set_errormessage(const std::string& value) {
  
  errormessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.SetPlaceableReply.ErrorMessage)
}
inline void SetPlaceableReply::set_errormessage(std::string&& value) {
  
  errormessage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.SetPlaceableReply.ErrorMessage)
}
inline void SetPlaceableReply::set_errormessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errormessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.SetPlaceableReply.ErrorMessage)
}
inline void SetPlaceableReply::set_errormessage(const char* value, size_t size) {
  
  errormessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.SetPlaceableReply.ErrorMessage)
}
inline std::string* SetPlaceableReply::mutable_errormessage() {
  
  // @@protoc_insertion_point(field_mutable:AR51.SetPlaceableReply.ErrorMessage)
  return errormessage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetPlaceableReply::release_errormessage() {
  // @@protoc_insertion_point(field_release:AR51.SetPlaceableReply.ErrorMessage)
  
  return errormessage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetPlaceableReply::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  errormessage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormessage);
  // @@protoc_insertion_point(field_set_allocated:AR51.SetPlaceableReply.ErrorMessage)
}

// -------------------------------------------------------------------

// GetRecorderFieldRequest

// string FieldName = 1;
inline void GetRecorderFieldRequest::clear_fieldname() {
  fieldname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetRecorderFieldRequest::fieldname() const {
  // @@protoc_insertion_point(field_get:AR51.GetRecorderFieldRequest.FieldName)
  return fieldname_.GetNoArena();
}
inline void GetRecorderFieldRequest::set_fieldname(const std::string& value) {
  
  fieldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.GetRecorderFieldRequest.FieldName)
}
inline void GetRecorderFieldRequest::set_fieldname(std::string&& value) {
  
  fieldname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.GetRecorderFieldRequest.FieldName)
}
inline void GetRecorderFieldRequest::set_fieldname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fieldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.GetRecorderFieldRequest.FieldName)
}
inline void GetRecorderFieldRequest::set_fieldname(const char* value, size_t size) {
  
  fieldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.GetRecorderFieldRequest.FieldName)
}
inline std::string* GetRecorderFieldRequest::mutable_fieldname() {
  
  // @@protoc_insertion_point(field_mutable:AR51.GetRecorderFieldRequest.FieldName)
  return fieldname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetRecorderFieldRequest::release_fieldname() {
  // @@protoc_insertion_point(field_release:AR51.GetRecorderFieldRequest.FieldName)
  
  return fieldname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetRecorderFieldRequest::set_allocated_fieldname(std::string* fieldname) {
  if (fieldname != nullptr) {
    
  } else {
    
  }
  fieldname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fieldname);
  // @@protoc_insertion_point(field_set_allocated:AR51.GetRecorderFieldRequest.FieldName)
}

// -------------------------------------------------------------------

// SetRecorderFieldRequest

// string FieldName = 1;
inline void SetRecorderFieldRequest::clear_fieldname() {
  fieldname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetRecorderFieldRequest::fieldname() const {
  // @@protoc_insertion_point(field_get:AR51.SetRecorderFieldRequest.FieldName)
  return fieldname_.GetNoArena();
}
inline void SetRecorderFieldRequest::set_fieldname(const std::string& value) {
  
  fieldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.SetRecorderFieldRequest.FieldName)
}
inline void SetRecorderFieldRequest::set_fieldname(std::string&& value) {
  
  fieldname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.SetRecorderFieldRequest.FieldName)
}
inline void SetRecorderFieldRequest::set_fieldname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fieldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.SetRecorderFieldRequest.FieldName)
}
inline void SetRecorderFieldRequest::set_fieldname(const char* value, size_t size) {
  
  fieldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.SetRecorderFieldRequest.FieldName)
}
inline std::string* SetRecorderFieldRequest::mutable_fieldname() {
  
  // @@protoc_insertion_point(field_mutable:AR51.SetRecorderFieldRequest.FieldName)
  return fieldname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetRecorderFieldRequest::release_fieldname() {
  // @@protoc_insertion_point(field_release:AR51.SetRecorderFieldRequest.FieldName)
  
  return fieldname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetRecorderFieldRequest::set_allocated_fieldname(std::string* fieldname) {
  if (fieldname != nullptr) {
    
  } else {
    
  }
  fieldname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fieldname);
  // @@protoc_insertion_point(field_set_allocated:AR51.SetRecorderFieldRequest.FieldName)
}

// bytes Value = 2;
inline void SetRecorderFieldRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetRecorderFieldRequest::value() const {
  // @@protoc_insertion_point(field_get:AR51.SetRecorderFieldRequest.Value)
  return value_.GetNoArena();
}
inline void SetRecorderFieldRequest::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.SetRecorderFieldRequest.Value)
}
inline void SetRecorderFieldRequest::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.SetRecorderFieldRequest.Value)
}
inline void SetRecorderFieldRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.SetRecorderFieldRequest.Value)
}
inline void SetRecorderFieldRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.SetRecorderFieldRequest.Value)
}
inline std::string* SetRecorderFieldRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:AR51.SetRecorderFieldRequest.Value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetRecorderFieldRequest::release_value() {
  // @@protoc_insertion_point(field_release:AR51.SetRecorderFieldRequest.Value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetRecorderFieldRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:AR51.SetRecorderFieldRequest.Value)
}

// -------------------------------------------------------------------

// GetCameraCharacteristicsRequest

// string FieldName = 1;
inline void GetCameraCharacteristicsRequest::clear_fieldname() {
  fieldname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetCameraCharacteristicsRequest::fieldname() const {
  // @@protoc_insertion_point(field_get:AR51.GetCameraCharacteristicsRequest.FieldName)
  return fieldname_.GetNoArena();
}
inline void GetCameraCharacteristicsRequest::set_fieldname(const std::string& value) {
  
  fieldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.GetCameraCharacteristicsRequest.FieldName)
}
inline void GetCameraCharacteristicsRequest::set_fieldname(std::string&& value) {
  
  fieldname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.GetCameraCharacteristicsRequest.FieldName)
}
inline void GetCameraCharacteristicsRequest::set_fieldname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fieldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.GetCameraCharacteristicsRequest.FieldName)
}
inline void GetCameraCharacteristicsRequest::set_fieldname(const char* value, size_t size) {
  
  fieldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.GetCameraCharacteristicsRequest.FieldName)
}
inline std::string* GetCameraCharacteristicsRequest::mutable_fieldname() {
  
  // @@protoc_insertion_point(field_mutable:AR51.GetCameraCharacteristicsRequest.FieldName)
  return fieldname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetCameraCharacteristicsRequest::release_fieldname() {
  // @@protoc_insertion_point(field_release:AR51.GetCameraCharacteristicsRequest.FieldName)
  
  return fieldname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetCameraCharacteristicsRequest::set_allocated_fieldname(std::string* fieldname) {
  if (fieldname != nullptr) {
    
  } else {
    
  }
  fieldname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fieldname);
  // @@protoc_insertion_point(field_set_allocated:AR51.GetCameraCharacteristicsRequest.FieldName)
}

// -------------------------------------------------------------------

// GetAllVideoFilesResponse

// repeated string FileNames = 1;
inline int GetAllVideoFilesResponse::filenames_size() const {
  return filenames_.size();
}
inline void GetAllVideoFilesResponse::clear_filenames() {
  filenames_.Clear();
}
inline const std::string& GetAllVideoFilesResponse::filenames(int index) const {
  // @@protoc_insertion_point(field_get:AR51.GetAllVideoFilesResponse.FileNames)
  return filenames_.Get(index);
}
inline std::string* GetAllVideoFilesResponse::mutable_filenames(int index) {
  // @@protoc_insertion_point(field_mutable:AR51.GetAllVideoFilesResponse.FileNames)
  return filenames_.Mutable(index);
}
inline void GetAllVideoFilesResponse::set_filenames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AR51.GetAllVideoFilesResponse.FileNames)
  filenames_.Mutable(index)->assign(value);
}
inline void GetAllVideoFilesResponse::set_filenames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AR51.GetAllVideoFilesResponse.FileNames)
  filenames_.Mutable(index)->assign(std::move(value));
}
inline void GetAllVideoFilesResponse::set_filenames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AR51.GetAllVideoFilesResponse.FileNames)
}
inline void GetAllVideoFilesResponse::set_filenames(int index, const char* value, size_t size) {
  filenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AR51.GetAllVideoFilesResponse.FileNames)
}
inline std::string* GetAllVideoFilesResponse::add_filenames() {
  // @@protoc_insertion_point(field_add_mutable:AR51.GetAllVideoFilesResponse.FileNames)
  return filenames_.Add();
}
inline void GetAllVideoFilesResponse::add_filenames(const std::string& value) {
  filenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AR51.GetAllVideoFilesResponse.FileNames)
}
inline void GetAllVideoFilesResponse::add_filenames(std::string&& value) {
  filenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AR51.GetAllVideoFilesResponse.FileNames)
}
inline void GetAllVideoFilesResponse::add_filenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AR51.GetAllVideoFilesResponse.FileNames)
}
inline void GetAllVideoFilesResponse::add_filenames(const char* value, size_t size) {
  filenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AR51.GetAllVideoFilesResponse.FileNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAllVideoFilesResponse::filenames() const {
  // @@protoc_insertion_point(field_list:AR51.GetAllVideoFilesResponse.FileNames)
  return filenames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAllVideoFilesResponse::mutable_filenames() {
  // @@protoc_insertion_point(field_mutable_list:AR51.GetAllVideoFilesResponse.FileNames)
  return &filenames_;
}

// -------------------------------------------------------------------

// StartMediaRecoderRequest

// double StartTime = 1;
inline void StartMediaRecoderRequest::clear_starttime() {
  starttime_ = 0;
}
inline double StartMediaRecoderRequest::starttime() const {
  // @@protoc_insertion_point(field_get:AR51.StartMediaRecoderRequest.StartTime)
  return starttime_;
}
inline void StartMediaRecoderRequest::set_starttime(double value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:AR51.StartMediaRecoderRequest.StartTime)
}

// -------------------------------------------------------------------

// DownloadVideoRequest

// string FileName = 1;
inline void DownloadVideoRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DownloadVideoRequest::filename() const {
  // @@protoc_insertion_point(field_get:AR51.DownloadVideoRequest.FileName)
  return filename_.GetNoArena();
}
inline void DownloadVideoRequest::set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.DownloadVideoRequest.FileName)
}
inline void DownloadVideoRequest::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.DownloadVideoRequest.FileName)
}
inline void DownloadVideoRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.DownloadVideoRequest.FileName)
}
inline void DownloadVideoRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.DownloadVideoRequest.FileName)
}
inline std::string* DownloadVideoRequest::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:AR51.DownloadVideoRequest.FileName)
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DownloadVideoRequest::release_filename() {
  // @@protoc_insertion_point(field_release:AR51.DownloadVideoRequest.FileName)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DownloadVideoRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:AR51.DownloadVideoRequest.FileName)
}

// int32 PacketSize = 2;
inline void DownloadVideoRequest::clear_packetsize() {
  packetsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DownloadVideoRequest::packetsize() const {
  // @@protoc_insertion_point(field_get:AR51.DownloadVideoRequest.PacketSize)
  return packetsize_;
}
inline void DownloadVideoRequest::set_packetsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  packetsize_ = value;
  // @@protoc_insertion_point(field_set:AR51.DownloadVideoRequest.PacketSize)
}

// -------------------------------------------------------------------

// StartRecordingRequest

// string FileName = 1;
inline void StartRecordingRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StartRecordingRequest::filename() const {
  // @@protoc_insertion_point(field_get:AR51.StartRecordingRequest.FileName)
  return filename_.GetNoArena();
}
inline void StartRecordingRequest::set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.StartRecordingRequest.FileName)
}
inline void StartRecordingRequest::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.StartRecordingRequest.FileName)
}
inline void StartRecordingRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.StartRecordingRequest.FileName)
}
inline void StartRecordingRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.StartRecordingRequest.FileName)
}
inline std::string* StartRecordingRequest::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:AR51.StartRecordingRequest.FileName)
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StartRecordingRequest::release_filename() {
  // @@protoc_insertion_point(field_release:AR51.StartRecordingRequest.FileName)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StartRecordingRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:AR51.StartRecordingRequest.FileName)
}

// bool useBestSetting = 2;
inline void StartRecordingRequest::clear_usebestsetting() {
  usebestsetting_ = false;
}
inline bool StartRecordingRequest::usebestsetting() const {
  // @@protoc_insertion_point(field_get:AR51.StartRecordingRequest.useBestSetting)
  return usebestsetting_;
}
inline void StartRecordingRequest::set_usebestsetting(bool value) {
  
  usebestsetting_ = value;
  // @@protoc_insertion_point(field_set:AR51.StartRecordingRequest.useBestSetting)
}

// string CameraId = 3;
inline void StartRecordingRequest::clear_cameraid() {
  cameraid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StartRecordingRequest::cameraid() const {
  // @@protoc_insertion_point(field_get:AR51.StartRecordingRequest.CameraId)
  return cameraid_.GetNoArena();
}
inline void StartRecordingRequest::set_cameraid(const std::string& value) {
  
  cameraid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.StartRecordingRequest.CameraId)
}
inline void StartRecordingRequest::set_cameraid(std::string&& value) {
  
  cameraid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.StartRecordingRequest.CameraId)
}
inline void StartRecordingRequest::set_cameraid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cameraid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.StartRecordingRequest.CameraId)
}
inline void StartRecordingRequest::set_cameraid(const char* value, size_t size) {
  
  cameraid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.StartRecordingRequest.CameraId)
}
inline std::string* StartRecordingRequest::mutable_cameraid() {
  
  // @@protoc_insertion_point(field_mutable:AR51.StartRecordingRequest.CameraId)
  return cameraid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StartRecordingRequest::release_cameraid() {
  // @@protoc_insertion_point(field_release:AR51.StartRecordingRequest.CameraId)
  
  return cameraid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StartRecordingRequest::set_allocated_cameraid(std::string* cameraid) {
  if (cameraid != nullptr) {
    
  } else {
    
  }
  cameraid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cameraid);
  // @@protoc_insertion_point(field_set_allocated:AR51.StartRecordingRequest.CameraId)
}

// int32 width = 4;
inline void StartRecordingRequest::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartRecordingRequest::width() const {
  // @@protoc_insertion_point(field_get:AR51.StartRecordingRequest.width)
  return width_;
}
inline void StartRecordingRequest::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:AR51.StartRecordingRequest.width)
}

// int32 height = 5;
inline void StartRecordingRequest::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartRecordingRequest::height() const {
  // @@protoc_insertion_point(field_get:AR51.StartRecordingRequest.height)
  return height_;
}
inline void StartRecordingRequest::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:AR51.StartRecordingRequest.height)
}

// int32 FrameRate = 6;
inline void StartRecordingRequest::clear_framerate() {
  framerate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartRecordingRequest::framerate() const {
  // @@protoc_insertion_point(field_get:AR51.StartRecordingRequest.FrameRate)
  return framerate_;
}
inline void StartRecordingRequest::set_framerate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  framerate_ = value;
  // @@protoc_insertion_point(field_set:AR51.StartRecordingRequest.FrameRate)
}

// float maxDuration = 7;
inline void StartRecordingRequest::clear_maxduration() {
  maxduration_ = 0;
}
inline float StartRecordingRequest::maxduration() const {
  // @@protoc_insertion_point(field_get:AR51.StartRecordingRequest.maxDuration)
  return maxduration_;
}
inline void StartRecordingRequest::set_maxduration(float value) {
  
  maxduration_ = value;
  // @@protoc_insertion_point(field_set:AR51.StartRecordingRequest.maxDuration)
}

// -------------------------------------------------------------------

// StartRecordingResponse

// string FileName = 1;
inline void StartRecordingResponse::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StartRecordingResponse::filename() const {
  // @@protoc_insertion_point(field_get:AR51.StartRecordingResponse.FileName)
  return filename_.GetNoArena();
}
inline void StartRecordingResponse::set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.StartRecordingResponse.FileName)
}
inline void StartRecordingResponse::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.StartRecordingResponse.FileName)
}
inline void StartRecordingResponse::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.StartRecordingResponse.FileName)
}
inline void StartRecordingResponse::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.StartRecordingResponse.FileName)
}
inline std::string* StartRecordingResponse::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:AR51.StartRecordingResponse.FileName)
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StartRecordingResponse::release_filename() {
  // @@protoc_insertion_point(field_release:AR51.StartRecordingResponse.FileName)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StartRecordingResponse::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:AR51.StartRecordingResponse.FileName)
}

// -------------------------------------------------------------------

// VideoRecordingSettings

// string CameraId = 1;
inline void VideoRecordingSettings::clear_cameraid() {
  cameraid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VideoRecordingSettings::cameraid() const {
  // @@protoc_insertion_point(field_get:AR51.VideoRecordingSettings.CameraId)
  return cameraid_.GetNoArena();
}
inline void VideoRecordingSettings::set_cameraid(const std::string& value) {
  
  cameraid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.VideoRecordingSettings.CameraId)
}
inline void VideoRecordingSettings::set_cameraid(std::string&& value) {
  
  cameraid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.VideoRecordingSettings.CameraId)
}
inline void VideoRecordingSettings::set_cameraid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cameraid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.VideoRecordingSettings.CameraId)
}
inline void VideoRecordingSettings::set_cameraid(const char* value, size_t size) {
  
  cameraid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.VideoRecordingSettings.CameraId)
}
inline std::string* VideoRecordingSettings::mutable_cameraid() {
  
  // @@protoc_insertion_point(field_mutable:AR51.VideoRecordingSettings.CameraId)
  return cameraid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VideoRecordingSettings::release_cameraid() {
  // @@protoc_insertion_point(field_release:AR51.VideoRecordingSettings.CameraId)
  
  return cameraid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VideoRecordingSettings::set_allocated_cameraid(std::string* cameraid) {
  if (cameraid != nullptr) {
    
  } else {
    
  }
  cameraid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cameraid);
  // @@protoc_insertion_point(field_set_allocated:AR51.VideoRecordingSettings.CameraId)
}

// int32 Width = 2;
inline void VideoRecordingSettings::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoRecordingSettings::width() const {
  // @@protoc_insertion_point(field_get:AR51.VideoRecordingSettings.Width)
  return width_;
}
inline void VideoRecordingSettings::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:AR51.VideoRecordingSettings.Width)
}

// int32 Height = 3;
inline void VideoRecordingSettings::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoRecordingSettings::height() const {
  // @@protoc_insertion_point(field_get:AR51.VideoRecordingSettings.Height)
  return height_;
}
inline void VideoRecordingSettings::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:AR51.VideoRecordingSettings.Height)
}

// int32 FrameRate = 4;
inline void VideoRecordingSettings::clear_framerate() {
  framerate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoRecordingSettings::framerate() const {
  // @@protoc_insertion_point(field_get:AR51.VideoRecordingSettings.FrameRate)
  return framerate_;
}
inline void VideoRecordingSettings::set_framerate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  framerate_ = value;
  // @@protoc_insertion_point(field_set:AR51.VideoRecordingSettings.FrameRate)
}

// .AR51.LensFacing LensFacing = 5;
inline void VideoRecordingSettings::clear_lensfacing() {
  lensfacing_ = 0;
}
inline ::AR51::LensFacing VideoRecordingSettings::lensfacing() const {
  // @@protoc_insertion_point(field_get:AR51.VideoRecordingSettings.LensFacing)
  return static_cast< ::AR51::LensFacing >(lensfacing_);
}
inline void VideoRecordingSettings::set_lensfacing(::AR51::LensFacing value) {
  
  lensfacing_ = value;
  // @@protoc_insertion_point(field_set:AR51.VideoRecordingSettings.LensFacing)
}

// bool IsHighSpeed = 6;
inline void VideoRecordingSettings::clear_ishighspeed() {
  ishighspeed_ = false;
}
inline bool VideoRecordingSettings::ishighspeed() const {
  // @@protoc_insertion_point(field_get:AR51.VideoRecordingSettings.IsHighSpeed)
  return ishighspeed_;
}
inline void VideoRecordingSettings::set_ishighspeed(bool value) {
  
  ishighspeed_ = value;
  // @@protoc_insertion_point(field_set:AR51.VideoRecordingSettings.IsHighSpeed)
}

// -------------------------------------------------------------------

// GetVideoRecordingSettingResponse

// repeated .AR51.VideoRecordingSettings Settings = 1;
inline int GetVideoRecordingSettingResponse::settings_size() const {
  return settings_.size();
}
inline void GetVideoRecordingSettingResponse::clear_settings() {
  settings_.Clear();
}
inline ::AR51::VideoRecordingSettings* GetVideoRecordingSettingResponse::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:AR51.GetVideoRecordingSettingResponse.Settings)
  return settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::VideoRecordingSettings >*
GetVideoRecordingSettingResponse::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:AR51.GetVideoRecordingSettingResponse.Settings)
  return &settings_;
}
inline const ::AR51::VideoRecordingSettings& GetVideoRecordingSettingResponse::settings(int index) const {
  // @@protoc_insertion_point(field_get:AR51.GetVideoRecordingSettingResponse.Settings)
  return settings_.Get(index);
}
inline ::AR51::VideoRecordingSettings* GetVideoRecordingSettingResponse::add_settings() {
  // @@protoc_insertion_point(field_add:AR51.GetVideoRecordingSettingResponse.Settings)
  return settings_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::VideoRecordingSettings >&
GetVideoRecordingSettingResponse::settings() const {
  // @@protoc_insertion_point(field_list:AR51.GetVideoRecordingSettingResponse.Settings)
  return settings_;
}

// -------------------------------------------------------------------

// CameraFeedRequest

// int32 JpgQuality = 1;
inline void CameraFeedRequest::clear_jpgquality() {
  jpgquality_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraFeedRequest::jpgquality() const {
  // @@protoc_insertion_point(field_get:AR51.CameraFeedRequest.JpgQuality)
  return jpgquality_;
}
inline void CameraFeedRequest::set_jpgquality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  jpgquality_ = value;
  // @@protoc_insertion_point(field_set:AR51.CameraFeedRequest.JpgQuality)
}

// int32 MaxWidth = 2;
inline void CameraFeedRequest::clear_maxwidth() {
  maxwidth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraFeedRequest::maxwidth() const {
  // @@protoc_insertion_point(field_get:AR51.CameraFeedRequest.MaxWidth)
  return maxwidth_;
}
inline void CameraFeedRequest::set_maxwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxwidth_ = value;
  // @@protoc_insertion_point(field_set:AR51.CameraFeedRequest.MaxWidth)
}

// int32 MaxHeight = 3;
inline void CameraFeedRequest::clear_maxheight() {
  maxheight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraFeedRequest::maxheight() const {
  // @@protoc_insertion_point(field_get:AR51.CameraFeedRequest.MaxHeight)
  return maxheight_;
}
inline void CameraFeedRequest::set_maxheight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxheight_ = value;
  // @@protoc_insertion_point(field_set:AR51.CameraFeedRequest.MaxHeight)
}

// int32 FrameRate = 4;
inline void CameraFeedRequest::clear_framerate() {
  framerate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraFeedRequest::framerate() const {
  // @@protoc_insertion_point(field_get:AR51.CameraFeedRequest.FrameRate)
  return framerate_;
}
inline void CameraFeedRequest::set_framerate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  framerate_ = value;
  // @@protoc_insertion_point(field_set:AR51.CameraFeedRequest.FrameRate)
}

// bool HologramsEnabled = 5;
inline void CameraFeedRequest::clear_hologramsenabled() {
  hologramsenabled_ = false;
}
inline bool CameraFeedRequest::hologramsenabled() const {
  // @@protoc_insertion_point(field_get:AR51.CameraFeedRequest.HologramsEnabled)
  return hologramsenabled_;
}
inline void CameraFeedRequest::set_hologramsenabled(bool value) {
  
  hologramsenabled_ = value;
  // @@protoc_insertion_point(field_set:AR51.CameraFeedRequest.HologramsEnabled)
}

// -------------------------------------------------------------------

// CameraFeedResponse

// int32 Id = 1;
inline void CameraFeedResponse::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraFeedResponse::id() const {
  // @@protoc_insertion_point(field_get:AR51.CameraFeedResponse.Id)
  return id_;
}
inline void CameraFeedResponse::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:AR51.CameraFeedResponse.Id)
}

// bytes CameraToWorld = 2;
inline void CameraFeedResponse::clear_cameratoworld() {
  cameratoworld_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CameraFeedResponse::cameratoworld() const {
  // @@protoc_insertion_point(field_get:AR51.CameraFeedResponse.CameraToWorld)
  return cameratoworld_.GetNoArena();
}
inline void CameraFeedResponse::set_cameratoworld(const std::string& value) {
  
  cameratoworld_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.CameraFeedResponse.CameraToWorld)
}
inline void CameraFeedResponse::set_cameratoworld(std::string&& value) {
  
  cameratoworld_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.CameraFeedResponse.CameraToWorld)
}
inline void CameraFeedResponse::set_cameratoworld(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cameratoworld_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.CameraFeedResponse.CameraToWorld)
}
inline void CameraFeedResponse::set_cameratoworld(const void* value, size_t size) {
  
  cameratoworld_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.CameraFeedResponse.CameraToWorld)
}
inline std::string* CameraFeedResponse::mutable_cameratoworld() {
  
  // @@protoc_insertion_point(field_mutable:AR51.CameraFeedResponse.CameraToWorld)
  return cameratoworld_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraFeedResponse::release_cameratoworld() {
  // @@protoc_insertion_point(field_release:AR51.CameraFeedResponse.CameraToWorld)
  
  return cameratoworld_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraFeedResponse::set_allocated_cameratoworld(std::string* cameratoworld) {
  if (cameratoworld != nullptr) {
    
  } else {
    
  }
  cameratoworld_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cameratoworld);
  // @@protoc_insertion_point(field_set_allocated:AR51.CameraFeedResponse.CameraToWorld)
}

// bytes Projection = 3;
inline void CameraFeedResponse::clear_projection() {
  projection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CameraFeedResponse::projection() const {
  // @@protoc_insertion_point(field_get:AR51.CameraFeedResponse.Projection)
  return projection_.GetNoArena();
}
inline void CameraFeedResponse::set_projection(const std::string& value) {
  
  projection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.CameraFeedResponse.Projection)
}
inline void CameraFeedResponse::set_projection(std::string&& value) {
  
  projection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.CameraFeedResponse.Projection)
}
inline void CameraFeedResponse::set_projection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  projection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.CameraFeedResponse.Projection)
}
inline void CameraFeedResponse::set_projection(const void* value, size_t size) {
  
  projection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.CameraFeedResponse.Projection)
}
inline std::string* CameraFeedResponse::mutable_projection() {
  
  // @@protoc_insertion_point(field_mutable:AR51.CameraFeedResponse.Projection)
  return projection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraFeedResponse::release_projection() {
  // @@protoc_insertion_point(field_release:AR51.CameraFeedResponse.Projection)
  
  return projection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraFeedResponse::set_allocated_projection(std::string* projection) {
  if (projection != nullptr) {
    
  } else {
    
  }
  projection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), projection);
  // @@protoc_insertion_point(field_set_allocated:AR51.CameraFeedResponse.Projection)
}

// bytes Jpg = 4;
inline void CameraFeedResponse::clear_jpg() {
  jpg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CameraFeedResponse::jpg() const {
  // @@protoc_insertion_point(field_get:AR51.CameraFeedResponse.Jpg)
  return jpg_.GetNoArena();
}
inline void CameraFeedResponse::set_jpg(const std::string& value) {
  
  jpg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.CameraFeedResponse.Jpg)
}
inline void CameraFeedResponse::set_jpg(std::string&& value) {
  
  jpg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.CameraFeedResponse.Jpg)
}
inline void CameraFeedResponse::set_jpg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jpg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.CameraFeedResponse.Jpg)
}
inline void CameraFeedResponse::set_jpg(const void* value, size_t size) {
  
  jpg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.CameraFeedResponse.Jpg)
}
inline std::string* CameraFeedResponse::mutable_jpg() {
  
  // @@protoc_insertion_point(field_mutable:AR51.CameraFeedResponse.Jpg)
  return jpg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraFeedResponse::release_jpg() {
  // @@protoc_insertion_point(field_release:AR51.CameraFeedResponse.Jpg)
  
  return jpg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraFeedResponse::set_allocated_jpg(std::string* jpg) {
  if (jpg != nullptr) {
    
  } else {
    
  }
  jpg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jpg);
  // @@protoc_insertion_point(field_set_allocated:AR51.CameraFeedResponse.Jpg)
}

// -------------------------------------------------------------------

// RenderingRequest

// string CameraId = 1;
inline void RenderingRequest::clear_cameraid() {
  cameraid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RenderingRequest::cameraid() const {
  // @@protoc_insertion_point(field_get:AR51.RenderingRequest.CameraId)
  return cameraid_.GetNoArena();
}
inline void RenderingRequest::set_cameraid(const std::string& value) {
  
  cameraid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.RenderingRequest.CameraId)
}
inline void RenderingRequest::set_cameraid(std::string&& value) {
  
  cameraid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.RenderingRequest.CameraId)
}
inline void RenderingRequest::set_cameraid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cameraid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.RenderingRequest.CameraId)
}
inline void RenderingRequest::set_cameraid(const char* value, size_t size) {
  
  cameraid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.RenderingRequest.CameraId)
}
inline std::string* RenderingRequest::mutable_cameraid() {
  
  // @@protoc_insertion_point(field_mutable:AR51.RenderingRequest.CameraId)
  return cameraid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RenderingRequest::release_cameraid() {
  // @@protoc_insertion_point(field_release:AR51.RenderingRequest.CameraId)
  
  return cameraid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RenderingRequest::set_allocated_cameraid(std::string* cameraid) {
  if (cameraid != nullptr) {
    
  } else {
    
  }
  cameraid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cameraid);
  // @@protoc_insertion_point(field_set_allocated:AR51.RenderingRequest.CameraId)
}

// string IpAddress = 2;
inline void RenderingRequest::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RenderingRequest::ipaddress() const {
  // @@protoc_insertion_point(field_get:AR51.RenderingRequest.IpAddress)
  return ipaddress_.GetNoArena();
}
inline void RenderingRequest::set_ipaddress(const std::string& value) {
  
  ipaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.RenderingRequest.IpAddress)
}
inline void RenderingRequest::set_ipaddress(std::string&& value) {
  
  ipaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.RenderingRequest.IpAddress)
}
inline void RenderingRequest::set_ipaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.RenderingRequest.IpAddress)
}
inline void RenderingRequest::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.RenderingRequest.IpAddress)
}
inline std::string* RenderingRequest::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:AR51.RenderingRequest.IpAddress)
  return ipaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RenderingRequest::release_ipaddress() {
  // @@protoc_insertion_point(field_release:AR51.RenderingRequest.IpAddress)
  
  return ipaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RenderingRequest::set_allocated_ipaddress(std::string* ipaddress) {
  if (ipaddress != nullptr) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:AR51.RenderingRequest.IpAddress)
}

// int32 Port = 3;
inline void RenderingRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderingRequest::port() const {
  // @@protoc_insertion_point(field_get:AR51.RenderingRequest.Port)
  return port_;
}
inline void RenderingRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:AR51.RenderingRequest.Port)
}

// int32 Width = 4;
inline void RenderingRequest::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderingRequest::width() const {
  // @@protoc_insertion_point(field_get:AR51.RenderingRequest.Width)
  return width_;
}
inline void RenderingRequest::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:AR51.RenderingRequest.Width)
}

// int32 Height = 5;
inline void RenderingRequest::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderingRequest::height() const {
  // @@protoc_insertion_point(field_get:AR51.RenderingRequest.Height)
  return height_;
}
inline void RenderingRequest::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:AR51.RenderingRequest.Height)
}

// int32 FrameRate = 6;
inline void RenderingRequest::clear_framerate() {
  framerate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderingRequest::framerate() const {
  // @@protoc_insertion_point(field_get:AR51.RenderingRequest.FrameRate)
  return framerate_;
}
inline void RenderingRequest::set_framerate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  framerate_ = value;
  // @@protoc_insertion_point(field_set:AR51.RenderingRequest.FrameRate)
}

// int32 JpgQuality = 7;
inline void RenderingRequest::clear_jpgquality() {
  jpgquality_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderingRequest::jpgquality() const {
  // @@protoc_insertion_point(field_get:AR51.RenderingRequest.JpgQuality)
  return jpgquality_;
}
inline void RenderingRequest::set_jpgquality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  jpgquality_ = value;
  // @@protoc_insertion_point(field_set:AR51.RenderingRequest.JpgQuality)
}

// -------------------------------------------------------------------

// RenderingResponse

// bytes Jpg = 1;
inline void RenderingResponse::clear_jpg() {
  jpg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RenderingResponse::jpg() const {
  // @@protoc_insertion_point(field_get:AR51.RenderingResponse.Jpg)
  return jpg_.GetNoArena();
}
inline void RenderingResponse::set_jpg(const std::string& value) {
  
  jpg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.RenderingResponse.Jpg)
}
inline void RenderingResponse::set_jpg(std::string&& value) {
  
  jpg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.RenderingResponse.Jpg)
}
inline void RenderingResponse::set_jpg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jpg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.RenderingResponse.Jpg)
}
inline void RenderingResponse::set_jpg(const void* value, size_t size) {
  
  jpg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.RenderingResponse.Jpg)
}
inline std::string* RenderingResponse::mutable_jpg() {
  
  // @@protoc_insertion_point(field_mutable:AR51.RenderingResponse.Jpg)
  return jpg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RenderingResponse::release_jpg() {
  // @@protoc_insertion_point(field_release:AR51.RenderingResponse.Jpg)
  
  return jpg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RenderingResponse::set_allocated_jpg(std::string* jpg) {
  if (jpg != nullptr) {
    
  } else {
    
  }
  jpg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jpg);
  // @@protoc_insertion_point(field_set_allocated:AR51.RenderingResponse.Jpg)
}

// -------------------------------------------------------------------

// DrawRequest

// string Text = 1;
inline void DrawRequest::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DrawRequest::text() const {
  // @@protoc_insertion_point(field_get:AR51.DrawRequest.Text)
  return text_.GetNoArena();
}
inline void DrawRequest::set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.DrawRequest.Text)
}
inline void DrawRequest::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.DrawRequest.Text)
}
inline void DrawRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.DrawRequest.Text)
}
inline void DrawRequest::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.DrawRequest.Text)
}
inline std::string* DrawRequest::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:AR51.DrawRequest.Text)
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DrawRequest::release_text() {
  // @@protoc_insertion_point(field_release:AR51.DrawRequest.Text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DrawRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawRequest.Text)
}

// float LineWidth = 2;
inline void DrawRequest::clear_linewidth() {
  linewidth_ = 0;
}
inline float DrawRequest::linewidth() const {
  // @@protoc_insertion_point(field_get:AR51.DrawRequest.LineWidth)
  return linewidth_;
}
inline void DrawRequest::set_linewidth(float value) {
  
  linewidth_ = value;
  // @@protoc_insertion_point(field_set:AR51.DrawRequest.LineWidth)
}

// .AR51.Color Color = 3;
inline bool DrawRequest::has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline const ::AR51::Color& DrawRequest::color() const {
  const ::AR51::Color* p = color_;
  // @@protoc_insertion_point(field_get:AR51.DrawRequest.Color)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Color*>(
      &::AR51::_Color_default_instance_);
}
inline ::AR51::Color* DrawRequest::release_color() {
  // @@protoc_insertion_point(field_release:AR51.DrawRequest.Color)
  
  ::AR51::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::AR51::Color* DrawRequest::mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawRequest.Color)
  return color_;
}
inline void DrawRequest::set_allocated_color(::AR51::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawRequest.Color)
}

// .AR51.Color FillColor = 4;
inline bool DrawRequest::has_fillcolor() const {
  return this != internal_default_instance() && fillcolor_ != nullptr;
}
inline const ::AR51::Color& DrawRequest::fillcolor() const {
  const ::AR51::Color* p = fillcolor_;
  // @@protoc_insertion_point(field_get:AR51.DrawRequest.FillColor)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Color*>(
      &::AR51::_Color_default_instance_);
}
inline ::AR51::Color* DrawRequest::release_fillcolor() {
  // @@protoc_insertion_point(field_release:AR51.DrawRequest.FillColor)
  
  ::AR51::Color* temp = fillcolor_;
  fillcolor_ = nullptr;
  return temp;
}
inline ::AR51::Color* DrawRequest::mutable_fillcolor() {
  
  if (fillcolor_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Color>(GetArenaNoVirtual());
    fillcolor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawRequest.FillColor)
  return fillcolor_;
}
inline void DrawRequest::set_allocated_fillcolor(::AR51::Color* fillcolor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fillcolor_);
  }
  if (fillcolor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fillcolor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fillcolor, submessage_arena);
    }
    
  } else {
    
  }
  fillcolor_ = fillcolor;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawRequest.FillColor)
}

// -------------------------------------------------------------------

// DrawLine2DRequest

// .AR51.DrawRequest Settings = 1;
inline bool DrawLine2DRequest::has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline void DrawLine2DRequest::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::AR51::DrawRequest& DrawLine2DRequest::settings() const {
  const ::AR51::DrawRequest* p = settings_;
  // @@protoc_insertion_point(field_get:AR51.DrawLine2DRequest.Settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::DrawRequest*>(
      &::AR51::_DrawRequest_default_instance_);
}
inline ::AR51::DrawRequest* DrawLine2DRequest::release_settings() {
  // @@protoc_insertion_point(field_release:AR51.DrawLine2DRequest.Settings)
  
  ::AR51::DrawRequest* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::AR51::DrawRequest* DrawLine2DRequest::mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::DrawRequest>(GetArenaNoVirtual());
    settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawLine2DRequest.Settings)
  return settings_;
}
inline void DrawLine2DRequest::set_allocated_settings(::AR51::DrawRequest* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawLine2DRequest.Settings)
}

// .AR51.Vector2 From = 2;
inline bool DrawLine2DRequest::has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline const ::AR51::Vector2& DrawLine2DRequest::from() const {
  const ::AR51::Vector2* p = from_;
  // @@protoc_insertion_point(field_get:AR51.DrawLine2DRequest.From)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Vector2*>(
      &::AR51::_Vector2_default_instance_);
}
inline ::AR51::Vector2* DrawLine2DRequest::release_from() {
  // @@protoc_insertion_point(field_release:AR51.DrawLine2DRequest.From)
  
  ::AR51::Vector2* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::AR51::Vector2* DrawLine2DRequest::mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Vector2>(GetArenaNoVirtual());
    from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawLine2DRequest.From)
  return from_;
}
inline void DrawLine2DRequest::set_allocated_from(::AR51::Vector2* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawLine2DRequest.From)
}

// .AR51.Vector2 To = 3;
inline bool DrawLine2DRequest::has_to() const {
  return this != internal_default_instance() && to_ != nullptr;
}
inline const ::AR51::Vector2& DrawLine2DRequest::to() const {
  const ::AR51::Vector2* p = to_;
  // @@protoc_insertion_point(field_get:AR51.DrawLine2DRequest.To)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Vector2*>(
      &::AR51::_Vector2_default_instance_);
}
inline ::AR51::Vector2* DrawLine2DRequest::release_to() {
  // @@protoc_insertion_point(field_release:AR51.DrawLine2DRequest.To)
  
  ::AR51::Vector2* temp = to_;
  to_ = nullptr;
  return temp;
}
inline ::AR51::Vector2* DrawLine2DRequest::mutable_to() {
  
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Vector2>(GetArenaNoVirtual());
    to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawLine2DRequest.To)
  return to_;
}
inline void DrawLine2DRequest::set_allocated_to(::AR51::Vector2* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawLine2DRequest.To)
}

// -------------------------------------------------------------------

// DrawLine3DRequest

// .AR51.DrawRequest Settings = 1;
inline bool DrawLine3DRequest::has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline void DrawLine3DRequest::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::AR51::DrawRequest& DrawLine3DRequest::settings() const {
  const ::AR51::DrawRequest* p = settings_;
  // @@protoc_insertion_point(field_get:AR51.DrawLine3DRequest.Settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::DrawRequest*>(
      &::AR51::_DrawRequest_default_instance_);
}
inline ::AR51::DrawRequest* DrawLine3DRequest::release_settings() {
  // @@protoc_insertion_point(field_release:AR51.DrawLine3DRequest.Settings)
  
  ::AR51::DrawRequest* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::AR51::DrawRequest* DrawLine3DRequest::mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::DrawRequest>(GetArenaNoVirtual());
    settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawLine3DRequest.Settings)
  return settings_;
}
inline void DrawLine3DRequest::set_allocated_settings(::AR51::DrawRequest* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawLine3DRequest.Settings)
}

// .AR51.Vector3 From = 2;
inline bool DrawLine3DRequest::has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline const ::AR51::Vector3& DrawLine3DRequest::from() const {
  const ::AR51::Vector3* p = from_;
  // @@protoc_insertion_point(field_get:AR51.DrawLine3DRequest.From)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Vector3*>(
      &::AR51::_Vector3_default_instance_);
}
inline ::AR51::Vector3* DrawLine3DRequest::release_from() {
  // @@protoc_insertion_point(field_release:AR51.DrawLine3DRequest.From)
  
  ::AR51::Vector3* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::AR51::Vector3* DrawLine3DRequest::mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Vector3>(GetArenaNoVirtual());
    from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawLine3DRequest.From)
  return from_;
}
inline void DrawLine3DRequest::set_allocated_from(::AR51::Vector3* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawLine3DRequest.From)
}

// .AR51.Vector3 To = 3;
inline bool DrawLine3DRequest::has_to() const {
  return this != internal_default_instance() && to_ != nullptr;
}
inline const ::AR51::Vector3& DrawLine3DRequest::to() const {
  const ::AR51::Vector3* p = to_;
  // @@protoc_insertion_point(field_get:AR51.DrawLine3DRequest.To)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Vector3*>(
      &::AR51::_Vector3_default_instance_);
}
inline ::AR51::Vector3* DrawLine3DRequest::release_to() {
  // @@protoc_insertion_point(field_release:AR51.DrawLine3DRequest.To)
  
  ::AR51::Vector3* temp = to_;
  to_ = nullptr;
  return temp;
}
inline ::AR51::Vector3* DrawLine3DRequest::mutable_to() {
  
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Vector3>(GetArenaNoVirtual());
    to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawLine3DRequest.To)
  return to_;
}
inline void DrawLine3DRequest::set_allocated_to(::AR51::Vector3* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawLine3DRequest.To)
}

// -------------------------------------------------------------------

// DrawRectRequest

// .AR51.DrawRequest Settings = 1;
inline bool DrawRectRequest::has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline void DrawRectRequest::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::AR51::DrawRequest& DrawRectRequest::settings() const {
  const ::AR51::DrawRequest* p = settings_;
  // @@protoc_insertion_point(field_get:AR51.DrawRectRequest.Settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::DrawRequest*>(
      &::AR51::_DrawRequest_default_instance_);
}
inline ::AR51::DrawRequest* DrawRectRequest::release_settings() {
  // @@protoc_insertion_point(field_release:AR51.DrawRectRequest.Settings)
  
  ::AR51::DrawRequest* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::AR51::DrawRequest* DrawRectRequest::mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::DrawRequest>(GetArenaNoVirtual());
    settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawRectRequest.Settings)
  return settings_;
}
inline void DrawRectRequest::set_allocated_settings(::AR51::DrawRequest* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawRectRequest.Settings)
}

// .AR51.Vector2 Center = 2;
inline bool DrawRectRequest::has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline const ::AR51::Vector2& DrawRectRequest::center() const {
  const ::AR51::Vector2* p = center_;
  // @@protoc_insertion_point(field_get:AR51.DrawRectRequest.Center)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Vector2*>(
      &::AR51::_Vector2_default_instance_);
}
inline ::AR51::Vector2* DrawRectRequest::release_center() {
  // @@protoc_insertion_point(field_release:AR51.DrawRectRequest.Center)
  
  ::AR51::Vector2* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::AR51::Vector2* DrawRectRequest::mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Vector2>(GetArenaNoVirtual());
    center_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawRectRequest.Center)
  return center_;
}
inline void DrawRectRequest::set_allocated_center(::AR51::Vector2* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawRectRequest.Center)
}

// .AR51.Vector2 Size = 3;
inline bool DrawRectRequest::has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline const ::AR51::Vector2& DrawRectRequest::size() const {
  const ::AR51::Vector2* p = size_;
  // @@protoc_insertion_point(field_get:AR51.DrawRectRequest.Size)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Vector2*>(
      &::AR51::_Vector2_default_instance_);
}
inline ::AR51::Vector2* DrawRectRequest::release_size() {
  // @@protoc_insertion_point(field_release:AR51.DrawRectRequest.Size)
  
  ::AR51::Vector2* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::AR51::Vector2* DrawRectRequest::mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Vector2>(GetArenaNoVirtual());
    size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawRectRequest.Size)
  return size_;
}
inline void DrawRectRequest::set_allocated_size(::AR51::Vector2* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawRectRequest.Size)
}

// -------------------------------------------------------------------

// DrawCubeRequest

// .AR51.DrawRequest Settings = 1;
inline bool DrawCubeRequest::has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline void DrawCubeRequest::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::AR51::DrawRequest& DrawCubeRequest::settings() const {
  const ::AR51::DrawRequest* p = settings_;
  // @@protoc_insertion_point(field_get:AR51.DrawCubeRequest.Settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::DrawRequest*>(
      &::AR51::_DrawRequest_default_instance_);
}
inline ::AR51::DrawRequest* DrawCubeRequest::release_settings() {
  // @@protoc_insertion_point(field_release:AR51.DrawCubeRequest.Settings)
  
  ::AR51::DrawRequest* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::AR51::DrawRequest* DrawCubeRequest::mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::DrawRequest>(GetArenaNoVirtual());
    settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawCubeRequest.Settings)
  return settings_;
}
inline void DrawCubeRequest::set_allocated_settings(::AR51::DrawRequest* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawCubeRequest.Settings)
}

// .AR51.Vector3 Center = 2;
inline bool DrawCubeRequest::has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline const ::AR51::Vector3& DrawCubeRequest::center() const {
  const ::AR51::Vector3* p = center_;
  // @@protoc_insertion_point(field_get:AR51.DrawCubeRequest.Center)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Vector3*>(
      &::AR51::_Vector3_default_instance_);
}
inline ::AR51::Vector3* DrawCubeRequest::release_center() {
  // @@protoc_insertion_point(field_release:AR51.DrawCubeRequest.Center)
  
  ::AR51::Vector3* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::AR51::Vector3* DrawCubeRequest::mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Vector3>(GetArenaNoVirtual());
    center_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawCubeRequest.Center)
  return center_;
}
inline void DrawCubeRequest::set_allocated_center(::AR51::Vector3* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawCubeRequest.Center)
}

// .AR51.Vector3 Size = 3;
inline bool DrawCubeRequest::has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline const ::AR51::Vector3& DrawCubeRequest::size() const {
  const ::AR51::Vector3* p = size_;
  // @@protoc_insertion_point(field_get:AR51.DrawCubeRequest.Size)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Vector3*>(
      &::AR51::_Vector3_default_instance_);
}
inline ::AR51::Vector3* DrawCubeRequest::release_size() {
  // @@protoc_insertion_point(field_release:AR51.DrawCubeRequest.Size)
  
  ::AR51::Vector3* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::AR51::Vector3* DrawCubeRequest::mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Vector3>(GetArenaNoVirtual());
    size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawCubeRequest.Size)
  return size_;
}
inline void DrawCubeRequest::set_allocated_size(::AR51::Vector3* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawCubeRequest.Size)
}

// -------------------------------------------------------------------

// DrawCircleRequest

// .AR51.DrawRequest Settings = 1;
inline bool DrawCircleRequest::has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline void DrawCircleRequest::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::AR51::DrawRequest& DrawCircleRequest::settings() const {
  const ::AR51::DrawRequest* p = settings_;
  // @@protoc_insertion_point(field_get:AR51.DrawCircleRequest.Settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::DrawRequest*>(
      &::AR51::_DrawRequest_default_instance_);
}
inline ::AR51::DrawRequest* DrawCircleRequest::release_settings() {
  // @@protoc_insertion_point(field_release:AR51.DrawCircleRequest.Settings)
  
  ::AR51::DrawRequest* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::AR51::DrawRequest* DrawCircleRequest::mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::DrawRequest>(GetArenaNoVirtual());
    settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawCircleRequest.Settings)
  return settings_;
}
inline void DrawCircleRequest::set_allocated_settings(::AR51::DrawRequest* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawCircleRequest.Settings)
}

// .AR51.Vector2 Center = 2;
inline bool DrawCircleRequest::has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline const ::AR51::Vector2& DrawCircleRequest::center() const {
  const ::AR51::Vector2* p = center_;
  // @@protoc_insertion_point(field_get:AR51.DrawCircleRequest.Center)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Vector2*>(
      &::AR51::_Vector2_default_instance_);
}
inline ::AR51::Vector2* DrawCircleRequest::release_center() {
  // @@protoc_insertion_point(field_release:AR51.DrawCircleRequest.Center)
  
  ::AR51::Vector2* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::AR51::Vector2* DrawCircleRequest::mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Vector2>(GetArenaNoVirtual());
    center_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawCircleRequest.Center)
  return center_;
}
inline void DrawCircleRequest::set_allocated_center(::AR51::Vector2* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawCircleRequest.Center)
}

// float Radius = 3;
inline void DrawCircleRequest::clear_radius() {
  radius_ = 0;
}
inline float DrawCircleRequest::radius() const {
  // @@protoc_insertion_point(field_get:AR51.DrawCircleRequest.Radius)
  return radius_;
}
inline void DrawCircleRequest::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:AR51.DrawCircleRequest.Radius)
}

// int32 Segments = 4;
inline void DrawCircleRequest::clear_segments() {
  segments_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrawCircleRequest::segments() const {
  // @@protoc_insertion_point(field_get:AR51.DrawCircleRequest.Segments)
  return segments_;
}
inline void DrawCircleRequest::set_segments(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  segments_ = value;
  // @@protoc_insertion_point(field_set:AR51.DrawCircleRequest.Segments)
}

// -------------------------------------------------------------------

// DrawSphereRequest

// .AR51.DrawRequest Settings = 1;
inline bool DrawSphereRequest::has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline void DrawSphereRequest::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::AR51::DrawRequest& DrawSphereRequest::settings() const {
  const ::AR51::DrawRequest* p = settings_;
  // @@protoc_insertion_point(field_get:AR51.DrawSphereRequest.Settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::DrawRequest*>(
      &::AR51::_DrawRequest_default_instance_);
}
inline ::AR51::DrawRequest* DrawSphereRequest::release_settings() {
  // @@protoc_insertion_point(field_release:AR51.DrawSphereRequest.Settings)
  
  ::AR51::DrawRequest* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::AR51::DrawRequest* DrawSphereRequest::mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::DrawRequest>(GetArenaNoVirtual());
    settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawSphereRequest.Settings)
  return settings_;
}
inline void DrawSphereRequest::set_allocated_settings(::AR51::DrawRequest* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawSphereRequest.Settings)
}

// .AR51.Vector3 Center = 2;
inline bool DrawSphereRequest::has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline const ::AR51::Vector3& DrawSphereRequest::center() const {
  const ::AR51::Vector3* p = center_;
  // @@protoc_insertion_point(field_get:AR51.DrawSphereRequest.Center)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Vector3*>(
      &::AR51::_Vector3_default_instance_);
}
inline ::AR51::Vector3* DrawSphereRequest::release_center() {
  // @@protoc_insertion_point(field_release:AR51.DrawSphereRequest.Center)
  
  ::AR51::Vector3* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::AR51::Vector3* DrawSphereRequest::mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Vector3>(GetArenaNoVirtual());
    center_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.DrawSphereRequest.Center)
  return center_;
}
inline void DrawSphereRequest::set_allocated_center(::AR51::Vector3* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:AR51.DrawSphereRequest.Center)
}

// float Radius = 3;
inline void DrawSphereRequest::clear_radius() {
  radius_ = 0;
}
inline float DrawSphereRequest::radius() const {
  // @@protoc_insertion_point(field_get:AR51.DrawSphereRequest.Radius)
  return radius_;
}
inline void DrawSphereRequest::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:AR51.DrawSphereRequest.Radius)
}

// -------------------------------------------------------------------

// InstantiateRequest

// string Name = 1;
inline void InstantiateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InstantiateRequest::name() const {
  // @@protoc_insertion_point(field_get:AR51.InstantiateRequest.Name)
  return name_.GetNoArena();
}
inline void InstantiateRequest::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.InstantiateRequest.Name)
}
inline void InstantiateRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.InstantiateRequest.Name)
}
inline void InstantiateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.InstantiateRequest.Name)
}
inline void InstantiateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.InstantiateRequest.Name)
}
inline std::string* InstantiateRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AR51.InstantiateRequest.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InstantiateRequest::release_name() {
  // @@protoc_insertion_point(field_release:AR51.InstantiateRequest.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InstantiateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AR51.InstantiateRequest.Name)
}

// .AR51.Vector3 Position = 2;
inline bool InstantiateRequest::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::AR51::Vector3& InstantiateRequest::position() const {
  const ::AR51::Vector3* p = position_;
  // @@protoc_insertion_point(field_get:AR51.InstantiateRequest.Position)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Vector3*>(
      &::AR51::_Vector3_default_instance_);
}
inline ::AR51::Vector3* InstantiateRequest::release_position() {
  // @@protoc_insertion_point(field_release:AR51.InstantiateRequest.Position)
  
  ::AR51::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::AR51::Vector3* InstantiateRequest::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Vector3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.InstantiateRequest.Position)
  return position_;
}
inline void InstantiateRequest::set_allocated_position(::AR51::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:AR51.InstantiateRequest.Position)
}

// .AR51.Quaternion Rotation = 3;
inline bool InstantiateRequest::has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline const ::AR51::Quaternion& InstantiateRequest::rotation() const {
  const ::AR51::Quaternion* p = rotation_;
  // @@protoc_insertion_point(field_get:AR51.InstantiateRequest.Rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Quaternion*>(
      &::AR51::_Quaternion_default_instance_);
}
inline ::AR51::Quaternion* InstantiateRequest::release_rotation() {
  // @@protoc_insertion_point(field_release:AR51.InstantiateRequest.Rotation)
  
  ::AR51::Quaternion* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::AR51::Quaternion* InstantiateRequest::mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Quaternion>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.InstantiateRequest.Rotation)
  return rotation_;
}
inline void InstantiateRequest::set_allocated_rotation(::AR51::Quaternion* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:AR51.InstantiateRequest.Rotation)
}

// .AR51.Vector3 Scale = 4;
inline bool InstantiateRequest::has_scale() const {
  return this != internal_default_instance() && scale_ != nullptr;
}
inline const ::AR51::Vector3& InstantiateRequest::scale() const {
  const ::AR51::Vector3* p = scale_;
  // @@protoc_insertion_point(field_get:AR51.InstantiateRequest.Scale)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Vector3*>(
      &::AR51::_Vector3_default_instance_);
}
inline ::AR51::Vector3* InstantiateRequest::release_scale() {
  // @@protoc_insertion_point(field_release:AR51.InstantiateRequest.Scale)
  
  ::AR51::Vector3* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::AR51::Vector3* InstantiateRequest::mutable_scale() {
  
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Vector3>(GetArenaNoVirtual());
    scale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.InstantiateRequest.Scale)
  return scale_;
}
inline void InstantiateRequest::set_allocated_scale(::AR51::Vector3* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:AR51.InstantiateRequest.Scale)
}

// int64 ParentId = 5;
inline void InstantiateRequest::clear_parentid() {
  parentid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstantiateRequest::parentid() const {
  // @@protoc_insertion_point(field_get:AR51.InstantiateRequest.ParentId)
  return parentid_;
}
inline void InstantiateRequest::set_parentid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  parentid_ = value;
  // @@protoc_insertion_point(field_set:AR51.InstantiateRequest.ParentId)
}

// .AR51.Color color = 6;
inline bool InstantiateRequest::has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline const ::AR51::Color& InstantiateRequest::color() const {
  const ::AR51::Color* p = color_;
  // @@protoc_insertion_point(field_get:AR51.InstantiateRequest.color)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Color*>(
      &::AR51::_Color_default_instance_);
}
inline ::AR51::Color* InstantiateRequest::release_color() {
  // @@protoc_insertion_point(field_release:AR51.InstantiateRequest.color)
  
  ::AR51::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::AR51::Color* InstantiateRequest::mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.InstantiateRequest.color)
  return color_;
}
inline void InstantiateRequest::set_allocated_color(::AR51::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:AR51.InstantiateRequest.color)
}

// -------------------------------------------------------------------

// CreatePrimitiveRequest

// .AR51.PrimitiveType pritmiveType = 1;
inline void CreatePrimitiveRequest::clear_pritmivetype() {
  pritmivetype_ = 0;
}
inline ::AR51::PrimitiveType CreatePrimitiveRequest::pritmivetype() const {
  // @@protoc_insertion_point(field_get:AR51.CreatePrimitiveRequest.pritmiveType)
  return static_cast< ::AR51::PrimitiveType >(pritmivetype_);
}
inline void CreatePrimitiveRequest::set_pritmivetype(::AR51::PrimitiveType value) {
  
  pritmivetype_ = value;
  // @@protoc_insertion_point(field_set:AR51.CreatePrimitiveRequest.pritmiveType)
}

// .AR51.InstantiateRequest Instance = 2;
inline bool CreatePrimitiveRequest::has_instance() const {
  return this != internal_default_instance() && instance_ != nullptr;
}
inline void CreatePrimitiveRequest::clear_instance() {
  if (GetArenaNoVirtual() == nullptr && instance_ != nullptr) {
    delete instance_;
  }
  instance_ = nullptr;
}
inline const ::AR51::InstantiateRequest& CreatePrimitiveRequest::instance() const {
  const ::AR51::InstantiateRequest* p = instance_;
  // @@protoc_insertion_point(field_get:AR51.CreatePrimitiveRequest.Instance)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::InstantiateRequest*>(
      &::AR51::_InstantiateRequest_default_instance_);
}
inline ::AR51::InstantiateRequest* CreatePrimitiveRequest::release_instance() {
  // @@protoc_insertion_point(field_release:AR51.CreatePrimitiveRequest.Instance)
  
  ::AR51::InstantiateRequest* temp = instance_;
  instance_ = nullptr;
  return temp;
}
inline ::AR51::InstantiateRequest* CreatePrimitiveRequest::mutable_instance() {
  
  if (instance_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::InstantiateRequest>(GetArenaNoVirtual());
    instance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.CreatePrimitiveRequest.Instance)
  return instance_;
}
inline void CreatePrimitiveRequest::set_allocated_instance(::AR51::InstantiateRequest* instance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete instance_;
  }
  if (instance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      instance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:AR51.CreatePrimitiveRequest.Instance)
}

// -------------------------------------------------------------------

// NameRequest

// string Name = 1;
inline void NameRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NameRequest::name() const {
  // @@protoc_insertion_point(field_get:AR51.NameRequest.Name)
  return name_.GetNoArena();
}
inline void NameRequest::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.NameRequest.Name)
}
inline void NameRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.NameRequest.Name)
}
inline void NameRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.NameRequest.Name)
}
inline void NameRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.NameRequest.Name)
}
inline std::string* NameRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AR51.NameRequest.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NameRequest::release_name() {
  // @@protoc_insertion_point(field_release:AR51.NameRequest.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NameRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AR51.NameRequest.Name)
}

// -------------------------------------------------------------------

// ObjectIdMessage

// int64 Id = 1;
inline void ObjectIdMessage::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ObjectIdMessage::id() const {
  // @@protoc_insertion_point(field_get:AR51.ObjectIdMessage.Id)
  return id_;
}
inline void ObjectIdMessage::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:AR51.ObjectIdMessage.Id)
}

// -------------------------------------------------------------------

// ActiveMessage

// int64 Id = 1;
inline void ActiveMessage::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActiveMessage::id() const {
  // @@protoc_insertion_point(field_get:AR51.ActiveMessage.Id)
  return id_;
}
inline void ActiveMessage::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:AR51.ActiveMessage.Id)
}

// bool IsActive = 2;
inline void ActiveMessage::clear_isactive() {
  isactive_ = false;
}
inline bool ActiveMessage::isactive() const {
  // @@protoc_insertion_point(field_get:AR51.ActiveMessage.IsActive)
  return isactive_;
}
inline void ActiveMessage::set_isactive(bool value) {
  
  isactive_ = value;
  // @@protoc_insertion_point(field_set:AR51.ActiveMessage.IsActive)
}

// -------------------------------------------------------------------

// SetParentRequest

// int64 Id = 1;
inline void SetParentRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetParentRequest::id() const {
  // @@protoc_insertion_point(field_get:AR51.SetParentRequest.Id)
  return id_;
}
inline void SetParentRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetParentRequest.Id)
}

// int64 parentId = 2;
inline void SetParentRequest::clear_parentid() {
  parentid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetParentRequest::parentid() const {
  // @@protoc_insertion_point(field_get:AR51.SetParentRequest.parentId)
  return parentid_;
}
inline void SetParentRequest::set_parentid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  parentid_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetParentRequest.parentId)
}

// -------------------------------------------------------------------

// SetNameRequest

// int64 Id = 1;
inline void SetNameRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetNameRequest::id() const {
  // @@protoc_insertion_point(field_get:AR51.SetNameRequest.Id)
  return id_;
}
inline void SetNameRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetNameRequest.Id)
}

// string Name = 2;
inline void SetNameRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetNameRequest::name() const {
  // @@protoc_insertion_point(field_get:AR51.SetNameRequest.Name)
  return name_.GetNoArena();
}
inline void SetNameRequest::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.SetNameRequest.Name)
}
inline void SetNameRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.SetNameRequest.Name)
}
inline void SetNameRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.SetNameRequest.Name)
}
inline void SetNameRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.SetNameRequest.Name)
}
inline std::string* SetNameRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AR51.SetNameRequest.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetNameRequest::release_name() {
  // @@protoc_insertion_point(field_release:AR51.SetNameRequest.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetNameRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AR51.SetNameRequest.Name)
}

// -------------------------------------------------------------------

// GetTransformRequest

// int64 GameObjectId = 1;
inline void GetTransformRequest::clear_gameobjectid() {
  gameobjectid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTransformRequest::gameobjectid() const {
  // @@protoc_insertion_point(field_get:AR51.GetTransformRequest.GameObjectId)
  return gameobjectid_;
}
inline void GetTransformRequest::set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gameobjectid_ = value;
  // @@protoc_insertion_point(field_set:AR51.GetTransformRequest.GameObjectId)
}

// .AR51.TransformTypes Type = 2;
inline void GetTransformRequest::clear_type() {
  type_ = 0;
}
inline ::AR51::TransformTypes GetTransformRequest::type() const {
  // @@protoc_insertion_point(field_get:AR51.GetTransformRequest.Type)
  return static_cast< ::AR51::TransformTypes >(type_);
}
inline void GetTransformRequest::set_type(::AR51::TransformTypes value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AR51.GetTransformRequest.Type)
}

// -------------------------------------------------------------------

// SetTransformRequest

// int64 GameObjectId = 1;
inline void SetTransformRequest::clear_gameobjectid() {
  gameobjectid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetTransformRequest::gameobjectid() const {
  // @@protoc_insertion_point(field_get:AR51.SetTransformRequest.GameObjectId)
  return gameobjectid_;
}
inline void SetTransformRequest::set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gameobjectid_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetTransformRequest.GameObjectId)
}

// .AR51.TransformTypes Type = 2;
inline void SetTransformRequest::clear_type() {
  type_ = 0;
}
inline ::AR51::TransformTypes SetTransformRequest::type() const {
  // @@protoc_insertion_point(field_get:AR51.SetTransformRequest.Type)
  return static_cast< ::AR51::TransformTypes >(type_);
}
inline void SetTransformRequest::set_type(::AR51::TransformTypes value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetTransformRequest.Type)
}

// bytes Value = 3;
inline void SetTransformRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetTransformRequest::value() const {
  // @@protoc_insertion_point(field_get:AR51.SetTransformRequest.Value)
  return value_.GetNoArena();
}
inline void SetTransformRequest::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.SetTransformRequest.Value)
}
inline void SetTransformRequest::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.SetTransformRequest.Value)
}
inline void SetTransformRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.SetTransformRequest.Value)
}
inline void SetTransformRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.SetTransformRequest.Value)
}
inline std::string* SetTransformRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:AR51.SetTransformRequest.Value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetTransformRequest::release_value() {
  // @@protoc_insertion_point(field_release:AR51.SetTransformRequest.Value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetTransformRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:AR51.SetTransformRequest.Value)
}

// -------------------------------------------------------------------

// TransformMessage

// bytes Value = 1;
inline void TransformMessage::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransformMessage::value() const {
  // @@protoc_insertion_point(field_get:AR51.TransformMessage.Value)
  return value_.GetNoArena();
}
inline void TransformMessage::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.TransformMessage.Value)
}
inline void TransformMessage::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.TransformMessage.Value)
}
inline void TransformMessage::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.TransformMessage.Value)
}
inline void TransformMessage::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.TransformMessage.Value)
}
inline std::string* TransformMessage::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:AR51.TransformMessage.Value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransformMessage::release_value() {
  // @@protoc_insertion_point(field_release:AR51.TransformMessage.Value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransformMessage::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:AR51.TransformMessage.Value)
}

// -------------------------------------------------------------------

// ComponentRequest

// int64 GameObjectId = 1;
inline void ComponentRequest::clear_gameobjectid() {
  gameobjectid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ComponentRequest::gameobjectid() const {
  // @@protoc_insertion_point(field_get:AR51.ComponentRequest.GameObjectId)
  return gameobjectid_;
}
inline void ComponentRequest::set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gameobjectid_ = value;
  // @@protoc_insertion_point(field_set:AR51.ComponentRequest.GameObjectId)
}

// string ComponentType = 2;
inline void ComponentRequest::clear_componenttype() {
  componenttype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ComponentRequest::componenttype() const {
  // @@protoc_insertion_point(field_get:AR51.ComponentRequest.ComponentType)
  return componenttype_.GetNoArena();
}
inline void ComponentRequest::set_componenttype(const std::string& value) {
  
  componenttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.ComponentRequest.ComponentType)
}
inline void ComponentRequest::set_componenttype(std::string&& value) {
  
  componenttype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.ComponentRequest.ComponentType)
}
inline void ComponentRequest::set_componenttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  componenttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.ComponentRequest.ComponentType)
}
inline void ComponentRequest::set_componenttype(const char* value, size_t size) {
  
  componenttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.ComponentRequest.ComponentType)
}
inline std::string* ComponentRequest::mutable_componenttype() {
  
  // @@protoc_insertion_point(field_mutable:AR51.ComponentRequest.ComponentType)
  return componenttype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ComponentRequest::release_componenttype() {
  // @@protoc_insertion_point(field_release:AR51.ComponentRequest.ComponentType)
  
  return componenttype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ComponentRequest::set_allocated_componenttype(std::string* componenttype) {
  if (componenttype != nullptr) {
    
  } else {
    
  }
  componenttype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), componenttype);
  // @@protoc_insertion_point(field_set_allocated:AR51.ComponentRequest.ComponentType)
}

// -------------------------------------------------------------------

// ComponentFieldMessage

// int64 ComponentId = 1;
inline void ComponentFieldMessage::clear_componentid() {
  componentid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ComponentFieldMessage::componentid() const {
  // @@protoc_insertion_point(field_get:AR51.ComponentFieldMessage.ComponentId)
  return componentid_;
}
inline void ComponentFieldMessage::set_componentid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  componentid_ = value;
  // @@protoc_insertion_point(field_set:AR51.ComponentFieldMessage.ComponentId)
}

// string FieldName = 2;
inline void ComponentFieldMessage::clear_fieldname() {
  fieldname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ComponentFieldMessage::fieldname() const {
  // @@protoc_insertion_point(field_get:AR51.ComponentFieldMessage.FieldName)
  return fieldname_.GetNoArena();
}
inline void ComponentFieldMessage::set_fieldname(const std::string& value) {
  
  fieldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.ComponentFieldMessage.FieldName)
}
inline void ComponentFieldMessage::set_fieldname(std::string&& value) {
  
  fieldname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.ComponentFieldMessage.FieldName)
}
inline void ComponentFieldMessage::set_fieldname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fieldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.ComponentFieldMessage.FieldName)
}
inline void ComponentFieldMessage::set_fieldname(const char* value, size_t size) {
  
  fieldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.ComponentFieldMessage.FieldName)
}
inline std::string* ComponentFieldMessage::mutable_fieldname() {
  
  // @@protoc_insertion_point(field_mutable:AR51.ComponentFieldMessage.FieldName)
  return fieldname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ComponentFieldMessage::release_fieldname() {
  // @@protoc_insertion_point(field_release:AR51.ComponentFieldMessage.FieldName)
  
  return fieldname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ComponentFieldMessage::set_allocated_fieldname(std::string* fieldname) {
  if (fieldname != nullptr) {
    
  } else {
    
  }
  fieldname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fieldname);
  // @@protoc_insertion_point(field_set_allocated:AR51.ComponentFieldMessage.FieldName)
}

// bytes Value = 3;
inline void ComponentFieldMessage::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ComponentFieldMessage::value() const {
  // @@protoc_insertion_point(field_get:AR51.ComponentFieldMessage.Value)
  return value_.GetNoArena();
}
inline void ComponentFieldMessage::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.ComponentFieldMessage.Value)
}
inline void ComponentFieldMessage::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.ComponentFieldMessage.Value)
}
inline void ComponentFieldMessage::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.ComponentFieldMessage.Value)
}
inline void ComponentFieldMessage::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.ComponentFieldMessage.Value)
}
inline std::string* ComponentFieldMessage::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:AR51.ComponentFieldMessage.Value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ComponentFieldMessage::release_value() {
  // @@protoc_insertion_point(field_release:AR51.ComponentFieldMessage.Value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ComponentFieldMessage::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:AR51.ComponentFieldMessage.Value)
}

// -------------------------------------------------------------------

// SetMaterialTextureRequest

// int64 GameObjectId = 1;
inline void SetMaterialTextureRequest::clear_gameobjectid() {
  gameobjectid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetMaterialTextureRequest::gameobjectid() const {
  // @@protoc_insertion_point(field_get:AR51.SetMaterialTextureRequest.GameObjectId)
  return gameobjectid_;
}
inline void SetMaterialTextureRequest::set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gameobjectid_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetMaterialTextureRequest.GameObjectId)
}

// string TextureName = 2;
inline void SetMaterialTextureRequest::clear_texturename() {
  texturename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetMaterialTextureRequest::texturename() const {
  // @@protoc_insertion_point(field_get:AR51.SetMaterialTextureRequest.TextureName)
  return texturename_.GetNoArena();
}
inline void SetMaterialTextureRequest::set_texturename(const std::string& value) {
  
  texturename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.SetMaterialTextureRequest.TextureName)
}
inline void SetMaterialTextureRequest::set_texturename(std::string&& value) {
  
  texturename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.SetMaterialTextureRequest.TextureName)
}
inline void SetMaterialTextureRequest::set_texturename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  texturename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.SetMaterialTextureRequest.TextureName)
}
inline void SetMaterialTextureRequest::set_texturename(const char* value, size_t size) {
  
  texturename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.SetMaterialTextureRequest.TextureName)
}
inline std::string* SetMaterialTextureRequest::mutable_texturename() {
  
  // @@protoc_insertion_point(field_mutable:AR51.SetMaterialTextureRequest.TextureName)
  return texturename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetMaterialTextureRequest::release_texturename() {
  // @@protoc_insertion_point(field_release:AR51.SetMaterialTextureRequest.TextureName)
  
  return texturename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetMaterialTextureRequest::set_allocated_texturename(std::string* texturename) {
  if (texturename != nullptr) {
    
  } else {
    
  }
  texturename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), texturename);
  // @@protoc_insertion_point(field_set_allocated:AR51.SetMaterialTextureRequest.TextureName)
}

// bytes Jpg = 3;
inline void SetMaterialTextureRequest::clear_jpg() {
  jpg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetMaterialTextureRequest::jpg() const {
  // @@protoc_insertion_point(field_get:AR51.SetMaterialTextureRequest.Jpg)
  return jpg_.GetNoArena();
}
inline void SetMaterialTextureRequest::set_jpg(const std::string& value) {
  
  jpg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.SetMaterialTextureRequest.Jpg)
}
inline void SetMaterialTextureRequest::set_jpg(std::string&& value) {
  
  jpg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.SetMaterialTextureRequest.Jpg)
}
inline void SetMaterialTextureRequest::set_jpg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jpg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.SetMaterialTextureRequest.Jpg)
}
inline void SetMaterialTextureRequest::set_jpg(const void* value, size_t size) {
  
  jpg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.SetMaterialTextureRequest.Jpg)
}
inline std::string* SetMaterialTextureRequest::mutable_jpg() {
  
  // @@protoc_insertion_point(field_mutable:AR51.SetMaterialTextureRequest.Jpg)
  return jpg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetMaterialTextureRequest::release_jpg() {
  // @@protoc_insertion_point(field_release:AR51.SetMaterialTextureRequest.Jpg)
  
  return jpg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetMaterialTextureRequest::set_allocated_jpg(std::string* jpg) {
  if (jpg != nullptr) {
    
  } else {
    
  }
  jpg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jpg);
  // @@protoc_insertion_point(field_set_allocated:AR51.SetMaterialTextureRequest.Jpg)
}

// bool DestroyCurrentTexture = 4;
inline void SetMaterialTextureRequest::clear_destroycurrenttexture() {
  destroycurrenttexture_ = false;
}
inline bool SetMaterialTextureRequest::destroycurrenttexture() const {
  // @@protoc_insertion_point(field_get:AR51.SetMaterialTextureRequest.DestroyCurrentTexture)
  return destroycurrenttexture_;
}
inline void SetMaterialTextureRequest::set_destroycurrenttexture(bool value) {
  
  destroycurrenttexture_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetMaterialTextureRequest.DestroyCurrentTexture)
}

// bool Shared = 5;
inline void SetMaterialTextureRequest::clear_shared() {
  shared_ = false;
}
inline bool SetMaterialTextureRequest::shared() const {
  // @@protoc_insertion_point(field_get:AR51.SetMaterialTextureRequest.Shared)
  return shared_;
}
inline void SetMaterialTextureRequest::set_shared(bool value) {
  
  shared_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetMaterialTextureRequest.Shared)
}

// -------------------------------------------------------------------

// SetMaterialInt32Request

// int64 GameObjectId = 1;
inline void SetMaterialInt32Request::clear_gameobjectid() {
  gameobjectid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetMaterialInt32Request::gameobjectid() const {
  // @@protoc_insertion_point(field_get:AR51.SetMaterialInt32Request.GameObjectId)
  return gameobjectid_;
}
inline void SetMaterialInt32Request::set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gameobjectid_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetMaterialInt32Request.GameObjectId)
}

// string Name = 2;
inline void SetMaterialInt32Request::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetMaterialInt32Request::name() const {
  // @@protoc_insertion_point(field_get:AR51.SetMaterialInt32Request.Name)
  return name_.GetNoArena();
}
inline void SetMaterialInt32Request::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.SetMaterialInt32Request.Name)
}
inline void SetMaterialInt32Request::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.SetMaterialInt32Request.Name)
}
inline void SetMaterialInt32Request::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.SetMaterialInt32Request.Name)
}
inline void SetMaterialInt32Request::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.SetMaterialInt32Request.Name)
}
inline std::string* SetMaterialInt32Request::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AR51.SetMaterialInt32Request.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetMaterialInt32Request::release_name() {
  // @@protoc_insertion_point(field_release:AR51.SetMaterialInt32Request.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetMaterialInt32Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AR51.SetMaterialInt32Request.Name)
}

// int32 Value = 3;
inline void SetMaterialInt32Request::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetMaterialInt32Request::value() const {
  // @@protoc_insertion_point(field_get:AR51.SetMaterialInt32Request.Value)
  return value_;
}
inline void SetMaterialInt32Request::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetMaterialInt32Request.Value)
}

// bool Shared = 4;
inline void SetMaterialInt32Request::clear_shared() {
  shared_ = false;
}
inline bool SetMaterialInt32Request::shared() const {
  // @@protoc_insertion_point(field_get:AR51.SetMaterialInt32Request.Shared)
  return shared_;
}
inline void SetMaterialInt32Request::set_shared(bool value) {
  
  shared_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetMaterialInt32Request.Shared)
}

// -------------------------------------------------------------------

// SetMaterialFloatRequest

// int64 GameObjectId = 1;
inline void SetMaterialFloatRequest::clear_gameobjectid() {
  gameobjectid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetMaterialFloatRequest::gameobjectid() const {
  // @@protoc_insertion_point(field_get:AR51.SetMaterialFloatRequest.GameObjectId)
  return gameobjectid_;
}
inline void SetMaterialFloatRequest::set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gameobjectid_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetMaterialFloatRequest.GameObjectId)
}

// string Name = 2;
inline void SetMaterialFloatRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetMaterialFloatRequest::name() const {
  // @@protoc_insertion_point(field_get:AR51.SetMaterialFloatRequest.Name)
  return name_.GetNoArena();
}
inline void SetMaterialFloatRequest::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.SetMaterialFloatRequest.Name)
}
inline void SetMaterialFloatRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.SetMaterialFloatRequest.Name)
}
inline void SetMaterialFloatRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.SetMaterialFloatRequest.Name)
}
inline void SetMaterialFloatRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.SetMaterialFloatRequest.Name)
}
inline std::string* SetMaterialFloatRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AR51.SetMaterialFloatRequest.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetMaterialFloatRequest::release_name() {
  // @@protoc_insertion_point(field_release:AR51.SetMaterialFloatRequest.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetMaterialFloatRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AR51.SetMaterialFloatRequest.Name)
}

// float Value = 3;
inline void SetMaterialFloatRequest::clear_value() {
  value_ = 0;
}
inline float SetMaterialFloatRequest::value() const {
  // @@protoc_insertion_point(field_get:AR51.SetMaterialFloatRequest.Value)
  return value_;
}
inline void SetMaterialFloatRequest::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetMaterialFloatRequest.Value)
}

// bool Shared = 4;
inline void SetMaterialFloatRequest::clear_shared() {
  shared_ = false;
}
inline bool SetMaterialFloatRequest::shared() const {
  // @@protoc_insertion_point(field_get:AR51.SetMaterialFloatRequest.Shared)
  return shared_;
}
inline void SetMaterialFloatRequest::set_shared(bool value) {
  
  shared_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetMaterialFloatRequest.Shared)
}

// -------------------------------------------------------------------

// SetMaterialColorRequest

// int64 GameObjectId = 1;
inline void SetMaterialColorRequest::clear_gameobjectid() {
  gameobjectid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetMaterialColorRequest::gameobjectid() const {
  // @@protoc_insertion_point(field_get:AR51.SetMaterialColorRequest.GameObjectId)
  return gameobjectid_;
}
inline void SetMaterialColorRequest::set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gameobjectid_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetMaterialColorRequest.GameObjectId)
}

// .AR51.Color color = 2;
inline bool SetMaterialColorRequest::has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline const ::AR51::Color& SetMaterialColorRequest::color() const {
  const ::AR51::Color* p = color_;
  // @@protoc_insertion_point(field_get:AR51.SetMaterialColorRequest.color)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Color*>(
      &::AR51::_Color_default_instance_);
}
inline ::AR51::Color* SetMaterialColorRequest::release_color() {
  // @@protoc_insertion_point(field_release:AR51.SetMaterialColorRequest.color)
  
  ::AR51::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::AR51::Color* SetMaterialColorRequest::mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.SetMaterialColorRequest.color)
  return color_;
}
inline void SetMaterialColorRequest::set_allocated_color(::AR51::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:AR51.SetMaterialColorRequest.color)
}

// string Name = 3;
inline void SetMaterialColorRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetMaterialColorRequest::name() const {
  // @@protoc_insertion_point(field_get:AR51.SetMaterialColorRequest.Name)
  return name_.GetNoArena();
}
inline void SetMaterialColorRequest::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.SetMaterialColorRequest.Name)
}
inline void SetMaterialColorRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.SetMaterialColorRequest.Name)
}
inline void SetMaterialColorRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.SetMaterialColorRequest.Name)
}
inline void SetMaterialColorRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.SetMaterialColorRequest.Name)
}
inline std::string* SetMaterialColorRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AR51.SetMaterialColorRequest.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetMaterialColorRequest::release_name() {
  // @@protoc_insertion_point(field_release:AR51.SetMaterialColorRequest.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetMaterialColorRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AR51.SetMaterialColorRequest.Name)
}

// bool Shared = 4;
inline void SetMaterialColorRequest::clear_shared() {
  shared_ = false;
}
inline bool SetMaterialColorRequest::shared() const {
  // @@protoc_insertion_point(field_get:AR51.SetMaterialColorRequest.Shared)
  return shared_;
}
inline void SetMaterialColorRequest::set_shared(bool value) {
  
  shared_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetMaterialColorRequest.Shared)
}

// -------------------------------------------------------------------

// GetMaterialColorRequest

// int64 GameObjectId = 1;
inline void GetMaterialColorRequest::clear_gameobjectid() {
  gameobjectid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetMaterialColorRequest::gameobjectid() const {
  // @@protoc_insertion_point(field_get:AR51.GetMaterialColorRequest.GameObjectId)
  return gameobjectid_;
}
inline void GetMaterialColorRequest::set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gameobjectid_ = value;
  // @@protoc_insertion_point(field_set:AR51.GetMaterialColorRequest.GameObjectId)
}

// string Name = 2;
inline void GetMaterialColorRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetMaterialColorRequest::name() const {
  // @@protoc_insertion_point(field_get:AR51.GetMaterialColorRequest.Name)
  return name_.GetNoArena();
}
inline void GetMaterialColorRequest::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.GetMaterialColorRequest.Name)
}
inline void GetMaterialColorRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.GetMaterialColorRequest.Name)
}
inline void GetMaterialColorRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.GetMaterialColorRequest.Name)
}
inline void GetMaterialColorRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.GetMaterialColorRequest.Name)
}
inline std::string* GetMaterialColorRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AR51.GetMaterialColorRequest.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetMaterialColorRequest::release_name() {
  // @@protoc_insertion_point(field_release:AR51.GetMaterialColorRequest.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetMaterialColorRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AR51.GetMaterialColorRequest.Name)
}

// bool Shared = 3;
inline void GetMaterialColorRequest::clear_shared() {
  shared_ = false;
}
inline bool GetMaterialColorRequest::shared() const {
  // @@protoc_insertion_point(field_get:AR51.GetMaterialColorRequest.Shared)
  return shared_;
}
inline void GetMaterialColorRequest::set_shared(bool value) {
  
  shared_ = value;
  // @@protoc_insertion_point(field_set:AR51.GetMaterialColorRequest.Shared)
}

// -------------------------------------------------------------------

// SetRendererEnabledRequest

// int64 GameObjectId = 1;
inline void SetRendererEnabledRequest::clear_gameobjectid() {
  gameobjectid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetRendererEnabledRequest::gameobjectid() const {
  // @@protoc_insertion_point(field_get:AR51.SetRendererEnabledRequest.GameObjectId)
  return gameobjectid_;
}
inline void SetRendererEnabledRequest::set_gameobjectid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gameobjectid_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetRendererEnabledRequest.GameObjectId)
}

// bool Enabled = 2;
inline void SetRendererEnabledRequest::clear_enabled() {
  enabled_ = false;
}
inline bool SetRendererEnabledRequest::enabled() const {
  // @@protoc_insertion_point(field_get:AR51.SetRendererEnabledRequest.Enabled)
  return enabled_;
}
inline void SetRendererEnabledRequest::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetRendererEnabledRequest.Enabled)
}

// -------------------------------------------------------------------

// GetGuardianIdsResponse

// repeated string GuardianIds = 1;
inline int GetGuardianIdsResponse::guardianids_size() const {
  return guardianids_.size();
}
inline void GetGuardianIdsResponse::clear_guardianids() {
  guardianids_.Clear();
}
inline const std::string& GetGuardianIdsResponse::guardianids(int index) const {
  // @@protoc_insertion_point(field_get:AR51.GetGuardianIdsResponse.GuardianIds)
  return guardianids_.Get(index);
}
inline std::string* GetGuardianIdsResponse::mutable_guardianids(int index) {
  // @@protoc_insertion_point(field_mutable:AR51.GetGuardianIdsResponse.GuardianIds)
  return guardianids_.Mutable(index);
}
inline void GetGuardianIdsResponse::set_guardianids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AR51.GetGuardianIdsResponse.GuardianIds)
  guardianids_.Mutable(index)->assign(value);
}
inline void GetGuardianIdsResponse::set_guardianids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AR51.GetGuardianIdsResponse.GuardianIds)
  guardianids_.Mutable(index)->assign(std::move(value));
}
inline void GetGuardianIdsResponse::set_guardianids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  guardianids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AR51.GetGuardianIdsResponse.GuardianIds)
}
inline void GetGuardianIdsResponse::set_guardianids(int index, const char* value, size_t size) {
  guardianids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AR51.GetGuardianIdsResponse.GuardianIds)
}
inline std::string* GetGuardianIdsResponse::add_guardianids() {
  // @@protoc_insertion_point(field_add_mutable:AR51.GetGuardianIdsResponse.GuardianIds)
  return guardianids_.Add();
}
inline void GetGuardianIdsResponse::add_guardianids(const std::string& value) {
  guardianids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AR51.GetGuardianIdsResponse.GuardianIds)
}
inline void GetGuardianIdsResponse::add_guardianids(std::string&& value) {
  guardianids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AR51.GetGuardianIdsResponse.GuardianIds)
}
inline void GetGuardianIdsResponse::add_guardianids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  guardianids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AR51.GetGuardianIdsResponse.GuardianIds)
}
inline void GetGuardianIdsResponse::add_guardianids(const char* value, size_t size) {
  guardianids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AR51.GetGuardianIdsResponse.GuardianIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetGuardianIdsResponse::guardianids() const {
  // @@protoc_insertion_point(field_list:AR51.GetGuardianIdsResponse.GuardianIds)
  return guardianids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetGuardianIdsResponse::mutable_guardianids() {
  // @@protoc_insertion_point(field_mutable_list:AR51.GetGuardianIdsResponse.GuardianIds)
  return &guardianids_;
}

// -------------------------------------------------------------------

// GuardianRequest

// string GuardianId = 1;
inline void GuardianRequest::clear_guardianid() {
  guardianid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GuardianRequest::guardianid() const {
  // @@protoc_insertion_point(field_get:AR51.GuardianRequest.GuardianId)
  return guardianid_.GetNoArena();
}
inline void GuardianRequest::set_guardianid(const std::string& value) {
  
  guardianid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.GuardianRequest.GuardianId)
}
inline void GuardianRequest::set_guardianid(std::string&& value) {
  
  guardianid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.GuardianRequest.GuardianId)
}
inline void GuardianRequest::set_guardianid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  guardianid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.GuardianRequest.GuardianId)
}
inline void GuardianRequest::set_guardianid(const char* value, size_t size) {
  
  guardianid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.GuardianRequest.GuardianId)
}
inline std::string* GuardianRequest::mutable_guardianid() {
  
  // @@protoc_insertion_point(field_mutable:AR51.GuardianRequest.GuardianId)
  return guardianid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GuardianRequest::release_guardianid() {
  // @@protoc_insertion_point(field_release:AR51.GuardianRequest.GuardianId)
  
  return guardianid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GuardianRequest::set_allocated_guardianid(std::string* guardianid) {
  if (guardianid != nullptr) {
    
  } else {
    
  }
  guardianid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guardianid);
  // @@protoc_insertion_point(field_set_allocated:AR51.GuardianRequest.GuardianId)
}

// -------------------------------------------------------------------

// GetGuardianResponse

// string GuardianId = 1;
inline void GetGuardianResponse::clear_guardianid() {
  guardianid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetGuardianResponse::guardianid() const {
  // @@protoc_insertion_point(field_get:AR51.GetGuardianResponse.GuardianId)
  return guardianid_.GetNoArena();
}
inline void GetGuardianResponse::set_guardianid(const std::string& value) {
  
  guardianid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.GetGuardianResponse.GuardianId)
}
inline void GetGuardianResponse::set_guardianid(std::string&& value) {
  
  guardianid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.GetGuardianResponse.GuardianId)
}
inline void GetGuardianResponse::set_guardianid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  guardianid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.GetGuardianResponse.GuardianId)
}
inline void GetGuardianResponse::set_guardianid(const char* value, size_t size) {
  
  guardianid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.GetGuardianResponse.GuardianId)
}
inline std::string* GetGuardianResponse::mutable_guardianid() {
  
  // @@protoc_insertion_point(field_mutable:AR51.GetGuardianResponse.GuardianId)
  return guardianid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetGuardianResponse::release_guardianid() {
  // @@protoc_insertion_point(field_release:AR51.GetGuardianResponse.GuardianId)
  
  return guardianid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetGuardianResponse::set_allocated_guardianid(std::string* guardianid) {
  if (guardianid != nullptr) {
    
  } else {
    
  }
  guardianid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guardianid);
  // @@protoc_insertion_point(field_set_allocated:AR51.GetGuardianResponse.GuardianId)
}

// bytes Points = 2;
inline void GetGuardianResponse::clear_points() {
  points_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetGuardianResponse::points() const {
  // @@protoc_insertion_point(field_get:AR51.GetGuardianResponse.Points)
  return points_.GetNoArena();
}
inline void GetGuardianResponse::set_points(const std::string& value) {
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.GetGuardianResponse.Points)
}
inline void GetGuardianResponse::set_points(std::string&& value) {
  
  points_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.GetGuardianResponse.Points)
}
inline void GetGuardianResponse::set_points(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.GetGuardianResponse.Points)
}
inline void GetGuardianResponse::set_points(const void* value, size_t size) {
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.GetGuardianResponse.Points)
}
inline std::string* GetGuardianResponse::mutable_points() {
  
  // @@protoc_insertion_point(field_mutable:AR51.GetGuardianResponse.Points)
  return points_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetGuardianResponse::release_points() {
  // @@protoc_insertion_point(field_release:AR51.GetGuardianResponse.Points)
  
  return points_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetGuardianResponse::set_allocated_points(std::string* points) {
  if (points != nullptr) {
    
  } else {
    
  }
  points_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points);
  // @@protoc_insertion_point(field_set_allocated:AR51.GetGuardianResponse.Points)
}

// -------------------------------------------------------------------

// CreateGuardianRequest

// string GuardianId = 1;
inline void CreateGuardianRequest::clear_guardianid() {
  guardianid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateGuardianRequest::guardianid() const {
  // @@protoc_insertion_point(field_get:AR51.CreateGuardianRequest.GuardianId)
  return guardianid_.GetNoArena();
}
inline void CreateGuardianRequest::set_guardianid(const std::string& value) {
  
  guardianid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.CreateGuardianRequest.GuardianId)
}
inline void CreateGuardianRequest::set_guardianid(std::string&& value) {
  
  guardianid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.CreateGuardianRequest.GuardianId)
}
inline void CreateGuardianRequest::set_guardianid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  guardianid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.CreateGuardianRequest.GuardianId)
}
inline void CreateGuardianRequest::set_guardianid(const char* value, size_t size) {
  
  guardianid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.CreateGuardianRequest.GuardianId)
}
inline std::string* CreateGuardianRequest::mutable_guardianid() {
  
  // @@protoc_insertion_point(field_mutable:AR51.CreateGuardianRequest.GuardianId)
  return guardianid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateGuardianRequest::release_guardianid() {
  // @@protoc_insertion_point(field_release:AR51.CreateGuardianRequest.GuardianId)
  
  return guardianid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGuardianRequest::set_allocated_guardianid(std::string* guardianid) {
  if (guardianid != nullptr) {
    
  } else {
    
  }
  guardianid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guardianid);
  // @@protoc_insertion_point(field_set_allocated:AR51.CreateGuardianRequest.GuardianId)
}

// bytes Points = 2;
inline void CreateGuardianRequest::clear_points() {
  points_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateGuardianRequest::points() const {
  // @@protoc_insertion_point(field_get:AR51.CreateGuardianRequest.Points)
  return points_.GetNoArena();
}
inline void CreateGuardianRequest::set_points(const std::string& value) {
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.CreateGuardianRequest.Points)
}
inline void CreateGuardianRequest::set_points(std::string&& value) {
  
  points_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.CreateGuardianRequest.Points)
}
inline void CreateGuardianRequest::set_points(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.CreateGuardianRequest.Points)
}
inline void CreateGuardianRequest::set_points(const void* value, size_t size) {
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.CreateGuardianRequest.Points)
}
inline std::string* CreateGuardianRequest::mutable_points() {
  
  // @@protoc_insertion_point(field_mutable:AR51.CreateGuardianRequest.Points)
  return points_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateGuardianRequest::release_points() {
  // @@protoc_insertion_point(field_release:AR51.CreateGuardianRequest.Points)
  
  return points_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGuardianRequest::set_allocated_points(std::string* points) {
  if (points != nullptr) {
    
  } else {
    
  }
  points_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points);
  // @@protoc_insertion_point(field_set_allocated:AR51.CreateGuardianRequest.Points)
}

// float Height = 3;
inline void CreateGuardianRequest::clear_height() {
  height_ = 0;
}
inline float CreateGuardianRequest::height() const {
  // @@protoc_insertion_point(field_get:AR51.CreateGuardianRequest.Height)
  return height_;
}
inline void CreateGuardianRequest::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:AR51.CreateGuardianRequest.Height)
}

// -------------------------------------------------------------------

// CreateAnchorRequest

// string AnchorId = 1;
inline void CreateAnchorRequest::clear_anchorid() {
  anchorid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateAnchorRequest::anchorid() const {
  // @@protoc_insertion_point(field_get:AR51.CreateAnchorRequest.AnchorId)
  return anchorid_.GetNoArena();
}
inline void CreateAnchorRequest::set_anchorid(const std::string& value) {
  
  anchorid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.CreateAnchorRequest.AnchorId)
}
inline void CreateAnchorRequest::set_anchorid(std::string&& value) {
  
  anchorid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.CreateAnchorRequest.AnchorId)
}
inline void CreateAnchorRequest::set_anchorid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  anchorid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.CreateAnchorRequest.AnchorId)
}
inline void CreateAnchorRequest::set_anchorid(const char* value, size_t size) {
  
  anchorid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.CreateAnchorRequest.AnchorId)
}
inline std::string* CreateAnchorRequest::mutable_anchorid() {
  
  // @@protoc_insertion_point(field_mutable:AR51.CreateAnchorRequest.AnchorId)
  return anchorid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateAnchorRequest::release_anchorid() {
  // @@protoc_insertion_point(field_release:AR51.CreateAnchorRequest.AnchorId)
  
  return anchorid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAnchorRequest::set_allocated_anchorid(std::string* anchorid) {
  if (anchorid != nullptr) {
    
  } else {
    
  }
  anchorid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), anchorid);
  // @@protoc_insertion_point(field_set_allocated:AR51.CreateAnchorRequest.AnchorId)
}

// string ParentId = 2;
inline void CreateAnchorRequest::clear_parentid() {
  parentid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateAnchorRequest::parentid() const {
  // @@protoc_insertion_point(field_get:AR51.CreateAnchorRequest.ParentId)
  return parentid_.GetNoArena();
}
inline void CreateAnchorRequest::set_parentid(const std::string& value) {
  
  parentid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.CreateAnchorRequest.ParentId)
}
inline void CreateAnchorRequest::set_parentid(std::string&& value) {
  
  parentid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.CreateAnchorRequest.ParentId)
}
inline void CreateAnchorRequest::set_parentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parentid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.CreateAnchorRequest.ParentId)
}
inline void CreateAnchorRequest::set_parentid(const char* value, size_t size) {
  
  parentid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.CreateAnchorRequest.ParentId)
}
inline std::string* CreateAnchorRequest::mutable_parentid() {
  
  // @@protoc_insertion_point(field_mutable:AR51.CreateAnchorRequest.ParentId)
  return parentid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateAnchorRequest::release_parentid() {
  // @@protoc_insertion_point(field_release:AR51.CreateAnchorRequest.ParentId)
  
  return parentid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAnchorRequest::set_allocated_parentid(std::string* parentid) {
  if (parentid != nullptr) {
    
  } else {
    
  }
  parentid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parentid);
  // @@protoc_insertion_point(field_set_allocated:AR51.CreateAnchorRequest.ParentId)
}

// .AR51.Vector3 Position = 3;
inline bool CreateAnchorRequest::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::AR51::Vector3& CreateAnchorRequest::position() const {
  const ::AR51::Vector3* p = position_;
  // @@protoc_insertion_point(field_get:AR51.CreateAnchorRequest.Position)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Vector3*>(
      &::AR51::_Vector3_default_instance_);
}
inline ::AR51::Vector3* CreateAnchorRequest::release_position() {
  // @@protoc_insertion_point(field_release:AR51.CreateAnchorRequest.Position)
  
  ::AR51::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::AR51::Vector3* CreateAnchorRequest::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Vector3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.CreateAnchorRequest.Position)
  return position_;
}
inline void CreateAnchorRequest::set_allocated_position(::AR51::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:AR51.CreateAnchorRequest.Position)
}

// .AR51.Quaternion Rotation = 4;
inline bool CreateAnchorRequest::has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline const ::AR51::Quaternion& CreateAnchorRequest::rotation() const {
  const ::AR51::Quaternion* p = rotation_;
  // @@protoc_insertion_point(field_get:AR51.CreateAnchorRequest.Rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::Quaternion*>(
      &::AR51::_Quaternion_default_instance_);
}
inline ::AR51::Quaternion* CreateAnchorRequest::release_rotation() {
  // @@protoc_insertion_point(field_release:AR51.CreateAnchorRequest.Rotation)
  
  ::AR51::Quaternion* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::AR51::Quaternion* CreateAnchorRequest::mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::Quaternion>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.CreateAnchorRequest.Rotation)
  return rotation_;
}
inline void CreateAnchorRequest::set_allocated_rotation(::AR51::Quaternion* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:AR51.CreateAnchorRequest.Rotation)
}

// bool Visible = 5;
inline void CreateAnchorRequest::clear_visible() {
  visible_ = false;
}
inline bool CreateAnchorRequest::visible() const {
  // @@protoc_insertion_point(field_get:AR51.CreateAnchorRequest.Visible)
  return visible_;
}
inline void CreateAnchorRequest::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:AR51.CreateAnchorRequest.Visible)
}

// -------------------------------------------------------------------

// SetAnchorVisiliblityRequest

// string AnchorId = 1;
inline void SetAnchorVisiliblityRequest::clear_anchorid() {
  anchorid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetAnchorVisiliblityRequest::anchorid() const {
  // @@protoc_insertion_point(field_get:AR51.SetAnchorVisiliblityRequest.AnchorId)
  return anchorid_.GetNoArena();
}
inline void SetAnchorVisiliblityRequest::set_anchorid(const std::string& value) {
  
  anchorid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.SetAnchorVisiliblityRequest.AnchorId)
}
inline void SetAnchorVisiliblityRequest::set_anchorid(std::string&& value) {
  
  anchorid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.SetAnchorVisiliblityRequest.AnchorId)
}
inline void SetAnchorVisiliblityRequest::set_anchorid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  anchorid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.SetAnchorVisiliblityRequest.AnchorId)
}
inline void SetAnchorVisiliblityRequest::set_anchorid(const char* value, size_t size) {
  
  anchorid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.SetAnchorVisiliblityRequest.AnchorId)
}
inline std::string* SetAnchorVisiliblityRequest::mutable_anchorid() {
  
  // @@protoc_insertion_point(field_mutable:AR51.SetAnchorVisiliblityRequest.AnchorId)
  return anchorid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetAnchorVisiliblityRequest::release_anchorid() {
  // @@protoc_insertion_point(field_release:AR51.SetAnchorVisiliblityRequest.AnchorId)
  
  return anchorid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetAnchorVisiliblityRequest::set_allocated_anchorid(std::string* anchorid) {
  if (anchorid != nullptr) {
    
  } else {
    
  }
  anchorid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), anchorid);
  // @@protoc_insertion_point(field_set_allocated:AR51.SetAnchorVisiliblityRequest.AnchorId)
}

// bool Visible = 2;
inline void SetAnchorVisiliblityRequest::clear_visible() {
  visible_ = false;
}
inline bool SetAnchorVisiliblityRequest::visible() const {
  // @@protoc_insertion_point(field_get:AR51.SetAnchorVisiliblityRequest.Visible)
  return visible_;
}
inline void SetAnchorVisiliblityRequest::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:AR51.SetAnchorVisiliblityRequest.Visible)
}

// -------------------------------------------------------------------

// AnchorIdsReply

// repeated string AnchorIds = 1;
inline int AnchorIdsReply::anchorids_size() const {
  return anchorids_.size();
}
inline void AnchorIdsReply::clear_anchorids() {
  anchorids_.Clear();
}
inline const std::string& AnchorIdsReply::anchorids(int index) const {
  // @@protoc_insertion_point(field_get:AR51.AnchorIdsReply.AnchorIds)
  return anchorids_.Get(index);
}
inline std::string* AnchorIdsReply::mutable_anchorids(int index) {
  // @@protoc_insertion_point(field_mutable:AR51.AnchorIdsReply.AnchorIds)
  return anchorids_.Mutable(index);
}
inline void AnchorIdsReply::set_anchorids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AR51.AnchorIdsReply.AnchorIds)
  anchorids_.Mutable(index)->assign(value);
}
inline void AnchorIdsReply::set_anchorids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AR51.AnchorIdsReply.AnchorIds)
  anchorids_.Mutable(index)->assign(std::move(value));
}
inline void AnchorIdsReply::set_anchorids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  anchorids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AR51.AnchorIdsReply.AnchorIds)
}
inline void AnchorIdsReply::set_anchorids(int index, const char* value, size_t size) {
  anchorids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AR51.AnchorIdsReply.AnchorIds)
}
inline std::string* AnchorIdsReply::add_anchorids() {
  // @@protoc_insertion_point(field_add_mutable:AR51.AnchorIdsReply.AnchorIds)
  return anchorids_.Add();
}
inline void AnchorIdsReply::add_anchorids(const std::string& value) {
  anchorids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AR51.AnchorIdsReply.AnchorIds)
}
inline void AnchorIdsReply::add_anchorids(std::string&& value) {
  anchorids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AR51.AnchorIdsReply.AnchorIds)
}
inline void AnchorIdsReply::add_anchorids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  anchorids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AR51.AnchorIdsReply.AnchorIds)
}
inline void AnchorIdsReply::add_anchorids(const char* value, size_t size) {
  anchorids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AR51.AnchorIdsReply.AnchorIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AnchorIdsReply::anchorids() const {
  // @@protoc_insertion_point(field_list:AR51.AnchorIdsReply.AnchorIds)
  return anchorids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AnchorIdsReply::mutable_anchorids() {
  // @@protoc_insertion_point(field_mutable_list:AR51.AnchorIdsReply.AnchorIds)
  return &anchorids_;
}

// repeated string VisibleAnchorIds = 2;
inline int AnchorIdsReply::visibleanchorids_size() const {
  return visibleanchorids_.size();
}
inline void AnchorIdsReply::clear_visibleanchorids() {
  visibleanchorids_.Clear();
}
inline const std::string& AnchorIdsReply::visibleanchorids(int index) const {
  // @@protoc_insertion_point(field_get:AR51.AnchorIdsReply.VisibleAnchorIds)
  return visibleanchorids_.Get(index);
}
inline std::string* AnchorIdsReply::mutable_visibleanchorids(int index) {
  // @@protoc_insertion_point(field_mutable:AR51.AnchorIdsReply.VisibleAnchorIds)
  return visibleanchorids_.Mutable(index);
}
inline void AnchorIdsReply::set_visibleanchorids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AR51.AnchorIdsReply.VisibleAnchorIds)
  visibleanchorids_.Mutable(index)->assign(value);
}
inline void AnchorIdsReply::set_visibleanchorids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AR51.AnchorIdsReply.VisibleAnchorIds)
  visibleanchorids_.Mutable(index)->assign(std::move(value));
}
inline void AnchorIdsReply::set_visibleanchorids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  visibleanchorids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AR51.AnchorIdsReply.VisibleAnchorIds)
}
inline void AnchorIdsReply::set_visibleanchorids(int index, const char* value, size_t size) {
  visibleanchorids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AR51.AnchorIdsReply.VisibleAnchorIds)
}
inline std::string* AnchorIdsReply::add_visibleanchorids() {
  // @@protoc_insertion_point(field_add_mutable:AR51.AnchorIdsReply.VisibleAnchorIds)
  return visibleanchorids_.Add();
}
inline void AnchorIdsReply::add_visibleanchorids(const std::string& value) {
  visibleanchorids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AR51.AnchorIdsReply.VisibleAnchorIds)
}
inline void AnchorIdsReply::add_visibleanchorids(std::string&& value) {
  visibleanchorids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AR51.AnchorIdsReply.VisibleAnchorIds)
}
inline void AnchorIdsReply::add_visibleanchorids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  visibleanchorids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AR51.AnchorIdsReply.VisibleAnchorIds)
}
inline void AnchorIdsReply::add_visibleanchorids(const char* value, size_t size) {
  visibleanchorids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AR51.AnchorIdsReply.VisibleAnchorIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AnchorIdsReply::visibleanchorids() const {
  // @@protoc_insertion_point(field_list:AR51.AnchorIdsReply.VisibleAnchorIds)
  return visibleanchorids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AnchorIdsReply::mutable_visibleanchorids() {
  // @@protoc_insertion_point(field_mutable_list:AR51.AnchorIdsReply.VisibleAnchorIds)
  return &visibleanchorids_;
}

// -------------------------------------------------------------------

// FieldInfos

// repeated .AR51.FieldInfo Fields = 1;
inline int FieldInfos::fields_size() const {
  return fields_.size();
}
inline void FieldInfos::clear_fields() {
  fields_.Clear();
}
inline ::AR51::FieldInfo* FieldInfos::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:AR51.FieldInfos.Fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::FieldInfo >*
FieldInfos::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:AR51.FieldInfos.Fields)
  return &fields_;
}
inline const ::AR51::FieldInfo& FieldInfos::fields(int index) const {
  // @@protoc_insertion_point(field_get:AR51.FieldInfos.Fields)
  return fields_.Get(index);
}
inline ::AR51::FieldInfo* FieldInfos::add_fields() {
  // @@protoc_insertion_point(field_add:AR51.FieldInfos.Fields)
  return fields_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::FieldInfo >&
FieldInfos::fields() const {
  // @@protoc_insertion_point(field_list:AR51.FieldInfos.Fields)
  return fields_;
}

// -------------------------------------------------------------------

// FieldInfo

// string Name = 1;
inline void FieldInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FieldInfo::name() const {
  // @@protoc_insertion_point(field_get:AR51.FieldInfo.Name)
  return name_.GetNoArena();
}
inline void FieldInfo::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.FieldInfo.Name)
}
inline void FieldInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.FieldInfo.Name)
}
inline void FieldInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.FieldInfo.Name)
}
inline void FieldInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.FieldInfo.Name)
}
inline std::string* FieldInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AR51.FieldInfo.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FieldInfo::release_name() {
  // @@protoc_insertion_point(field_release:AR51.FieldInfo.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FieldInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AR51.FieldInfo.Name)
}

// .AR51.FieldTypeEnum Type = 2;
inline void FieldInfo::clear_type() {
  type_ = 0;
}
inline ::AR51::FieldTypeEnum FieldInfo::type() const {
  // @@protoc_insertion_point(field_get:AR51.FieldInfo.Type)
  return static_cast< ::AR51::FieldTypeEnum >(type_);
}
inline void FieldInfo::set_type(::AR51::FieldTypeEnum value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AR51.FieldInfo.Type)
}

// string Value = 3;
inline void FieldInfo::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FieldInfo::value() const {
  // @@protoc_insertion_point(field_get:AR51.FieldInfo.Value)
  return value_.GetNoArena();
}
inline void FieldInfo::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.FieldInfo.Value)
}
inline void FieldInfo::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.FieldInfo.Value)
}
inline void FieldInfo::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.FieldInfo.Value)
}
inline void FieldInfo::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.FieldInfo.Value)
}
inline std::string* FieldInfo::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:AR51.FieldInfo.Value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FieldInfo::release_value() {
  // @@protoc_insertion_point(field_release:AR51.FieldInfo.Value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FieldInfo::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:AR51.FieldInfo.Value)
}

// string Category = 4;
inline void FieldInfo::clear_category() {
  category_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FieldInfo::category() const {
  // @@protoc_insertion_point(field_get:AR51.FieldInfo.Category)
  return category_.GetNoArena();
}
inline void FieldInfo::set_category(const std::string& value) {
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.FieldInfo.Category)
}
inline void FieldInfo::set_category(std::string&& value) {
  
  category_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.FieldInfo.Category)
}
inline void FieldInfo::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.FieldInfo.Category)
}
inline void FieldInfo::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.FieldInfo.Category)
}
inline std::string* FieldInfo::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:AR51.FieldInfo.Category)
  return category_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FieldInfo::release_category() {
  // @@protoc_insertion_point(field_release:AR51.FieldInfo.Category)
  
  return category_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FieldInfo::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:AR51.FieldInfo.Category)
}

// -------------------------------------------------------------------

// HandInfoResponse

// .AR51.HandednessTypes Handedness = 1;
inline void HandInfoResponse::clear_handedness() {
  handedness_ = 0;
}
inline ::AR51::HandednessTypes HandInfoResponse::handedness() const {
  // @@protoc_insertion_point(field_get:AR51.HandInfoResponse.Handedness)
  return static_cast< ::AR51::HandednessTypes >(handedness_);
}
inline void HandInfoResponse::set_handedness(::AR51::HandednessTypes value) {
  
  handedness_ = value;
  // @@protoc_insertion_point(field_set:AR51.HandInfoResponse.Handedness)
}

// bool IsTracked = 2;
inline void HandInfoResponse::clear_istracked() {
  istracked_ = false;
}
inline bool HandInfoResponse::istracked() const {
  // @@protoc_insertion_point(field_get:AR51.HandInfoResponse.IsTracked)
  return istracked_;
}
inline void HandInfoResponse::set_istracked(bool value) {
  
  istracked_ = value;
  // @@protoc_insertion_point(field_set:AR51.HandInfoResponse.IsTracked)
}

// bytes Positions = 3;
inline void HandInfoResponse::clear_positions() {
  positions_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HandInfoResponse::positions() const {
  // @@protoc_insertion_point(field_get:AR51.HandInfoResponse.Positions)
  return positions_.GetNoArena();
}
inline void HandInfoResponse::set_positions(const std::string& value) {
  
  positions_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.HandInfoResponse.Positions)
}
inline void HandInfoResponse::set_positions(std::string&& value) {
  
  positions_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.HandInfoResponse.Positions)
}
inline void HandInfoResponse::set_positions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  positions_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.HandInfoResponse.Positions)
}
inline void HandInfoResponse::set_positions(const void* value, size_t size) {
  
  positions_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.HandInfoResponse.Positions)
}
inline std::string* HandInfoResponse::mutable_positions() {
  
  // @@protoc_insertion_point(field_mutable:AR51.HandInfoResponse.Positions)
  return positions_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HandInfoResponse::release_positions() {
  // @@protoc_insertion_point(field_release:AR51.HandInfoResponse.Positions)
  
  return positions_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HandInfoResponse::set_allocated_positions(std::string* positions) {
  if (positions != nullptr) {
    
  } else {
    
  }
  positions_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), positions);
  // @@protoc_insertion_point(field_set_allocated:AR51.HandInfoResponse.Positions)
}

// bytes Rotations = 4;
inline void HandInfoResponse::clear_rotations() {
  rotations_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HandInfoResponse::rotations() const {
  // @@protoc_insertion_point(field_get:AR51.HandInfoResponse.Rotations)
  return rotations_.GetNoArena();
}
inline void HandInfoResponse::set_rotations(const std::string& value) {
  
  rotations_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.HandInfoResponse.Rotations)
}
inline void HandInfoResponse::set_rotations(std::string&& value) {
  
  rotations_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.HandInfoResponse.Rotations)
}
inline void HandInfoResponse::set_rotations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rotations_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.HandInfoResponse.Rotations)
}
inline void HandInfoResponse::set_rotations(const void* value, size_t size) {
  
  rotations_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.HandInfoResponse.Rotations)
}
inline std::string* HandInfoResponse::mutable_rotations() {
  
  // @@protoc_insertion_point(field_mutable:AR51.HandInfoResponse.Rotations)
  return rotations_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HandInfoResponse::release_rotations() {
  // @@protoc_insertion_point(field_release:AR51.HandInfoResponse.Rotations)
  
  return rotations_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HandInfoResponse::set_allocated_rotations(std::string* rotations) {
  if (rotations != nullptr) {
    
  } else {
    
  }
  rotations_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rotations);
  // @@protoc_insertion_point(field_set_allocated:AR51.HandInfoResponse.Rotations)
}

// bytes Confidence = 5;
inline void HandInfoResponse::clear_confidence() {
  confidence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HandInfoResponse::confidence() const {
  // @@protoc_insertion_point(field_get:AR51.HandInfoResponse.Confidence)
  return confidence_.GetNoArena();
}
inline void HandInfoResponse::set_confidence(const std::string& value) {
  
  confidence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.HandInfoResponse.Confidence)
}
inline void HandInfoResponse::set_confidence(std::string&& value) {
  
  confidence_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.HandInfoResponse.Confidence)
}
inline void HandInfoResponse::set_confidence(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  confidence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.HandInfoResponse.Confidence)
}
inline void HandInfoResponse::set_confidence(const void* value, size_t size) {
  
  confidence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.HandInfoResponse.Confidence)
}
inline std::string* HandInfoResponse::mutable_confidence() {
  
  // @@protoc_insertion_point(field_mutable:AR51.HandInfoResponse.Confidence)
  return confidence_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HandInfoResponse::release_confidence() {
  // @@protoc_insertion_point(field_release:AR51.HandInfoResponse.Confidence)
  
  return confidence_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HandInfoResponse::set_allocated_confidence(std::string* confidence) {
  if (confidence != nullptr) {
    
  } else {
    
  }
  confidence_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), confidence);
  // @@protoc_insertion_point(field_set_allocated:AR51.HandInfoResponse.Confidence)
}

// -------------------------------------------------------------------

// TwoHandsInfoResponse

// .AR51.HandInfoResponse LeftHandInfo = 1;
inline bool TwoHandsInfoResponse::has_lefthandinfo() const {
  return this != internal_default_instance() && lefthandinfo_ != nullptr;
}
inline void TwoHandsInfoResponse::clear_lefthandinfo() {
  if (GetArenaNoVirtual() == nullptr && lefthandinfo_ != nullptr) {
    delete lefthandinfo_;
  }
  lefthandinfo_ = nullptr;
}
inline const ::AR51::HandInfoResponse& TwoHandsInfoResponse::lefthandinfo() const {
  const ::AR51::HandInfoResponse* p = lefthandinfo_;
  // @@protoc_insertion_point(field_get:AR51.TwoHandsInfoResponse.LeftHandInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::HandInfoResponse*>(
      &::AR51::_HandInfoResponse_default_instance_);
}
inline ::AR51::HandInfoResponse* TwoHandsInfoResponse::release_lefthandinfo() {
  // @@protoc_insertion_point(field_release:AR51.TwoHandsInfoResponse.LeftHandInfo)
  
  ::AR51::HandInfoResponse* temp = lefthandinfo_;
  lefthandinfo_ = nullptr;
  return temp;
}
inline ::AR51::HandInfoResponse* TwoHandsInfoResponse::mutable_lefthandinfo() {
  
  if (lefthandinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::HandInfoResponse>(GetArenaNoVirtual());
    lefthandinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.TwoHandsInfoResponse.LeftHandInfo)
  return lefthandinfo_;
}
inline void TwoHandsInfoResponse::set_allocated_lefthandinfo(::AR51::HandInfoResponse* lefthandinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lefthandinfo_;
  }
  if (lefthandinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lefthandinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lefthandinfo, submessage_arena);
    }
    
  } else {
    
  }
  lefthandinfo_ = lefthandinfo;
  // @@protoc_insertion_point(field_set_allocated:AR51.TwoHandsInfoResponse.LeftHandInfo)
}

// .AR51.HandInfoResponse RightHandInfo = 2;
inline bool TwoHandsInfoResponse::has_righthandinfo() const {
  return this != internal_default_instance() && righthandinfo_ != nullptr;
}
inline void TwoHandsInfoResponse::clear_righthandinfo() {
  if (GetArenaNoVirtual() == nullptr && righthandinfo_ != nullptr) {
    delete righthandinfo_;
  }
  righthandinfo_ = nullptr;
}
inline const ::AR51::HandInfoResponse& TwoHandsInfoResponse::righthandinfo() const {
  const ::AR51::HandInfoResponse* p = righthandinfo_;
  // @@protoc_insertion_point(field_get:AR51.TwoHandsInfoResponse.RightHandInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::AR51::HandInfoResponse*>(
      &::AR51::_HandInfoResponse_default_instance_);
}
inline ::AR51::HandInfoResponse* TwoHandsInfoResponse::release_righthandinfo() {
  // @@protoc_insertion_point(field_release:AR51.TwoHandsInfoResponse.RightHandInfo)
  
  ::AR51::HandInfoResponse* temp = righthandinfo_;
  righthandinfo_ = nullptr;
  return temp;
}
inline ::AR51::HandInfoResponse* TwoHandsInfoResponse::mutable_righthandinfo() {
  
  if (righthandinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::AR51::HandInfoResponse>(GetArenaNoVirtual());
    righthandinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AR51.TwoHandsInfoResponse.RightHandInfo)
  return righthandinfo_;
}
inline void TwoHandsInfoResponse::set_allocated_righthandinfo(::AR51::HandInfoResponse* righthandinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete righthandinfo_;
  }
  if (righthandinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      righthandinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, righthandinfo, submessage_arena);
    }
    
  } else {
    
  }
  righthandinfo_ = righthandinfo;
  // @@protoc_insertion_point(field_set_allocated:AR51.TwoHandsInfoResponse.RightHandInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AR51

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AR51::SetPlaceableEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AR51::SetPlaceableEvent>() {
  return ::AR51::SetPlaceableEvent_descriptor();
}
template <> struct is_proto_enum< ::AR51::FieldTypeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AR51::FieldTypeEnum>() {
  return ::AR51::FieldTypeEnum_descriptor();
}
template <> struct is_proto_enum< ::AR51::HandJoints> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AR51::HandJoints>() {
  return ::AR51::HandJoints_descriptor();
}
template <> struct is_proto_enum< ::AR51::HandednessTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AR51::HandednessTypes>() {
  return ::AR51::HandednessTypes_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dgs_2eproto
