// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dgs.proto

#include "dgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_AR51_2eCore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_AR51_2eCore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawRequest_dgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldInfo_dgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HandInfoResponse_dgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InstantiateRequest_dgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaceableDto_dgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AR51_2eCore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_AR51_2eCore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AR51_2eCore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2_AR51_2eCore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AR51_2eCore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_AR51_2eCore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoRecordingSettings_dgs_2eproto;
namespace AR51 {
class GameStateReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameStateReply> _instance;
} _GameStateReply_default_instance_;
class SetupReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetupReply> _instance;
} _SetupReply_default_instance_;
class PlaceableDtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceableDto> _instance;
} _PlaceableDto_default_instance_;
class SetPlaceableRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPlaceableRequest> _instance;
} _SetPlaceableRequest_default_instance_;
class SetPlaceableReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPlaceableReply> _instance;
} _SetPlaceableReply_default_instance_;
class GetRecorderFieldRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRecorderFieldRequest> _instance;
} _GetRecorderFieldRequest_default_instance_;
class SetRecorderFieldRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRecorderFieldRequest> _instance;
} _SetRecorderFieldRequest_default_instance_;
class GetCameraCharacteristicsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCameraCharacteristicsRequest> _instance;
} _GetCameraCharacteristicsRequest_default_instance_;
class GetAllVideoFilesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllVideoFilesResponse> _instance;
} _GetAllVideoFilesResponse_default_instance_;
class StartMediaRecoderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartMediaRecoderRequest> _instance;
} _StartMediaRecoderRequest_default_instance_;
class DownloadVideoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DownloadVideoRequest> _instance;
} _DownloadVideoRequest_default_instance_;
class StartRecordingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartRecordingRequest> _instance;
} _StartRecordingRequest_default_instance_;
class StartRecordingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartRecordingResponse> _instance;
} _StartRecordingResponse_default_instance_;
class VideoRecordingSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoRecordingSettings> _instance;
} _VideoRecordingSettings_default_instance_;
class GetVideoRecordingSettingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVideoRecordingSettingResponse> _instance;
} _GetVideoRecordingSettingResponse_default_instance_;
class CameraFeedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraFeedRequest> _instance;
} _CameraFeedRequest_default_instance_;
class CameraFeedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraFeedResponse> _instance;
} _CameraFeedResponse_default_instance_;
class RenderingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RenderingRequest> _instance;
} _RenderingRequest_default_instance_;
class RenderingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RenderingResponse> _instance;
} _RenderingResponse_default_instance_;
class DrawRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawRequest> _instance;
} _DrawRequest_default_instance_;
class DrawLine2DRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawLine2DRequest> _instance;
} _DrawLine2DRequest_default_instance_;
class DrawLine3DRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawLine3DRequest> _instance;
} _DrawLine3DRequest_default_instance_;
class DrawRectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawRectRequest> _instance;
} _DrawRectRequest_default_instance_;
class DrawCubeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawCubeRequest> _instance;
} _DrawCubeRequest_default_instance_;
class DrawCircleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawCircleRequest> _instance;
} _DrawCircleRequest_default_instance_;
class DrawSphereRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawSphereRequest> _instance;
} _DrawSphereRequest_default_instance_;
class InstantiateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstantiateRequest> _instance;
} _InstantiateRequest_default_instance_;
class CreatePrimitiveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePrimitiveRequest> _instance;
} _CreatePrimitiveRequest_default_instance_;
class NameRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NameRequest> _instance;
} _NameRequest_default_instance_;
class ObjectIdMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectIdMessage> _instance;
} _ObjectIdMessage_default_instance_;
class ActiveMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveMessage> _instance;
} _ActiveMessage_default_instance_;
class SetParentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetParentRequest> _instance;
} _SetParentRequest_default_instance_;
class SetNameRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetNameRequest> _instance;
} _SetNameRequest_default_instance_;
class GetTransformRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTransformRequest> _instance;
} _GetTransformRequest_default_instance_;
class SetTransformRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetTransformRequest> _instance;
} _SetTransformRequest_default_instance_;
class TransformMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransformMessage> _instance;
} _TransformMessage_default_instance_;
class ComponentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComponentRequest> _instance;
} _ComponentRequest_default_instance_;
class ComponentFieldMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComponentFieldMessage> _instance;
} _ComponentFieldMessage_default_instance_;
class SetMaterialTextureRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMaterialTextureRequest> _instance;
} _SetMaterialTextureRequest_default_instance_;
class SetMaterialInt32RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMaterialInt32Request> _instance;
} _SetMaterialInt32Request_default_instance_;
class SetMaterialFloatRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMaterialFloatRequest> _instance;
} _SetMaterialFloatRequest_default_instance_;
class SetMaterialColorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMaterialColorRequest> _instance;
} _SetMaterialColorRequest_default_instance_;
class GetMaterialColorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMaterialColorRequest> _instance;
} _GetMaterialColorRequest_default_instance_;
class SetRendererEnabledRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRendererEnabledRequest> _instance;
} _SetRendererEnabledRequest_default_instance_;
class GetGuardianIdsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGuardianIdsResponse> _instance;
} _GetGuardianIdsResponse_default_instance_;
class GuardianRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuardianRequest> _instance;
} _GuardianRequest_default_instance_;
class GetGuardianResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGuardianResponse> _instance;
} _GetGuardianResponse_default_instance_;
class CreateGuardianRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateGuardianRequest> _instance;
} _CreateGuardianRequest_default_instance_;
class CreateAnchorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAnchorRequest> _instance;
} _CreateAnchorRequest_default_instance_;
class SetAnchorVisiliblityRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAnchorVisiliblityRequest> _instance;
} _SetAnchorVisiliblityRequest_default_instance_;
class AnchorIdsReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnchorIdsReply> _instance;
} _AnchorIdsReply_default_instance_;
class FieldInfosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldInfos> _instance;
} _FieldInfos_default_instance_;
class FieldInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldInfo> _instance;
} _FieldInfo_default_instance_;
class HandInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HandInfoResponse> _instance;
} _HandInfoResponse_default_instance_;
class TwoHandsInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TwoHandsInfoResponse> _instance;
} _TwoHandsInfoResponse_default_instance_;
}  // namespace AR51
static void InitDefaultsscc_info_ActiveMessage_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_ActiveMessage_default_instance_;
    new (ptr) ::AR51::ActiveMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::ActiveMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveMessage_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActiveMessage_dgs_2eproto}, {}};

static void InitDefaultsscc_info_AnchorIdsReply_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_AnchorIdsReply_default_instance_;
    new (ptr) ::AR51::AnchorIdsReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::AnchorIdsReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnchorIdsReply_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AnchorIdsReply_dgs_2eproto}, {}};

static void InitDefaultsscc_info_CameraFeedRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_CameraFeedRequest_default_instance_;
    new (ptr) ::AR51::CameraFeedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::CameraFeedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraFeedRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CameraFeedRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_CameraFeedResponse_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_CameraFeedResponse_default_instance_;
    new (ptr) ::AR51::CameraFeedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::CameraFeedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraFeedResponse_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CameraFeedResponse_dgs_2eproto}, {}};

static void InitDefaultsscc_info_ComponentFieldMessage_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_ComponentFieldMessage_default_instance_;
    new (ptr) ::AR51::ComponentFieldMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::ComponentFieldMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComponentFieldMessage_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ComponentFieldMessage_dgs_2eproto}, {}};

static void InitDefaultsscc_info_ComponentRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_ComponentRequest_default_instance_;
    new (ptr) ::AR51::ComponentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::ComponentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComponentRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ComponentRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_CreateAnchorRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_CreateAnchorRequest_default_instance_;
    new (ptr) ::AR51::CreateAnchorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::CreateAnchorRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateAnchorRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CreateAnchorRequest_dgs_2eproto}, {
      &scc_info_Vector3_AR51_2eCore_2eproto.base,
      &scc_info_Quaternion_AR51_2eCore_2eproto.base,}};

static void InitDefaultsscc_info_CreateGuardianRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_CreateGuardianRequest_default_instance_;
    new (ptr) ::AR51::CreateGuardianRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::CreateGuardianRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateGuardianRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CreateGuardianRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_CreatePrimitiveRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_CreatePrimitiveRequest_default_instance_;
    new (ptr) ::AR51::CreatePrimitiveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::CreatePrimitiveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreatePrimitiveRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CreatePrimitiveRequest_dgs_2eproto}, {
      &scc_info_InstantiateRequest_dgs_2eproto.base,}};

static void InitDefaultsscc_info_DownloadVideoRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_DownloadVideoRequest_default_instance_;
    new (ptr) ::AR51::DownloadVideoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::DownloadVideoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DownloadVideoRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DownloadVideoRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_DrawCircleRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_DrawCircleRequest_default_instance_;
    new (ptr) ::AR51::DrawCircleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::DrawCircleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DrawCircleRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DrawCircleRequest_dgs_2eproto}, {
      &scc_info_DrawRequest_dgs_2eproto.base,
      &scc_info_Vector2_AR51_2eCore_2eproto.base,}};

static void InitDefaultsscc_info_DrawCubeRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_DrawCubeRequest_default_instance_;
    new (ptr) ::AR51::DrawCubeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::DrawCubeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DrawCubeRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DrawCubeRequest_dgs_2eproto}, {
      &scc_info_DrawRequest_dgs_2eproto.base,
      &scc_info_Vector3_AR51_2eCore_2eproto.base,}};

static void InitDefaultsscc_info_DrawLine2DRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_DrawLine2DRequest_default_instance_;
    new (ptr) ::AR51::DrawLine2DRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::DrawLine2DRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DrawLine2DRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DrawLine2DRequest_dgs_2eproto}, {
      &scc_info_DrawRequest_dgs_2eproto.base,
      &scc_info_Vector2_AR51_2eCore_2eproto.base,}};

static void InitDefaultsscc_info_DrawLine3DRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_DrawLine3DRequest_default_instance_;
    new (ptr) ::AR51::DrawLine3DRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::DrawLine3DRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DrawLine3DRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DrawLine3DRequest_dgs_2eproto}, {
      &scc_info_DrawRequest_dgs_2eproto.base,
      &scc_info_Vector3_AR51_2eCore_2eproto.base,}};

static void InitDefaultsscc_info_DrawRectRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_DrawRectRequest_default_instance_;
    new (ptr) ::AR51::DrawRectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::DrawRectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DrawRectRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DrawRectRequest_dgs_2eproto}, {
      &scc_info_DrawRequest_dgs_2eproto.base,
      &scc_info_Vector2_AR51_2eCore_2eproto.base,}};

static void InitDefaultsscc_info_DrawRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_DrawRequest_default_instance_;
    new (ptr) ::AR51::DrawRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::DrawRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DrawRequest_dgs_2eproto}, {
      &scc_info_Color_AR51_2eCore_2eproto.base,}};

static void InitDefaultsscc_info_DrawSphereRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_DrawSphereRequest_default_instance_;
    new (ptr) ::AR51::DrawSphereRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::DrawSphereRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DrawSphereRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DrawSphereRequest_dgs_2eproto}, {
      &scc_info_DrawRequest_dgs_2eproto.base,
      &scc_info_Vector3_AR51_2eCore_2eproto.base,}};

static void InitDefaultsscc_info_FieldInfo_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_FieldInfo_default_instance_;
    new (ptr) ::AR51::FieldInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::FieldInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldInfo_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FieldInfo_dgs_2eproto}, {}};

static void InitDefaultsscc_info_FieldInfos_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_FieldInfos_default_instance_;
    new (ptr) ::AR51::FieldInfos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::FieldInfos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FieldInfos_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FieldInfos_dgs_2eproto}, {
      &scc_info_FieldInfo_dgs_2eproto.base,}};

static void InitDefaultsscc_info_GameStateReply_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_GameStateReply_default_instance_;
    new (ptr) ::AR51::GameStateReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::GameStateReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameStateReply_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GameStateReply_dgs_2eproto}, {}};

static void InitDefaultsscc_info_GetAllVideoFilesResponse_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_GetAllVideoFilesResponse_default_instance_;
    new (ptr) ::AR51::GetAllVideoFilesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::GetAllVideoFilesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllVideoFilesResponse_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetAllVideoFilesResponse_dgs_2eproto}, {}};

static void InitDefaultsscc_info_GetCameraCharacteristicsRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_GetCameraCharacteristicsRequest_default_instance_;
    new (ptr) ::AR51::GetCameraCharacteristicsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::GetCameraCharacteristicsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCameraCharacteristicsRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetCameraCharacteristicsRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_GetGuardianIdsResponse_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_GetGuardianIdsResponse_default_instance_;
    new (ptr) ::AR51::GetGuardianIdsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::GetGuardianIdsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetGuardianIdsResponse_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetGuardianIdsResponse_dgs_2eproto}, {}};

static void InitDefaultsscc_info_GetGuardianResponse_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_GetGuardianResponse_default_instance_;
    new (ptr) ::AR51::GetGuardianResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::GetGuardianResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetGuardianResponse_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetGuardianResponse_dgs_2eproto}, {}};

static void InitDefaultsscc_info_GetMaterialColorRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_GetMaterialColorRequest_default_instance_;
    new (ptr) ::AR51::GetMaterialColorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::GetMaterialColorRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMaterialColorRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetMaterialColorRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_GetRecorderFieldRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_GetRecorderFieldRequest_default_instance_;
    new (ptr) ::AR51::GetRecorderFieldRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::GetRecorderFieldRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRecorderFieldRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetRecorderFieldRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_GetTransformRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_GetTransformRequest_default_instance_;
    new (ptr) ::AR51::GetTransformRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::GetTransformRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTransformRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetTransformRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_GetVideoRecordingSettingResponse_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_GetVideoRecordingSettingResponse_default_instance_;
    new (ptr) ::AR51::GetVideoRecordingSettingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::GetVideoRecordingSettingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetVideoRecordingSettingResponse_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetVideoRecordingSettingResponse_dgs_2eproto}, {
      &scc_info_VideoRecordingSettings_dgs_2eproto.base,}};

static void InitDefaultsscc_info_GuardianRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_GuardianRequest_default_instance_;
    new (ptr) ::AR51::GuardianRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::GuardianRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuardianRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GuardianRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_HandInfoResponse_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_HandInfoResponse_default_instance_;
    new (ptr) ::AR51::HandInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::HandInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HandInfoResponse_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HandInfoResponse_dgs_2eproto}, {}};

static void InitDefaultsscc_info_InstantiateRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_InstantiateRequest_default_instance_;
    new (ptr) ::AR51::InstantiateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::InstantiateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InstantiateRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_InstantiateRequest_dgs_2eproto}, {
      &scc_info_Vector3_AR51_2eCore_2eproto.base,
      &scc_info_Quaternion_AR51_2eCore_2eproto.base,
      &scc_info_Color_AR51_2eCore_2eproto.base,}};

static void InitDefaultsscc_info_NameRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_NameRequest_default_instance_;
    new (ptr) ::AR51::NameRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::NameRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NameRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NameRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_ObjectIdMessage_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_ObjectIdMessage_default_instance_;
    new (ptr) ::AR51::ObjectIdMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::ObjectIdMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectIdMessage_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ObjectIdMessage_dgs_2eproto}, {}};

static void InitDefaultsscc_info_PlaceableDto_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_PlaceableDto_default_instance_;
    new (ptr) ::AR51::PlaceableDto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::PlaceableDto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaceableDto_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlaceableDto_dgs_2eproto}, {}};

static void InitDefaultsscc_info_RenderingRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_RenderingRequest_default_instance_;
    new (ptr) ::AR51::RenderingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::RenderingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RenderingRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RenderingRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_RenderingResponse_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_RenderingResponse_default_instance_;
    new (ptr) ::AR51::RenderingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::RenderingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RenderingResponse_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RenderingResponse_dgs_2eproto}, {}};

static void InitDefaultsscc_info_SetAnchorVisiliblityRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_SetAnchorVisiliblityRequest_default_instance_;
    new (ptr) ::AR51::SetAnchorVisiliblityRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::SetAnchorVisiliblityRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetAnchorVisiliblityRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetAnchorVisiliblityRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_SetMaterialColorRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_SetMaterialColorRequest_default_instance_;
    new (ptr) ::AR51::SetMaterialColorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::SetMaterialColorRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetMaterialColorRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SetMaterialColorRequest_dgs_2eproto}, {
      &scc_info_Color_AR51_2eCore_2eproto.base,}};

static void InitDefaultsscc_info_SetMaterialFloatRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_SetMaterialFloatRequest_default_instance_;
    new (ptr) ::AR51::SetMaterialFloatRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::SetMaterialFloatRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetMaterialFloatRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetMaterialFloatRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_SetMaterialInt32Request_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_SetMaterialInt32Request_default_instance_;
    new (ptr) ::AR51::SetMaterialInt32Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::SetMaterialInt32Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetMaterialInt32Request_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetMaterialInt32Request_dgs_2eproto}, {}};

static void InitDefaultsscc_info_SetMaterialTextureRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_SetMaterialTextureRequest_default_instance_;
    new (ptr) ::AR51::SetMaterialTextureRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::SetMaterialTextureRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetMaterialTextureRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetMaterialTextureRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_SetNameRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_SetNameRequest_default_instance_;
    new (ptr) ::AR51::SetNameRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::SetNameRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetNameRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetNameRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_SetParentRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_SetParentRequest_default_instance_;
    new (ptr) ::AR51::SetParentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::SetParentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetParentRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetParentRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_SetPlaceableReply_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_SetPlaceableReply_default_instance_;
    new (ptr) ::AR51::SetPlaceableReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::SetPlaceableReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetPlaceableReply_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetPlaceableReply_dgs_2eproto}, {}};

static void InitDefaultsscc_info_SetPlaceableRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_SetPlaceableRequest_default_instance_;
    new (ptr) ::AR51::SetPlaceableRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::SetPlaceableRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetPlaceableRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetPlaceableRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_SetRecorderFieldRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_SetRecorderFieldRequest_default_instance_;
    new (ptr) ::AR51::SetRecorderFieldRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::SetRecorderFieldRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRecorderFieldRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetRecorderFieldRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_SetRendererEnabledRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_SetRendererEnabledRequest_default_instance_;
    new (ptr) ::AR51::SetRendererEnabledRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::SetRendererEnabledRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRendererEnabledRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetRendererEnabledRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_SetTransformRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_SetTransformRequest_default_instance_;
    new (ptr) ::AR51::SetTransformRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::SetTransformRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetTransformRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetTransformRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_SetupReply_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_SetupReply_default_instance_;
    new (ptr) ::AR51::SetupReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::SetupReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetupReply_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SetupReply_dgs_2eproto}, {
      &scc_info_PlaceableDto_dgs_2eproto.base,}};

static void InitDefaultsscc_info_StartMediaRecoderRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_StartMediaRecoderRequest_default_instance_;
    new (ptr) ::AR51::StartMediaRecoderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::StartMediaRecoderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartMediaRecoderRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StartMediaRecoderRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_StartRecordingRequest_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_StartRecordingRequest_default_instance_;
    new (ptr) ::AR51::StartRecordingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::StartRecordingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartRecordingRequest_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StartRecordingRequest_dgs_2eproto}, {}};

static void InitDefaultsscc_info_StartRecordingResponse_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_StartRecordingResponse_default_instance_;
    new (ptr) ::AR51::StartRecordingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::StartRecordingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartRecordingResponse_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StartRecordingResponse_dgs_2eproto}, {}};

static void InitDefaultsscc_info_TransformMessage_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_TransformMessage_default_instance_;
    new (ptr) ::AR51::TransformMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::TransformMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransformMessage_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransformMessage_dgs_2eproto}, {}};

static void InitDefaultsscc_info_TwoHandsInfoResponse_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_TwoHandsInfoResponse_default_instance_;
    new (ptr) ::AR51::TwoHandsInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::TwoHandsInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TwoHandsInfoResponse_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TwoHandsInfoResponse_dgs_2eproto}, {
      &scc_info_HandInfoResponse_dgs_2eproto.base,}};

static void InitDefaultsscc_info_VideoRecordingSettings_dgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_VideoRecordingSettings_default_instance_;
    new (ptr) ::AR51::VideoRecordingSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::VideoRecordingSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoRecordingSettings_dgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VideoRecordingSettings_dgs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dgs_2eproto[55];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dgs_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dgs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::GameStateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::GameStateReply, state_),
  PROTOBUF_FIELD_OFFSET(::AR51::GameStateReply, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::SetupReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::SetupReply, placeables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::PlaceableDto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::PlaceableDto, name_),
  PROTOBUF_FIELD_OFFSET(::AR51::PlaceableDto, icon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::SetPlaceableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::SetPlaceableRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::SetPlaceableReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::SetPlaceableReply, event_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetPlaceableReply, anchorid_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetPlaceableReply, errormessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::GetRecorderFieldRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::GetRecorderFieldRequest, fieldname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::SetRecorderFieldRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::SetRecorderFieldRequest, fieldname_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetRecorderFieldRequest, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::GetCameraCharacteristicsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::GetCameraCharacteristicsRequest, fieldname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::GetAllVideoFilesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::GetAllVideoFilesResponse, filenames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::StartMediaRecoderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::StartMediaRecoderRequest, starttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::DownloadVideoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::DownloadVideoRequest, filename_),
  PROTOBUF_FIELD_OFFSET(::AR51::DownloadVideoRequest, packetsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::StartRecordingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::StartRecordingRequest, filename_),
  PROTOBUF_FIELD_OFFSET(::AR51::StartRecordingRequest, usebestsetting_),
  PROTOBUF_FIELD_OFFSET(::AR51::StartRecordingRequest, cameraid_),
  PROTOBUF_FIELD_OFFSET(::AR51::StartRecordingRequest, width_),
  PROTOBUF_FIELD_OFFSET(::AR51::StartRecordingRequest, height_),
  PROTOBUF_FIELD_OFFSET(::AR51::StartRecordingRequest, framerate_),
  PROTOBUF_FIELD_OFFSET(::AR51::StartRecordingRequest, maxduration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::StartRecordingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::StartRecordingResponse, filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::VideoRecordingSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::VideoRecordingSettings, cameraid_),
  PROTOBUF_FIELD_OFFSET(::AR51::VideoRecordingSettings, width_),
  PROTOBUF_FIELD_OFFSET(::AR51::VideoRecordingSettings, height_),
  PROTOBUF_FIELD_OFFSET(::AR51::VideoRecordingSettings, framerate_),
  PROTOBUF_FIELD_OFFSET(::AR51::VideoRecordingSettings, lensfacing_),
  PROTOBUF_FIELD_OFFSET(::AR51::VideoRecordingSettings, ishighspeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::GetVideoRecordingSettingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::GetVideoRecordingSettingResponse, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::CameraFeedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::CameraFeedRequest, jpgquality_),
  PROTOBUF_FIELD_OFFSET(::AR51::CameraFeedRequest, maxwidth_),
  PROTOBUF_FIELD_OFFSET(::AR51::CameraFeedRequest, maxheight_),
  PROTOBUF_FIELD_OFFSET(::AR51::CameraFeedRequest, framerate_),
  PROTOBUF_FIELD_OFFSET(::AR51::CameraFeedRequest, hologramsenabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::CameraFeedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::CameraFeedResponse, id_),
  PROTOBUF_FIELD_OFFSET(::AR51::CameraFeedResponse, cameratoworld_),
  PROTOBUF_FIELD_OFFSET(::AR51::CameraFeedResponse, projection_),
  PROTOBUF_FIELD_OFFSET(::AR51::CameraFeedResponse, jpg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::RenderingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::RenderingRequest, cameraid_),
  PROTOBUF_FIELD_OFFSET(::AR51::RenderingRequest, ipaddress_),
  PROTOBUF_FIELD_OFFSET(::AR51::RenderingRequest, port_),
  PROTOBUF_FIELD_OFFSET(::AR51::RenderingRequest, width_),
  PROTOBUF_FIELD_OFFSET(::AR51::RenderingRequest, height_),
  PROTOBUF_FIELD_OFFSET(::AR51::RenderingRequest, framerate_),
  PROTOBUF_FIELD_OFFSET(::AR51::RenderingRequest, jpgquality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::RenderingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::RenderingResponse, jpg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::DrawRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::DrawRequest, text_),
  PROTOBUF_FIELD_OFFSET(::AR51::DrawRequest, linewidth_),
  PROTOBUF_FIELD_OFFSET(::AR51::DrawRequest, color_),
  PROTOBUF_FIELD_OFFSET(::AR51::DrawRequest, fillcolor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::DrawLine2DRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::DrawLine2DRequest, settings_),
  PROTOBUF_FIELD_OFFSET(::AR51::DrawLine2DRequest, from_),
  PROTOBUF_FIELD_OFFSET(::AR51::DrawLine2DRequest, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::DrawLine3DRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::DrawLine3DRequest, settings_),
  PROTOBUF_FIELD_OFFSET(::AR51::DrawLine3DRequest, from_),
  PROTOBUF_FIELD_OFFSET(::AR51::DrawLine3DRequest, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::DrawRectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::DrawRectRequest, settings_),
  PROTOBUF_FIELD_OFFSET(::AR51::DrawRectRequest, center_),
  PROTOBUF_FIELD_OFFSET(::AR51::DrawRectRequest, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::DrawCubeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::DrawCubeRequest, settings_),
  PROTOBUF_FIELD_OFFSET(::AR51::DrawCubeRequest, center_),
  PROTOBUF_FIELD_OFFSET(::AR51::DrawCubeRequest, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::DrawCircleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::DrawCircleRequest, settings_),
  PROTOBUF_FIELD_OFFSET(::AR51::DrawCircleRequest, center_),
  PROTOBUF_FIELD_OFFSET(::AR51::DrawCircleRequest, radius_),
  PROTOBUF_FIELD_OFFSET(::AR51::DrawCircleRequest, segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::DrawSphereRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::DrawSphereRequest, settings_),
  PROTOBUF_FIELD_OFFSET(::AR51::DrawSphereRequest, center_),
  PROTOBUF_FIELD_OFFSET(::AR51::DrawSphereRequest, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::InstantiateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::InstantiateRequest, name_),
  PROTOBUF_FIELD_OFFSET(::AR51::InstantiateRequest, position_),
  PROTOBUF_FIELD_OFFSET(::AR51::InstantiateRequest, rotation_),
  PROTOBUF_FIELD_OFFSET(::AR51::InstantiateRequest, scale_),
  PROTOBUF_FIELD_OFFSET(::AR51::InstantiateRequest, parentid_),
  PROTOBUF_FIELD_OFFSET(::AR51::InstantiateRequest, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::CreatePrimitiveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::CreatePrimitiveRequest, pritmivetype_),
  PROTOBUF_FIELD_OFFSET(::AR51::CreatePrimitiveRequest, instance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::NameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::NameRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::ObjectIdMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::ObjectIdMessage, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::ActiveMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::ActiveMessage, id_),
  PROTOBUF_FIELD_OFFSET(::AR51::ActiveMessage, isactive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::SetParentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::SetParentRequest, id_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetParentRequest, parentid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::SetNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::SetNameRequest, id_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetNameRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::GetTransformRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::GetTransformRequest, gameobjectid_),
  PROTOBUF_FIELD_OFFSET(::AR51::GetTransformRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::SetTransformRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::SetTransformRequest, gameobjectid_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetTransformRequest, type_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetTransformRequest, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::TransformMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::TransformMessage, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::ComponentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::ComponentRequest, gameobjectid_),
  PROTOBUF_FIELD_OFFSET(::AR51::ComponentRequest, componenttype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::ComponentFieldMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::ComponentFieldMessage, componentid_),
  PROTOBUF_FIELD_OFFSET(::AR51::ComponentFieldMessage, fieldname_),
  PROTOBUF_FIELD_OFFSET(::AR51::ComponentFieldMessage, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialTextureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialTextureRequest, gameobjectid_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialTextureRequest, texturename_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialTextureRequest, jpg_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialTextureRequest, destroycurrenttexture_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialTextureRequest, shared_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialInt32Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialInt32Request, gameobjectid_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialInt32Request, name_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialInt32Request, value_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialInt32Request, shared_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialFloatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialFloatRequest, gameobjectid_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialFloatRequest, name_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialFloatRequest, value_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialFloatRequest, shared_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialColorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialColorRequest, gameobjectid_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialColorRequest, color_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialColorRequest, name_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetMaterialColorRequest, shared_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::GetMaterialColorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::GetMaterialColorRequest, gameobjectid_),
  PROTOBUF_FIELD_OFFSET(::AR51::GetMaterialColorRequest, name_),
  PROTOBUF_FIELD_OFFSET(::AR51::GetMaterialColorRequest, shared_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::SetRendererEnabledRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::SetRendererEnabledRequest, gameobjectid_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetRendererEnabledRequest, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::GetGuardianIdsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::GetGuardianIdsResponse, guardianids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::GuardianRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::GuardianRequest, guardianid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::GetGuardianResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::GetGuardianResponse, guardianid_),
  PROTOBUF_FIELD_OFFSET(::AR51::GetGuardianResponse, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::CreateGuardianRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::CreateGuardianRequest, guardianid_),
  PROTOBUF_FIELD_OFFSET(::AR51::CreateGuardianRequest, points_),
  PROTOBUF_FIELD_OFFSET(::AR51::CreateGuardianRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::CreateAnchorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::CreateAnchorRequest, anchorid_),
  PROTOBUF_FIELD_OFFSET(::AR51::CreateAnchorRequest, parentid_),
  PROTOBUF_FIELD_OFFSET(::AR51::CreateAnchorRequest, position_),
  PROTOBUF_FIELD_OFFSET(::AR51::CreateAnchorRequest, rotation_),
  PROTOBUF_FIELD_OFFSET(::AR51::CreateAnchorRequest, visible_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::SetAnchorVisiliblityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::SetAnchorVisiliblityRequest, anchorid_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetAnchorVisiliblityRequest, visible_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::AnchorIdsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::AnchorIdsReply, anchorids_),
  PROTOBUF_FIELD_OFFSET(::AR51::AnchorIdsReply, visibleanchorids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::FieldInfos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::FieldInfos, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::FieldInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::FieldInfo, name_),
  PROTOBUF_FIELD_OFFSET(::AR51::FieldInfo, type_),
  PROTOBUF_FIELD_OFFSET(::AR51::FieldInfo, value_),
  PROTOBUF_FIELD_OFFSET(::AR51::FieldInfo, category_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::HandInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::HandInfoResponse, handedness_),
  PROTOBUF_FIELD_OFFSET(::AR51::HandInfoResponse, istracked_),
  PROTOBUF_FIELD_OFFSET(::AR51::HandInfoResponse, positions_),
  PROTOBUF_FIELD_OFFSET(::AR51::HandInfoResponse, rotations_),
  PROTOBUF_FIELD_OFFSET(::AR51::HandInfoResponse, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::TwoHandsInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::TwoHandsInfoResponse, lefthandinfo_),
  PROTOBUF_FIELD_OFFSET(::AR51::TwoHandsInfoResponse, righthandinfo_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas6[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AR51::GameStateReply)},
  { 7, -1, sizeof(::AR51::SetupReply)},
  { 13, -1, sizeof(::AR51::PlaceableDto)},
  { 20, -1, sizeof(::AR51::SetPlaceableRequest)},
  { 26, -1, sizeof(::AR51::SetPlaceableReply)},
  { 34, -1, sizeof(::AR51::GetRecorderFieldRequest)},
  { 40, -1, sizeof(::AR51::SetRecorderFieldRequest)},
  { 47, -1, sizeof(::AR51::GetCameraCharacteristicsRequest)},
  { 53, -1, sizeof(::AR51::GetAllVideoFilesResponse)},
  { 59, -1, sizeof(::AR51::StartMediaRecoderRequest)},
  { 65, -1, sizeof(::AR51::DownloadVideoRequest)},
  { 72, -1, sizeof(::AR51::StartRecordingRequest)},
  { 84, -1, sizeof(::AR51::StartRecordingResponse)},
  { 90, -1, sizeof(::AR51::VideoRecordingSettings)},
  { 101, -1, sizeof(::AR51::GetVideoRecordingSettingResponse)},
  { 107, -1, sizeof(::AR51::CameraFeedRequest)},
  { 117, -1, sizeof(::AR51::CameraFeedResponse)},
  { 126, -1, sizeof(::AR51::RenderingRequest)},
  { 138, -1, sizeof(::AR51::RenderingResponse)},
  { 144, -1, sizeof(::AR51::DrawRequest)},
  { 153, -1, sizeof(::AR51::DrawLine2DRequest)},
  { 161, -1, sizeof(::AR51::DrawLine3DRequest)},
  { 169, -1, sizeof(::AR51::DrawRectRequest)},
  { 177, -1, sizeof(::AR51::DrawCubeRequest)},
  { 185, -1, sizeof(::AR51::DrawCircleRequest)},
  { 194, -1, sizeof(::AR51::DrawSphereRequest)},
  { 202, -1, sizeof(::AR51::InstantiateRequest)},
  { 213, -1, sizeof(::AR51::CreatePrimitiveRequest)},
  { 220, -1, sizeof(::AR51::NameRequest)},
  { 226, -1, sizeof(::AR51::ObjectIdMessage)},
  { 232, -1, sizeof(::AR51::ActiveMessage)},
  { 239, -1, sizeof(::AR51::SetParentRequest)},
  { 246, -1, sizeof(::AR51::SetNameRequest)},
  { 253, -1, sizeof(::AR51::GetTransformRequest)},
  { 260, -1, sizeof(::AR51::SetTransformRequest)},
  { 268, -1, sizeof(::AR51::TransformMessage)},
  { 274, -1, sizeof(::AR51::ComponentRequest)},
  { 281, -1, sizeof(::AR51::ComponentFieldMessage)},
  { 289, -1, sizeof(::AR51::SetMaterialTextureRequest)},
  { 299, -1, sizeof(::AR51::SetMaterialInt32Request)},
  { 308, -1, sizeof(::AR51::SetMaterialFloatRequest)},
  { 317, -1, sizeof(::AR51::SetMaterialColorRequest)},
  { 326, -1, sizeof(::AR51::GetMaterialColorRequest)},
  { 334, -1, sizeof(::AR51::SetRendererEnabledRequest)},
  { 341, -1, sizeof(::AR51::GetGuardianIdsResponse)},
  { 347, -1, sizeof(::AR51::GuardianRequest)},
  { 353, -1, sizeof(::AR51::GetGuardianResponse)},
  { 360, -1, sizeof(::AR51::CreateGuardianRequest)},
  { 368, -1, sizeof(::AR51::CreateAnchorRequest)},
  { 378, -1, sizeof(::AR51::SetAnchorVisiliblityRequest)},
  { 385, -1, sizeof(::AR51::AnchorIdsReply)},
  { 392, -1, sizeof(::AR51::FieldInfos)},
  { 398, -1, sizeof(::AR51::FieldInfo)},
  { 407, -1, sizeof(::AR51::HandInfoResponse)},
  { 417, -1, sizeof(::AR51::TwoHandsInfoResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances6[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_GameStateReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_SetupReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_PlaceableDto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_SetPlaceableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_SetPlaceableReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_GetRecorderFieldRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_SetRecorderFieldRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_GetCameraCharacteristicsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_GetAllVideoFilesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_StartMediaRecoderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_DownloadVideoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_StartRecordingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_StartRecordingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_VideoRecordingSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_GetVideoRecordingSettingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_CameraFeedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_CameraFeedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_RenderingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_RenderingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_DrawRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_DrawLine2DRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_DrawLine3DRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_DrawRectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_DrawCubeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_DrawCircleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_DrawSphereRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_InstantiateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_CreatePrimitiveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_NameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_ObjectIdMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_ActiveMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_SetParentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_SetNameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_GetTransformRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_SetTransformRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_TransformMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_ComponentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_ComponentFieldMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_SetMaterialTextureRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_SetMaterialInt32Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_SetMaterialFloatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_SetMaterialColorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_GetMaterialColorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_SetRendererEnabledRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_GetGuardianIdsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_GuardianRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_GetGuardianResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_CreateGuardianRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_CreateAnchorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_SetAnchorVisiliblityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_AnchorIdsReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_FieldInfos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_FieldInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_HandInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_TwoHandsInfoResponse_default_instance_),
};

const char descriptor_table_protodef_dgs_2eproto[] =
  "\n\tdgs.proto\022\004AR51\032\016dgsEnums.proto\032\017AR51."
  "Core.proto\"A\n\016GameStateReply\022\036\n\005State\030\001 "
  "\001(\0162\017.AR51.GameState\022\017\n\007Message\030\002 \001(\t\"4\n"
  "\nSetupReply\022&\n\nPlaceables\030\001 \003(\0132\022.AR51.P"
  "laceableDto\"*\n\014PlaceableDto\022\014\n\004Name\030\001 \001("
  "\t\022\014\n\004Icon\030\002 \001(\t\"#\n\023SetPlaceableRequest\022\014"
  "\n\004Name\030\001 \001(\t\"c\n\021SetPlaceableReply\022&\n\005Eve"
  "nt\030\001 \001(\0162\027.AR51.SetPlaceableEvent\022\020\n\010Anc"
  "horId\030\002 \001(\t\022\024\n\014ErrorMessage\030\003 \001(\t\",\n\027Get"
  "RecorderFieldRequest\022\021\n\tFieldName\030\001 \001(\t\""
  ";\n\027SetRecorderFieldRequest\022\021\n\tFieldName\030"
  "\001 \001(\t\022\r\n\005Value\030\002 \001(\014\"4\n\037GetCameraCharact"
  "eristicsRequest\022\021\n\tFieldName\030\001 \001(\t\"-\n\030Ge"
  "tAllVideoFilesResponse\022\021\n\tFileNames\030\001 \003("
  "\t\"-\n\030StartMediaRecoderRequest\022\021\n\tStartTi"
  "me\030\001 \001(\001\"<\n\024DownloadVideoRequest\022\020\n\010File"
  "Name\030\001 \001(\t\022\022\n\nPacketSize\030\002 \001(\005\"\232\001\n\025Start"
  "RecordingRequest\022\020\n\010FileName\030\001 \001(\t\022\026\n\016us"
  "eBestSetting\030\002 \001(\010\022\020\n\010CameraId\030\003 \001(\t\022\r\n\005"
  "width\030\004 \001(\005\022\016\n\006height\030\005 \001(\005\022\021\n\tFrameRate"
  "\030\006 \001(\005\022\023\n\013maxDuration\030\007 \001(\002\"*\n\026StartReco"
  "rdingResponse\022\020\n\010FileName\030\001 \001(\t\"\227\001\n\026Vide"
  "oRecordingSettings\022\020\n\010CameraId\030\001 \001(\t\022\r\n\005"
  "Width\030\002 \001(\005\022\016\n\006Height\030\003 \001(\005\022\021\n\tFrameRate"
  "\030\004 \001(\005\022$\n\nLensFacing\030\005 \001(\0162\020.AR51.LensFa"
  "cing\022\023\n\013IsHighSpeed\030\006 \001(\010\"R\n GetVideoRec"
  "ordingSettingResponse\022.\n\010Settings\030\001 \003(\0132"
  "\034.AR51.VideoRecordingSettings\"y\n\021CameraF"
  "eedRequest\022\022\n\nJpgQuality\030\001 \001(\005\022\020\n\010MaxWid"
  "th\030\002 \001(\005\022\021\n\tMaxHeight\030\003 \001(\005\022\021\n\tFrameRate"
  "\030\004 \001(\005\022\030\n\020HologramsEnabled\030\005 \001(\010\"X\n\022Came"
  "raFeedResponse\022\n\n\002Id\030\001 \001(\005\022\025\n\rCameraToWo"
  "rld\030\002 \001(\014\022\022\n\nProjection\030\003 \001(\014\022\013\n\003Jpg\030\004 \001"
  "(\014\"\213\001\n\020RenderingRequest\022\020\n\010CameraId\030\001 \001("
  "\t\022\021\n\tIpAddress\030\002 \001(\t\022\014\n\004Port\030\003 \001(\005\022\r\n\005Wi"
  "dth\030\004 \001(\005\022\016\n\006Height\030\005 \001(\005\022\021\n\tFrameRate\030\006"
  " \001(\005\022\022\n\nJpgQuality\030\007 \001(\005\" \n\021RenderingRes"
  "ponse\022\013\n\003Jpg\030\001 \001(\014\"j\n\013DrawRequest\022\014\n\004Tex"
  "t\030\001 \001(\t\022\021\n\tLineWidth\030\002 \001(\002\022\032\n\005Color\030\003 \001("
  "\0132\013.AR51.Color\022\036\n\tFillColor\030\004 \001(\0132\013.AR51"
  ".Color\"p\n\021DrawLine2DRequest\022#\n\010Settings\030"
  "\001 \001(\0132\021.AR51.DrawRequest\022\033\n\004From\030\002 \001(\0132\r"
  ".AR51.Vector2\022\031\n\002To\030\003 \001(\0132\r.AR51.Vector2"
  "\"p\n\021DrawLine3DRequest\022#\n\010Settings\030\001 \001(\0132"
  "\021.AR51.DrawRequest\022\033\n\004From\030\002 \001(\0132\r.AR51."
  "Vector3\022\031\n\002To\030\003 \001(\0132\r.AR51.Vector3\"r\n\017Dr"
  "awRectRequest\022#\n\010Settings\030\001 \001(\0132\021.AR51.D"
  "rawRequest\022\035\n\006Center\030\002 \001(\0132\r.AR51.Vector"
  "2\022\033\n\004Size\030\003 \001(\0132\r.AR51.Vector2\"r\n\017DrawCu"
  "beRequest\022#\n\010Settings\030\001 \001(\0132\021.AR51.DrawR"
  "equest\022\035\n\006Center\030\002 \001(\0132\r.AR51.Vector3\022\033\n"
  "\004Size\030\003 \001(\0132\r.AR51.Vector3\"y\n\021DrawCircle"
  "Request\022#\n\010Settings\030\001 \001(\0132\021.AR51.DrawReq"
  "uest\022\035\n\006Center\030\002 \001(\0132\r.AR51.Vector2\022\016\n\006R"
  "adius\030\003 \001(\002\022\020\n\010Segments\030\004 \001(\005\"g\n\021DrawSph"
  "ereRequest\022#\n\010Settings\030\001 \001(\0132\021.AR51.Draw"
  "Request\022\035\n\006Center\030\002 \001(\0132\r.AR51.Vector3\022\016"
  "\n\006Radius\030\003 \001(\002\"\263\001\n\022InstantiateRequest\022\014\n"
  "\004Name\030\001 \001(\t\022\037\n\010Position\030\002 \001(\0132\r.AR51.Vec"
  "tor3\022\"\n\010Rotation\030\003 \001(\0132\020.AR51.Quaternion"
  "\022\034\n\005Scale\030\004 \001(\0132\r.AR51.Vector3\022\020\n\010Parent"
  "Id\030\005 \001(\003\022\032\n\005color\030\006 \001(\0132\013.AR51.Color\"o\n\026"
  "CreatePrimitiveRequest\022)\n\014pritmiveType\030\001"
  " \001(\0162\023.AR51.PrimitiveType\022*\n\010Instance\030\002 "
  "\001(\0132\030.AR51.InstantiateRequest\"\033\n\013NameReq"
  "uest\022\014\n\004Name\030\001 \001(\t\"\035\n\017ObjectIdMessage\022\n\n"
  "\002Id\030\001 \001(\003\"-\n\rActiveMessage\022\n\n\002Id\030\001 \001(\003\022\020"
  "\n\010IsActive\030\002 \001(\010\"0\n\020SetParentRequest\022\n\n\002"
  "Id\030\001 \001(\003\022\020\n\010parentId\030\002 \001(\003\"*\n\016SetNameReq"
  "uest\022\n\n\002Id\030\001 \001(\003\022\014\n\004Name\030\002 \001(\t\"O\n\023GetTra"
  "nsformRequest\022\024\n\014GameObjectId\030\001 \001(\003\022\"\n\004T"
  "ype\030\002 \001(\0162\024.AR51.TransformTypes\"^\n\023SetTr"
  "ansformRequest\022\024\n\014GameObjectId\030\001 \001(\003\022\"\n\004"
  "Type\030\002 \001(\0162\024.AR51.TransformTypes\022\r\n\005Valu"
  "e\030\003 \001(\014\"!\n\020TransformMessage\022\r\n\005Value\030\001 \001"
  "(\014\"\?\n\020ComponentRequest\022\024\n\014GameObjectId\030\001"
  " \001(\003\022\025\n\rComponentType\030\002 \001(\t\"N\n\025Component"
  "FieldMessage\022\023\n\013ComponentId\030\001 \001(\003\022\021\n\tFie"
  "ldName\030\002 \001(\t\022\r\n\005Value\030\003 \001(\014\"\202\001\n\031SetMater"
  "ialTextureRequest\022\024\n\014GameObjectId\030\001 \001(\003\022"
  "\023\n\013TextureName\030\002 \001(\t\022\013\n\003Jpg\030\003 \001(\014\022\035\n\025Des"
  "troyCurrentTexture\030\004 \001(\010\022\016\n\006Shared\030\005 \001(\010"
  "\"\\\n\027SetMaterialInt32Request\022\024\n\014GameObjec"
  "tId\030\001 \001(\003\022\014\n\004Name\030\002 \001(\t\022\r\n\005Value\030\003 \001(\005\022\016"
  "\n\006Shared\030\004 \001(\010\"\\\n\027SetMaterialFloatReques"
  "t\022\024\n\014GameObjectId\030\001 \001(\003\022\014\n\004Name\030\002 \001(\t\022\r\n"
  "\005Value\030\003 \001(\002\022\016\n\006Shared\030\004 \001(\010\"i\n\027SetMater"
  "ialColorRequest\022\024\n\014GameObjectId\030\001 \001(\003\022\032\n"
  "\005color\030\002 \001(\0132\013.AR51.Color\022\014\n\004Name\030\003 \001(\t\022"
  "\016\n\006Shared\030\004 \001(\010\"M\n\027GetMaterialColorReque"
  "st\022\024\n\014GameObjectId\030\001 \001(\003\022\014\n\004Name\030\002 \001(\t\022\016"
  "\n\006Shared\030\003 \001(\010\"B\n\031SetRendererEnabledRequ"
  "est\022\024\n\014GameObjectId\030\001 \001(\003\022\017\n\007Enabled\030\002 \001"
  "(\010\"-\n\026GetGuardianIdsResponse\022\023\n\013Guardian"
  "Ids\030\001 \003(\t\"%\n\017GuardianRequest\022\022\n\nGuardian"
  "Id\030\001 \001(\t\"9\n\023GetGuardianResponse\022\022\n\nGuard"
  "ianId\030\001 \001(\t\022\016\n\006Points\030\002 \001(\014\"K\n\025CreateGua"
  "rdianRequest\022\022\n\nGuardianId\030\001 \001(\t\022\016\n\006Poin"
  "ts\030\002 \001(\014\022\016\n\006Height\030\003 \001(\002\"\217\001\n\023CreateAncho"
  "rRequest\022\020\n\010AnchorId\030\001 \001(\t\022\020\n\010ParentId\030\002"
  " \001(\t\022\037\n\010Position\030\003 \001(\0132\r.AR51.Vector3\022\"\n"
  "\010Rotation\030\004 \001(\0132\020.AR51.Quaternion\022\017\n\007Vis"
  "ible\030\005 \001(\010\"@\n\033SetAnchorVisiliblityReques"
  "t\022\020\n\010AnchorId\030\001 \001(\t\022\017\n\007Visible\030\002 \001(\010\"=\n\016"
  "AnchorIdsReply\022\021\n\tAnchorIds\030\001 \003(\t\022\030\n\020Vis"
  "ibleAnchorIds\030\002 \003(\t\"-\n\nFieldInfos\022\037\n\006Fie"
  "lds\030\001 \003(\0132\017.AR51.FieldInfo\"]\n\tFieldInfo\022"
  "\014\n\004Name\030\001 \001(\t\022!\n\004Type\030\002 \001(\0162\023.AR51.Field"
  "TypeEnum\022\r\n\005Value\030\003 \001(\t\022\020\n\010Category\030\004 \001("
  "\t\"\212\001\n\020HandInfoResponse\022)\n\nHandedness\030\001 \001"
  "(\0162\025.AR51.HandednessTypes\022\021\n\tIsTracked\030\002"
  " \001(\010\022\021\n\tPositions\030\003 \001(\014\022\021\n\tRotations\030\004 \001"
  "(\014\022\022\n\nConfidence\030\005 \001(\014\"s\n\024TwoHandsInfoRe"
  "sponse\022,\n\014LeftHandInfo\030\001 \001(\0132\026.AR51.Hand"
  "InfoResponse\022-\n\rRightHandInfo\030\002 \001(\0132\026.AR"
  "51.HandInfoResponse*R\n\021SetPlaceableEvent"
  "\022\024\n\020PlacingCompleted\020\000\022\024\n\020PlacingCancell"
  "ed\020\001\022\021\n\rPlacingFailed\020\002*P\n\rFieldTypeEnum"
  "\022\017\n\013BooleanType\020\000\022\017\n\013Float32Type\020\001\022\r\n\tIn"
  "t32Type\020\002\022\016\n\nStringType\020\003*\205\004\n\nHandJoints"
  "\022\010\n\004None\020\000\022\t\n\005Wrist\020\001\022\010\n\004Palm\020\002\022\030\n\024Thumb"
  "MetacarpalJoint\020\003\022\026\n\022ThumbProximalJoint\020"
  "\004\022\024\n\020ThumbDistalJoint\020\005\022\014\n\010ThumbTip\020\006\022\023\n"
  "\017IndexMetacarpal\020\007\022\020\n\014IndexKnuckle\020\010\022\024\n\020"
  "IndexMiddleJoint\020\t\022\024\n\020IndexDistalJoint\020\n"
  "\022\014\n\010IndexTip\020\013\022\024\n\020MiddleMetacarpal\020\014\022\021\n\r"
  "MiddleKnuckle\020\r\022\025\n\021MiddleMiddleJoint\020\016\022\025"
  "\n\021MiddleDistalJoint\020\017\022\r\n\tMiddleTip\020\020\022\022\n\016"
  "RingMetacarpal\020\021\022\017\n\013RingKnuckle\020\022\022\023\n\017Rin"
  "gMiddleJoint\020\023\022\023\n\017RingDistalJoint\020\024\022\013\n\007R"
  "ingTip\020\025\022\023\n\017PinkyMetacarpal\020\026\022\020\n\014PinkyKn"
  "uckle\020\027\022\024\n\020PinkyMiddleJoint\020\030\022\024\n\020PinkyDi"
  "stalJoint\020\031\022\014\n\010PinkyTip\020\032*:\n\017HandednessT"
  "ypes\022\n\n\006NoHand\020\000\022\014\n\010LeftHand\020\001\022\r\n\tRightH"
  "and\020\0022\333\003\n\013GameService\022&\n\nEnterLobby\022\013.AR"
  "51.Empty\032\013.AR51.Empty\022!\n\005Start\022\013.AR51.Em"
  "pty\032\013.AR51.Empty\022 \n\004Stop\022\013.AR51.Empty\032\013."
  "AR51.Empty\0225\n\016ListenToEvents\022\013.AR51.Empt"
  "y\032\024.AR51.GameStateReply0\001\022-\n\010GetState\022\013."
  "AR51.Empty\032\024.AR51.GameStateReply\022&\n\005Setu"
  "p\022\013.AR51.Empty\032\020.AR51.SetupReply\022\'\n\013Canc"
  "elSetup\022\013.AR51.Empty\032\013.AR51.Empty\022B\n\014Set"
  "Placeable\022\031.AR51.SetPlaceableRequest\032\027.A"
  "R51.SetPlaceableReply\0221\n\rSetPlayerName\022\023"
  ".AR51.StringMessage\032\013.AR51.Empty\0221\n\rGetP"
  "layerName\022\013.AR51.Empty\032\023.AR51.StringMess"
  "age2\267\020\n\rCameraService\022E\n\016StartStreaming\022"
  "\027.AR51.CameraFeedRequest\032\030.AR51.CameraFe"
  "edResponse0\001\022;\n\026StartRecorderStreaming\022\013"
  ".AR51.Empty\032\022.AR51.BytesMessage0\001\0220\n\016Get"
  "IsStreaming\022\013.AR51.Empty\032\021.AR51.BoolMess"
  "age\0225\n\023GetHologramsEnabled\022\013.AR51.Empty\032"
  "\021.AR51.BoolMessage\0225\n\023SetHologramsEnable"
  "d\022\021.AR51.BoolMessage\032\013.AR51.Empty\0222\n\017Get"
  "PreviewWidth\022\013.AR51.Empty\032\022.AR51.Int32Me"
  "ssage\0222\n\017SetPreviewWidth\022\022.AR51.Int32Mes"
  "sage\032\013.AR51.Empty\0223\n\020GetPreviewHeight\022\013."
  "AR51.Empty\032\022.AR51.Int32Message\0223\n\020SetPre"
  "viewHeight\022\022.AR51.Int32Message\032\013.AR51.Em"
  "pty\0221\n\017GetExposureLock\022\013.AR51.Empty\032\021.AR"
  "51.BoolMessage\0221\n\017SetExposureLock\022\021.AR51"
  ".BoolMessage\032\013.AR51.Empty\0227\n\022GetExposure"
  "BiasMin\022\013.AR51.Empty\032\024.AR51.Float32Messa"
  "ge\0227\n\022GetExposureBiasMax\022\013.AR51.Empty\032\024."
  "AR51.Float32Message\0224\n\017GetExposureBias\022\013"
  ".AR51.Empty\032\024.AR51.Float32Message\0224\n\017Set"
  "ExposureBias\022\024.AR51.Float32Message\032\013.AR5"
  "1.Empty\022.\n\014GetAutoFocus\022\013.AR51.Empty\032\021.A"
  "R51.BoolMessage\022.\n\014SetAutoFocus\022\021.AR51.B"
  "oolMessage\032\013.AR51.Empty\0220\n\016GetIsRecordin"
  "g\022\013.AR51.Empty\032\021.AR51.BoolMessage\0225\n\023Get"
  "IsRecordingReady\022\013.AR51.Empty\032\021.AR51.Boo"
  "lMessage\0228\n\026GetAutoExposureEnabled\022\013.AR5"
  "1.Empty\032\021.AR51.BoolMessage\0228\n\026SetAutoExp"
  "osureEnabled\022\021.AR51.BoolMessage\032\013.AR51.E"
  "mpty\0228\n\025GetSensorExposureTime\022\013.AR51.Emp"
  "ty\032\022.AR51.Int64Message\0228\n\025SetSensorExpos"
  "ureTime\022\022.AR51.Int64Message\032\013.AR51.Empty"
  "\0227\n\024GetSensorSensitivity\022\013.AR51.Empty\032\022."
  "AR51.Int32Message\0227\n\024SetSensorSensitivit"
  "y\022\022.AR51.Int32Message\032\013.AR51.Empty\022O\n\030Ge"
  "tVideoRecordingSetting\022\013.AR51.Empty\032&.AR"
  "51.GetVideoRecordingSettingResponse\022K\n\016S"
  "tartRecording\022\033.AR51.StartRecordingReque"
  "st\032\034.AR51.StartRecordingResponse\022@\n\021Star"
  "tMediaRecoder\022\036.AR51.StartMediaRecoderRe"
  "quest\032\013.AR51.Empty\022)\n\rStopRecording\022\013.AR"
  "51.Empty\032\013.AR51.Empty\022A\n\rDownloadVideo\022\032"
  ".AR51.DownloadVideoRequest\032\022.AR51.BytesM"
  "essage0\001\022/\n\013DeleteVideo\022\023.AR51.StringMes"
  "sage\032\013.AR51.Empty\022+\n\017DeleteAllVideos\022\013.A"
  "R51.Empty\032\013.AR51.Empty\022\?\n\020GetAllVideoFil"
  "es\022\013.AR51.Empty\032\036.AR51.GetAllVideoFilesR"
  "esponse\022U\n\030GetCameraCharacteristics\022%.AR"
  "51.GetCameraCharacteristicsRequest\032\022.AR5"
  "1.BytesMessage\022E\n\020GetRecorderField\022\035.AR5"
  "1.GetRecorderFieldRequest\032\022.AR51.BytesMe"
  "ssage\022>\n\020SetRecorderField\022\035.AR51.SetReco"
  "rderFieldRequest\032\013.AR51.Empty2T\n\rRenderS"
  "ervice\022C\n\016StartRendering\022\026.AR51.Renderin"
  "gRequest\032\027.AR51.RenderingResponse0\0012\310\002\n\013"
  "DrawService\022.\n\006Line2D\022\027.AR51.DrawLine2DR"
  "equest\032\013.AR51.Empty\022.\n\006Line3D\022\027.AR51.Dra"
  "wLine3DRequest\032\013.AR51.Empty\022*\n\004Rect\022\025.AR"
  "51.DrawRectRequest\032\013.AR51.Empty\022*\n\004Cube\022"
  "\025.AR51.DrawCubeRequest\032\013.AR51.Empty\022.\n\006C"
  "ircle\022\027.AR51.DrawCircleRequest\032\013.AR51.Em"
  "pty\022.\n\006Sphere\022\027.AR51.DrawSphereRequest\032\013"
  ".AR51.Empty\022!\n\005Clear\022\013.AR51.Empty\032\013.AR51"
  ".Empty2\323\r\n\014UnityService\022.\n\tGetPyTime\022\013.A"
  "R51.Empty\032\024.AR51.Float64Message\0224\n\017GetPy"
  "TimeOffset\022\013.AR51.Empty\032\024.AR51.Float64Me"
  "ssage\0224\n\017SetPyTimeOffset\022\024.AR51.Float64M"
  "essage\032\013.AR51.Empty\022>\n\013Instantiate\022\030.AR5"
  "1.InstantiateRequest\032\025.AR51.ObjectIdMess"
  "age\022:\n\016FindGameObject\022\021.AR51.NameRequest"
  "\032\025.AR51.ObjectIdMessage\022B\n\024FindAnchorGam"
  "eObject\022\023.AR51.AnchorRequest\032\025.AR51.Obje"
  "ctIdMessage\0223\n\rGetMainCamera\022\013.AR51.Empt"
  "y\032\025.AR51.ObjectIdMessage\022-\n\007Destroy\022\025.AR"
  "51.ObjectIdMessage\032\013.AR51.Empty\022F\n\017Creat"
  "ePrimitive\022\034.AR51.CreatePrimitiveRequest"
  "\032\025.AR51.ObjectIdMessage\0229\n\rNewGameObject"
  "\022\021.AR51.NameRequest\032\025.AR51.ObjectIdMessa"
  "ge\022*\n\016ClearInstances\022\013.AR51.Empty\032\013.AR51"
  ".Empty\0220\n\tSetParent\022\026.AR51.SetParentRequ"
  "est\032\013.AR51.Empty\0223\n\007GetName\022\025.AR51.Objec"
  "tIdMessage\032\021.AR51.NameRequest\022,\n\007SetName"
  "\022\024.AR51.SetNameRequest\032\013.AR51.Empty\0227\n\tG"
  "etActive\022\025.AR51.ObjectIdMessage\032\023.AR51.A"
  "ctiveMessage\0225\n\tSetActive\022\023.AR51.ActiveM"
  "essage\032\023.AR51.ActiveMessage\022A\n\014GetTransf"
  "orm\022\031.AR51.GetTransformRequest\032\026.AR51.Tr"
  "ansformMessage\0226\n\014SetTransform\022\031.AR51.Se"
  "tTransformRequest\032\013.AR51.Empty\022F\n\017Stream"
  "Transform\022\031.AR51.GetTransformRequest\032\026.A"
  "R51.TransformMessage0\001\022=\n\014GetComponent\022\026"
  ".AR51.ComponentRequest\032\025.AR51.ObjectIdMe"
  "ssage\022M\n\021GetComponentField\022\033.AR51.Compon"
  "entFieldMessage\032\033.AR51.ComponentFieldMes"
  "sage\022=\n\021SetComponentField\022\033.AR51.Compone"
  "ntFieldMessage\032\013.AR51.Empty\0227\n\020SetCamera"
  "Project\022\026.AR51.TransformMessage\032\013.AR51.E"
  "mpty\022B\n\022SetRendererEnabled\022\037.AR51.SetRen"
  "dererEnabledRequest\032\013.AR51.Empty\022B\n\022SetM"
  "aterialTexture\022\037.AR51.SetMaterialTexture"
  "Request\032\013.AR51.Empty\022>\n\020SetMaterialInt32"
  "\022\035.AR51.SetMaterialInt32Request\032\013.AR51.E"
  "mpty\022>\n\020SetMaterialFloat\022\035.AR51.SetMater"
  "ialFloatRequest\032\013.AR51.Empty\022>\n\020SetMater"
  "ialColor\022\035.AR51.SetMaterialColorRequest\032"
  "\013.AR51.Empty\022>\n\020GetMaterialColor\022\035.AR51."
  "GetMaterialColorRequest\032\013.AR51.Color2\224\010\n"
  "\rAnchorService\0226\n\014CreateAnchor\022\031.AR51.Cr"
  "eateAnchorRequest\032\013.AR51.Empty\0220\n\014Delete"
  "Anchor\022\023.AR51.AnchorRequest\032\013.AR51.Empty"
  "\022=\n\023GetAnchorVisibility\022\023.AR51.AnchorReq"
  "uest\032\021.AR51.BoolMessage\022E\n\023SetAnchorVisi"
  "bility\022!.AR51.SetAnchorVisiliblityReques"
  "t\032\013.AR51.Empty\0224\n\020TapToPlaceAnchor\022\023.AR5"
  "1.AnchorRequest\032\013.AR51.Empty\022:\n\016Download"
  "Anchor\022\023.AR51.AnchorRequest\032\021.AR51.Ancho"
  "rBytes0\001\0220\n\014UploadAnchor\022\021.AR51.AnchorBy"
  "tes\032\013.AR51.Empty(\001\0221\n\014GetAnchorIds\022\013.AR5"
  "1.Empty\032\024.AR51.AnchorIdsReply\0228\n\026SetAllA"
  "nchorVisibility\022\021.AR51.BoolMessage\032\013.AR5"
  "1.Empty\022!\n\005Clear\022\013.AR51.Empty\032\013.AR51.Emp"
  "ty\022\?\n\013GetGuardian\022\025.AR51.GuardianRequest"
  "\032\031.AR51.GetGuardianResponse\022;\n\016GetGuardi"
  "anIds\022\013.AR51.Empty\032\034.AR51.GetGuardianIds"
  "Response\022:\n\016CreateGuardian\022\033.AR51.Create"
  "GuardianRequest\032\013.AR51.Empty\0225\n\017DestroyG"
  "uardian\022\025.AR51.GuardianRequest\032\013.AR51.Em"
  "pty\022*\n\016ClearGuardians\022\013.AR51.Empty\032\013.AR5"
  "1.Empty\0222\n\014ShowGuardian\022\025.AR51.GuardianR"
  "equest\032\013.AR51.Empty\0222\n\014HideGuardian\022\025.AR"
  "51.GuardianRequest\032\013.AR51.Empty\022,\n\020ShowA"
  "llGuardians\022\013.AR51.Empty\032\013.AR51.Empty\022,\n"
  "\020HideAllGuardians\022\013.AR51.Empty\032\013.AR51.Em"
  "pty2\225\001\n\014DebugService\022-\n\014GetAllFields\022\013.A"
  "R51.Empty\032\020.AR51.FieldInfos\022(\n\010SetField\022"
  "\017.AR51.FieldInfo\032\013.AR51.Empty\022,\n\010GetFiel"
  "d\022\017.AR51.FieldInfo\032\017.AR51.FieldInfo2R\n\023H"
  "andSkeletonService\022;\n\016StartStreaming\022\013.A"
  "R51.Empty\032\032.AR51.TwoHandsInfoResponse0\001B"
  "\020\252\002\rAR51.GRPC.DGSb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dgs_2eproto_deps[2] = {
  &::descriptor_table_AR51_2eCore_2eproto,
  &::descriptor_table_dgsEnums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dgs_2eproto_sccs[55] = {
  &scc_info_ActiveMessage_dgs_2eproto.base,
  &scc_info_AnchorIdsReply_dgs_2eproto.base,
  &scc_info_CameraFeedRequest_dgs_2eproto.base,
  &scc_info_CameraFeedResponse_dgs_2eproto.base,
  &scc_info_ComponentFieldMessage_dgs_2eproto.base,
  &scc_info_ComponentRequest_dgs_2eproto.base,
  &scc_info_CreateAnchorRequest_dgs_2eproto.base,
  &scc_info_CreateGuardianRequest_dgs_2eproto.base,
  &scc_info_CreatePrimitiveRequest_dgs_2eproto.base,
  &scc_info_DownloadVideoRequest_dgs_2eproto.base,
  &scc_info_DrawCircleRequest_dgs_2eproto.base,
  &scc_info_DrawCubeRequest_dgs_2eproto.base,
  &scc_info_DrawLine2DRequest_dgs_2eproto.base,
  &scc_info_DrawLine3DRequest_dgs_2eproto.base,
  &scc_info_DrawRectRequest_dgs_2eproto.base,
  &scc_info_DrawRequest_dgs_2eproto.base,
  &scc_info_DrawSphereRequest_dgs_2eproto.base,
  &scc_info_FieldInfo_dgs_2eproto.base,
  &scc_info_FieldInfos_dgs_2eproto.base,
  &scc_info_GameStateReply_dgs_2eproto.base,
  &scc_info_GetAllVideoFilesResponse_dgs_2eproto.base,
  &scc_info_GetCameraCharacteristicsRequest_dgs_2eproto.base,
  &scc_info_GetGuardianIdsResponse_dgs_2eproto.base,
  &scc_info_GetGuardianResponse_dgs_2eproto.base,
  &scc_info_GetMaterialColorRequest_dgs_2eproto.base,
  &scc_info_GetRecorderFieldRequest_dgs_2eproto.base,
  &scc_info_GetTransformRequest_dgs_2eproto.base,
  &scc_info_GetVideoRecordingSettingResponse_dgs_2eproto.base,
  &scc_info_GuardianRequest_dgs_2eproto.base,
  &scc_info_HandInfoResponse_dgs_2eproto.base,
  &scc_info_InstantiateRequest_dgs_2eproto.base,
  &scc_info_NameRequest_dgs_2eproto.base,
  &scc_info_ObjectIdMessage_dgs_2eproto.base,
  &scc_info_PlaceableDto_dgs_2eproto.base,
  &scc_info_RenderingRequest_dgs_2eproto.base,
  &scc_info_RenderingResponse_dgs_2eproto.base,
  &scc_info_SetAnchorVisiliblityRequest_dgs_2eproto.base,
  &scc_info_SetMaterialColorRequest_dgs_2eproto.base,
  &scc_info_SetMaterialFloatRequest_dgs_2eproto.base,
  &scc_info_SetMaterialInt32Request_dgs_2eproto.base,
  &scc_info_SetMaterialTextureRequest_dgs_2eproto.base,
  &scc_info_SetNameRequest_dgs_2eproto.base,
  &scc_info_SetParentRequest_dgs_2eproto.base,
  &scc_info_SetPlaceableReply_dgs_2eproto.base,
  &scc_info_SetPlaceableRequest_dgs_2eproto.base,
  &scc_info_SetRecorderFieldRequest_dgs_2eproto.base,
  &scc_info_SetRendererEnabledRequest_dgs_2eproto.base,
  &scc_info_SetTransformRequest_dgs_2eproto.base,
  &scc_info_SetupReply_dgs_2eproto.base,
  &scc_info_StartMediaRecoderRequest_dgs_2eproto.base,
  &scc_info_StartRecordingRequest_dgs_2eproto.base,
  &scc_info_StartRecordingResponse_dgs_2eproto.base,
  &scc_info_TransformMessage_dgs_2eproto.base,
  &scc_info_TwoHandsInfoResponse_dgs_2eproto.base,
  &scc_info_VideoRecordingSettings_dgs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dgs_2eproto_once;
static bool descriptor_table_dgs_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dgs_2eproto = {
  &descriptor_table_dgs_2eproto_initialized, descriptor_table_protodef_dgs_2eproto, "dgs.proto", 11425,
  &descriptor_table_dgs_2eproto_once, descriptor_table_dgs_2eproto_sccs, descriptor_table_dgs_2eproto_deps, 55, 2,
  schemas6, file_default_instances6, TableStruct_dgs_2eproto::offsets,
  file_level_metadata_dgs_2eproto, 55, file_level_enum_descriptors_dgs_2eproto, file_level_service_descriptors_dgs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dgs_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dgs_2eproto), true);
namespace AR51 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetPlaceableEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dgs_2eproto);
  return file_level_enum_descriptors_dgs_2eproto[0];
}
bool SetPlaceableEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldTypeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dgs_2eproto);
  return file_level_enum_descriptors_dgs_2eproto[1];
}
bool FieldTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HandJoints_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dgs_2eproto);
  return file_level_enum_descriptors_dgs_2eproto[2];
}
bool HandJoints_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HandednessTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dgs_2eproto);
  return file_level_enum_descriptors_dgs_2eproto[3];
}
bool HandednessTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GameStateReply::InitAsDefaultInstance() {
}
class GameStateReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameStateReply::kStateFieldNumber;
const int GameStateReply::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameStateReply::GameStateReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.GameStateReply)
}
GameStateReply::GameStateReply(const GameStateReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:AR51.GameStateReply)
}

void GameStateReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameStateReply_dgs_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

GameStateReply::~GameStateReply() {
  // @@protoc_insertion_point(destructor:AR51.GameStateReply)
  SharedDtor();
}

void GameStateReply::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameStateReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStateReply& GameStateReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameStateReply_dgs_2eproto.base);
  return *internal_default_instance();
}


void GameStateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.GameStateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameStateReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AR51.GameState State = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::AR51::GameState>(val));
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_message(), ptr, ctx, "AR51.GameStateReply.Message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameStateReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.GameStateReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AR51.GameState State = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::AR51::GameState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.GameStateReply.Message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.GameStateReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.GameStateReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameStateReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.GameStateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.GameState State = 1;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GameStateReply.Message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.GameStateReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* GameStateReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.GameStateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.GameState State = 1;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GameStateReply.Message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.GameStateReply)
  return target;
}

size_t GameStateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.GameStateReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .AR51.GameState State = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStateReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.GameStateReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStateReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameStateReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.GameStateReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.GameStateReply)
    MergeFrom(*source);
  }
}

void GameStateReply::MergeFrom(const GameStateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.GameStateReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void GameStateReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.GameStateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStateReply::CopyFrom(const GameStateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.GameStateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStateReply::IsInitialized() const {
  return true;
}

void GameStateReply::Swap(GameStateReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStateReply::InternalSwap(GameStateReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStateReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetupReply::InitAsDefaultInstance() {
}
class SetupReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetupReply::kPlaceablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetupReply::SetupReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.SetupReply)
}
SetupReply::SetupReply(const SetupReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      placeables_(from.placeables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AR51.SetupReply)
}

void SetupReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetupReply_dgs_2eproto.base);
}

SetupReply::~SetupReply() {
  // @@protoc_insertion_point(destructor:AR51.SetupReply)
  SharedDtor();
}

void SetupReply::SharedDtor() {
}

void SetupReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetupReply& SetupReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetupReply_dgs_2eproto.base);
  return *internal_default_instance();
}


void SetupReply::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.SetupReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  placeables_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetupReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .AR51.PlaceableDto Placeables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_placeables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetupReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.SetupReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AR51.PlaceableDto Placeables = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_placeables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.SetupReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.SetupReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetupReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.SetupReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AR51.PlaceableDto Placeables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->placeables_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->placeables(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.SetupReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.SetupReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AR51.PlaceableDto Placeables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->placeables_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->placeables(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.SetupReply)
  return target;
}

size_t SetupReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.SetupReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AR51.PlaceableDto Placeables = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->placeables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->placeables(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetupReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.SetupReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SetupReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetupReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.SetupReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.SetupReply)
    MergeFrom(*source);
  }
}

void SetupReply::MergeFrom(const SetupReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.SetupReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  placeables_.MergeFrom(from.placeables_);
}

void SetupReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.SetupReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupReply::CopyFrom(const SetupReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.SetupReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupReply::IsInitialized() const {
  return true;
}

void SetupReply::Swap(SetupReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetupReply::InternalSwap(SetupReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&placeables_)->InternalSwap(CastToBase(&other->placeables_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaceableDto::InitAsDefaultInstance() {
}
class PlaceableDto::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaceableDto::kNameFieldNumber;
const int PlaceableDto::kIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaceableDto::PlaceableDto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.PlaceableDto)
}
PlaceableDto::PlaceableDto(const PlaceableDto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.icon().size() > 0) {
    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.PlaceableDto)
}

void PlaceableDto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaceableDto_dgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PlaceableDto::~PlaceableDto() {
  // @@protoc_insertion_point(destructor:AR51.PlaceableDto)
  SharedDtor();
}

void PlaceableDto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlaceableDto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceableDto& PlaceableDto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceableDto_dgs_2eproto.base);
  return *internal_default_instance();
}


void PlaceableDto::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.PlaceableDto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlaceableDto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "AR51.PlaceableDto.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_icon(), ptr, ctx, "AR51.PlaceableDto.Icon");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlaceableDto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.PlaceableDto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.PlaceableDto.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Icon = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->icon().data(), static_cast<int>(this->icon().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.PlaceableDto.Icon"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.PlaceableDto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.PlaceableDto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlaceableDto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.PlaceableDto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.PlaceableDto.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string Icon = 2;
  if (this->icon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.PlaceableDto.Icon");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->icon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.PlaceableDto)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceableDto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.PlaceableDto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.PlaceableDto.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string Icon = 2;
  if (this->icon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.PlaceableDto.Icon");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->icon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.PlaceableDto)
  return target;
}

size_t PlaceableDto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.PlaceableDto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string Icon = 2;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->icon());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceableDto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.PlaceableDto)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceableDto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceableDto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.PlaceableDto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.PlaceableDto)
    MergeFrom(*source);
  }
}

void PlaceableDto::MergeFrom(const PlaceableDto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.PlaceableDto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.icon().size() > 0) {

    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
}

void PlaceableDto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.PlaceableDto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceableDto::CopyFrom(const PlaceableDto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.PlaceableDto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceableDto::IsInitialized() const {
  return true;
}

void PlaceableDto::Swap(PlaceableDto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaceableDto::InternalSwap(PlaceableDto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceableDto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPlaceableRequest::InitAsDefaultInstance() {
}
class SetPlaceableRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetPlaceableRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetPlaceableRequest::SetPlaceableRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.SetPlaceableRequest)
}
SetPlaceableRequest::SetPlaceableRequest(const SetPlaceableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.SetPlaceableRequest)
}

void SetPlaceableRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPlaceableRequest_dgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetPlaceableRequest::~SetPlaceableRequest() {
  // @@protoc_insertion_point(destructor:AR51.SetPlaceableRequest)
  SharedDtor();
}

void SetPlaceableRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetPlaceableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPlaceableRequest& SetPlaceableRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPlaceableRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void SetPlaceableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.SetPlaceableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetPlaceableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "AR51.SetPlaceableRequest.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetPlaceableRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.SetPlaceableRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.SetPlaceableRequest.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.SetPlaceableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.SetPlaceableRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetPlaceableRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.SetPlaceableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetPlaceableRequest.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.SetPlaceableRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPlaceableRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.SetPlaceableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetPlaceableRequest.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.SetPlaceableRequest)
  return target;
}

size_t SetPlaceableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.SetPlaceableRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPlaceableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.SetPlaceableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPlaceableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPlaceableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.SetPlaceableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.SetPlaceableRequest)
    MergeFrom(*source);
  }
}

void SetPlaceableRequest::MergeFrom(const SetPlaceableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.SetPlaceableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void SetPlaceableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.SetPlaceableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPlaceableRequest::CopyFrom(const SetPlaceableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.SetPlaceableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPlaceableRequest::IsInitialized() const {
  return true;
}

void SetPlaceableRequest::Swap(SetPlaceableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetPlaceableRequest::InternalSwap(SetPlaceableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPlaceableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPlaceableReply::InitAsDefaultInstance() {
}
class SetPlaceableReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetPlaceableReply::kEventFieldNumber;
const int SetPlaceableReply::kAnchorIdFieldNumber;
const int SetPlaceableReply::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetPlaceableReply::SetPlaceableReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.SetPlaceableReply)
}
SetPlaceableReply::SetPlaceableReply(const SetPlaceableReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  anchorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.anchorid().size() > 0) {
    anchorid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anchorid_);
  }
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.errormessage().size() > 0) {
    errormessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:AR51.SetPlaceableReply)
}

void SetPlaceableReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPlaceableReply_dgs_2eproto.base);
  anchorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_ = 0;
}

SetPlaceableReply::~SetPlaceableReply() {
  // @@protoc_insertion_point(destructor:AR51.SetPlaceableReply)
  SharedDtor();
}

void SetPlaceableReply::SharedDtor() {
  anchorid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errormessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetPlaceableReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPlaceableReply& SetPlaceableReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPlaceableReply_dgs_2eproto.base);
  return *internal_default_instance();
}


void SetPlaceableReply::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.SetPlaceableReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchorid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errormessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetPlaceableReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AR51.SetPlaceableEvent Event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_event(static_cast<::AR51::SetPlaceableEvent>(val));
        } else goto handle_unusual;
        continue;
      // string AnchorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_anchorid(), ptr, ctx, "AR51.SetPlaceableReply.AnchorId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ErrorMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_errormessage(), ptr, ctx, "AR51.SetPlaceableReply.ErrorMessage");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetPlaceableReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.SetPlaceableReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AR51.SetPlaceableEvent Event = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event(static_cast< ::AR51::SetPlaceableEvent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string AnchorId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_anchorid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->anchorid().data(), static_cast<int>(this->anchorid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.SetPlaceableReply.AnchorId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ErrorMessage = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->errormessage().data(), static_cast<int>(this->errormessage().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.SetPlaceableReply.ErrorMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.SetPlaceableReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.SetPlaceableReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetPlaceableReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.SetPlaceableReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.SetPlaceableEvent Event = 1;
  if (this->event() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  // string AnchorId = 2;
  if (this->anchorid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->anchorid().data(), static_cast<int>(this->anchorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetPlaceableReply.AnchorId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->anchorid(), output);
  }

  // string ErrorMessage = 3;
  if (this->errormessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), static_cast<int>(this->errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetPlaceableReply.ErrorMessage");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errormessage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.SetPlaceableReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPlaceableReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.SetPlaceableReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.SetPlaceableEvent Event = 1;
  if (this->event() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  // string AnchorId = 2;
  if (this->anchorid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->anchorid().data(), static_cast<int>(this->anchorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetPlaceableReply.AnchorId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->anchorid(), target);
  }

  // string ErrorMessage = 3;
  if (this->errormessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), static_cast<int>(this->errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetPlaceableReply.ErrorMessage");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->errormessage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.SetPlaceableReply)
  return target;
}

size_t SetPlaceableReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.SetPlaceableReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string AnchorId = 2;
  if (this->anchorid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->anchorid());
  }

  // string ErrorMessage = 3;
  if (this->errormessage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->errormessage());
  }

  // .AR51.SetPlaceableEvent Event = 1;
  if (this->event() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->event());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPlaceableReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.SetPlaceableReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPlaceableReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPlaceableReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.SetPlaceableReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.SetPlaceableReply)
    MergeFrom(*source);
  }
}

void SetPlaceableReply::MergeFrom(const SetPlaceableReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.SetPlaceableReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.anchorid().size() > 0) {

    anchorid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anchorid_);
  }
  if (from.errormessage().size() > 0) {

    errormessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from.event() != 0) {
    set_event(from.event());
  }
}

void SetPlaceableReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.SetPlaceableReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPlaceableReply::CopyFrom(const SetPlaceableReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.SetPlaceableReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPlaceableReply::IsInitialized() const {
  return true;
}

void SetPlaceableReply::Swap(SetPlaceableReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetPlaceableReply::InternalSwap(SetPlaceableReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  anchorid_.Swap(&other->anchorid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errormessage_.Swap(&other->errormessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_, other->event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPlaceableReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRecorderFieldRequest::InitAsDefaultInstance() {
}
class GetRecorderFieldRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRecorderFieldRequest::kFieldNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRecorderFieldRequest::GetRecorderFieldRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.GetRecorderFieldRequest)
}
GetRecorderFieldRequest::GetRecorderFieldRequest(const GetRecorderFieldRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fieldname().size() > 0) {
    fieldname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fieldname_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.GetRecorderFieldRequest)
}

void GetRecorderFieldRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRecorderFieldRequest_dgs_2eproto.base);
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRecorderFieldRequest::~GetRecorderFieldRequest() {
  // @@protoc_insertion_point(destructor:AR51.GetRecorderFieldRequest)
  SharedDtor();
}

void GetRecorderFieldRequest::SharedDtor() {
  fieldname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRecorderFieldRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRecorderFieldRequest& GetRecorderFieldRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRecorderFieldRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void GetRecorderFieldRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.GetRecorderFieldRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRecorderFieldRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string FieldName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fieldname(), ptr, ctx, "AR51.GetRecorderFieldRequest.FieldName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRecorderFieldRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.GetRecorderFieldRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string FieldName = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fieldname().data(), static_cast<int>(this->fieldname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.GetRecorderFieldRequest.FieldName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.GetRecorderFieldRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.GetRecorderFieldRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRecorderFieldRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.GetRecorderFieldRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FieldName = 1;
  if (this->fieldname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fieldname().data(), static_cast<int>(this->fieldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GetRecorderFieldRequest.FieldName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fieldname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.GetRecorderFieldRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRecorderFieldRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.GetRecorderFieldRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FieldName = 1;
  if (this->fieldname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fieldname().data(), static_cast<int>(this->fieldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GetRecorderFieldRequest.FieldName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->fieldname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.GetRecorderFieldRequest)
  return target;
}

size_t GetRecorderFieldRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.GetRecorderFieldRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string FieldName = 1;
  if (this->fieldname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fieldname());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRecorderFieldRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.GetRecorderFieldRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRecorderFieldRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRecorderFieldRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.GetRecorderFieldRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.GetRecorderFieldRequest)
    MergeFrom(*source);
  }
}

void GetRecorderFieldRequest::MergeFrom(const GetRecorderFieldRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.GetRecorderFieldRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fieldname().size() > 0) {

    fieldname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fieldname_);
  }
}

void GetRecorderFieldRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.GetRecorderFieldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRecorderFieldRequest::CopyFrom(const GetRecorderFieldRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.GetRecorderFieldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecorderFieldRequest::IsInitialized() const {
  return true;
}

void GetRecorderFieldRequest::Swap(GetRecorderFieldRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRecorderFieldRequest::InternalSwap(GetRecorderFieldRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fieldname_.Swap(&other->fieldname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecorderFieldRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRecorderFieldRequest::InitAsDefaultInstance() {
}
class SetRecorderFieldRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRecorderFieldRequest::kFieldNameFieldNumber;
const int SetRecorderFieldRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRecorderFieldRequest::SetRecorderFieldRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.SetRecorderFieldRequest)
}
SetRecorderFieldRequest::SetRecorderFieldRequest(const SetRecorderFieldRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fieldname().size() > 0) {
    fieldname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fieldname_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.SetRecorderFieldRequest)
}

void SetRecorderFieldRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRecorderFieldRequest_dgs_2eproto.base);
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetRecorderFieldRequest::~SetRecorderFieldRequest() {
  // @@protoc_insertion_point(destructor:AR51.SetRecorderFieldRequest)
  SharedDtor();
}

void SetRecorderFieldRequest::SharedDtor() {
  fieldname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetRecorderFieldRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRecorderFieldRequest& SetRecorderFieldRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRecorderFieldRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void SetRecorderFieldRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.SetRecorderFieldRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetRecorderFieldRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string FieldName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fieldname(), ptr, ctx, "AR51.SetRecorderFieldRequest.FieldName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetRecorderFieldRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.SetRecorderFieldRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string FieldName = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fieldname().data(), static_cast<int>(this->fieldname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.SetRecorderFieldRequest.FieldName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.SetRecorderFieldRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.SetRecorderFieldRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetRecorderFieldRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.SetRecorderFieldRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FieldName = 1;
  if (this->fieldname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fieldname().data(), static_cast<int>(this->fieldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetRecorderFieldRequest.FieldName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fieldname(), output);
  }

  // bytes Value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.SetRecorderFieldRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRecorderFieldRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.SetRecorderFieldRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FieldName = 1;
  if (this->fieldname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fieldname().data(), static_cast<int>(this->fieldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetRecorderFieldRequest.FieldName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->fieldname(), target);
  }

  // bytes Value = 2;
  if (this->value().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.SetRecorderFieldRequest)
  return target;
}

size_t SetRecorderFieldRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.SetRecorderFieldRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string FieldName = 1;
  if (this->fieldname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fieldname());
  }

  // bytes Value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRecorderFieldRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.SetRecorderFieldRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRecorderFieldRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRecorderFieldRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.SetRecorderFieldRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.SetRecorderFieldRequest)
    MergeFrom(*source);
  }
}

void SetRecorderFieldRequest::MergeFrom(const SetRecorderFieldRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.SetRecorderFieldRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fieldname().size() > 0) {

    fieldname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fieldname_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void SetRecorderFieldRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.SetRecorderFieldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRecorderFieldRequest::CopyFrom(const SetRecorderFieldRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.SetRecorderFieldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRecorderFieldRequest::IsInitialized() const {
  return true;
}

void SetRecorderFieldRequest::Swap(SetRecorderFieldRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRecorderFieldRequest::InternalSwap(SetRecorderFieldRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fieldname_.Swap(&other->fieldname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRecorderFieldRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCameraCharacteristicsRequest::InitAsDefaultInstance() {
}
class GetCameraCharacteristicsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCameraCharacteristicsRequest::kFieldNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCameraCharacteristicsRequest::GetCameraCharacteristicsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.GetCameraCharacteristicsRequest)
}
GetCameraCharacteristicsRequest::GetCameraCharacteristicsRequest(const GetCameraCharacteristicsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fieldname().size() > 0) {
    fieldname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fieldname_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.GetCameraCharacteristicsRequest)
}

void GetCameraCharacteristicsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCameraCharacteristicsRequest_dgs_2eproto.base);
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetCameraCharacteristicsRequest::~GetCameraCharacteristicsRequest() {
  // @@protoc_insertion_point(destructor:AR51.GetCameraCharacteristicsRequest)
  SharedDtor();
}

void GetCameraCharacteristicsRequest::SharedDtor() {
  fieldname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCameraCharacteristicsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCameraCharacteristicsRequest& GetCameraCharacteristicsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCameraCharacteristicsRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void GetCameraCharacteristicsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.GetCameraCharacteristicsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCameraCharacteristicsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string FieldName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fieldname(), ptr, ctx, "AR51.GetCameraCharacteristicsRequest.FieldName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCameraCharacteristicsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.GetCameraCharacteristicsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string FieldName = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fieldname().data(), static_cast<int>(this->fieldname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.GetCameraCharacteristicsRequest.FieldName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.GetCameraCharacteristicsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.GetCameraCharacteristicsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCameraCharacteristicsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.GetCameraCharacteristicsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FieldName = 1;
  if (this->fieldname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fieldname().data(), static_cast<int>(this->fieldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GetCameraCharacteristicsRequest.FieldName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fieldname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.GetCameraCharacteristicsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCameraCharacteristicsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.GetCameraCharacteristicsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FieldName = 1;
  if (this->fieldname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fieldname().data(), static_cast<int>(this->fieldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GetCameraCharacteristicsRequest.FieldName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->fieldname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.GetCameraCharacteristicsRequest)
  return target;
}

size_t GetCameraCharacteristicsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.GetCameraCharacteristicsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string FieldName = 1;
  if (this->fieldname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fieldname());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCameraCharacteristicsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.GetCameraCharacteristicsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCameraCharacteristicsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCameraCharacteristicsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.GetCameraCharacteristicsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.GetCameraCharacteristicsRequest)
    MergeFrom(*source);
  }
}

void GetCameraCharacteristicsRequest::MergeFrom(const GetCameraCharacteristicsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.GetCameraCharacteristicsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fieldname().size() > 0) {

    fieldname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fieldname_);
  }
}

void GetCameraCharacteristicsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.GetCameraCharacteristicsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCameraCharacteristicsRequest::CopyFrom(const GetCameraCharacteristicsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.GetCameraCharacteristicsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCameraCharacteristicsRequest::IsInitialized() const {
  return true;
}

void GetCameraCharacteristicsRequest::Swap(GetCameraCharacteristicsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCameraCharacteristicsRequest::InternalSwap(GetCameraCharacteristicsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fieldname_.Swap(&other->fieldname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCameraCharacteristicsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAllVideoFilesResponse::InitAsDefaultInstance() {
}
class GetAllVideoFilesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAllVideoFilesResponse::kFileNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAllVideoFilesResponse::GetAllVideoFilesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.GetAllVideoFilesResponse)
}
GetAllVideoFilesResponse::GetAllVideoFilesResponse(const GetAllVideoFilesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      filenames_(from.filenames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AR51.GetAllVideoFilesResponse)
}

void GetAllVideoFilesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAllVideoFilesResponse_dgs_2eproto.base);
}

GetAllVideoFilesResponse::~GetAllVideoFilesResponse() {
  // @@protoc_insertion_point(destructor:AR51.GetAllVideoFilesResponse)
  SharedDtor();
}

void GetAllVideoFilesResponse::SharedDtor() {
}

void GetAllVideoFilesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllVideoFilesResponse& GetAllVideoFilesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllVideoFilesResponse_dgs_2eproto.base);
  return *internal_default_instance();
}


void GetAllVideoFilesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.GetAllVideoFilesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filenames_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAllVideoFilesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string FileNames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_filenames(), ptr, ctx, "AR51.GetAllVideoFilesResponse.FileNames");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAllVideoFilesResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.GetAllVideoFilesResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string FileNames = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_filenames()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->filenames(this->filenames_size() - 1).data(),
            static_cast<int>(this->filenames(this->filenames_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.GetAllVideoFilesResponse.FileNames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.GetAllVideoFilesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.GetAllVideoFilesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAllVideoFilesResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.GetAllVideoFilesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string FileNames = 1;
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filenames(i).data(), static_cast<int>(this->filenames(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GetAllVideoFilesResponse.FileNames");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->filenames(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.GetAllVideoFilesResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllVideoFilesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.GetAllVideoFilesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string FileNames = 1;
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filenames(i).data(), static_cast<int>(this->filenames(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GetAllVideoFilesResponse.FileNames");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->filenames(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.GetAllVideoFilesResponse)
  return target;
}

size_t GetAllVideoFilesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.GetAllVideoFilesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string FileNames = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->filenames_size());
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->filenames(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllVideoFilesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.GetAllVideoFilesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAllVideoFilesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAllVideoFilesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.GetAllVideoFilesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.GetAllVideoFilesResponse)
    MergeFrom(*source);
  }
}

void GetAllVideoFilesResponse::MergeFrom(const GetAllVideoFilesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.GetAllVideoFilesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filenames_.MergeFrom(from.filenames_);
}

void GetAllVideoFilesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.GetAllVideoFilesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllVideoFilesResponse::CopyFrom(const GetAllVideoFilesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.GetAllVideoFilesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllVideoFilesResponse::IsInitialized() const {
  return true;
}

void GetAllVideoFilesResponse::Swap(GetAllVideoFilesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAllVideoFilesResponse::InternalSwap(GetAllVideoFilesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filenames_.InternalSwap(CastToBase(&other->filenames_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAllVideoFilesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartMediaRecoderRequest::InitAsDefaultInstance() {
}
class StartMediaRecoderRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartMediaRecoderRequest::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartMediaRecoderRequest::StartMediaRecoderRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.StartMediaRecoderRequest)
}
StartMediaRecoderRequest::StartMediaRecoderRequest(const StartMediaRecoderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  starttime_ = from.starttime_;
  // @@protoc_insertion_point(copy_constructor:AR51.StartMediaRecoderRequest)
}

void StartMediaRecoderRequest::SharedCtor() {
  starttime_ = 0;
}

StartMediaRecoderRequest::~StartMediaRecoderRequest() {
  // @@protoc_insertion_point(destructor:AR51.StartMediaRecoderRequest)
  SharedDtor();
}

void StartMediaRecoderRequest::SharedDtor() {
}

void StartMediaRecoderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartMediaRecoderRequest& StartMediaRecoderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartMediaRecoderRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void StartMediaRecoderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.StartMediaRecoderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  starttime_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartMediaRecoderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double StartTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartMediaRecoderRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.StartMediaRecoderRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double StartTime = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.StartMediaRecoderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.StartMediaRecoderRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartMediaRecoderRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.StartMediaRecoderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double StartTime = 1;
  if (!(this->starttime() <= 0 && this->starttime() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->starttime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.StartMediaRecoderRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* StartMediaRecoderRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.StartMediaRecoderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double StartTime = 1;
  if (!(this->starttime() <= 0 && this->starttime() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->starttime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.StartMediaRecoderRequest)
  return target;
}

size_t StartMediaRecoderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.StartMediaRecoderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double StartTime = 1;
  if (!(this->starttime() <= 0 && this->starttime() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartMediaRecoderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.StartMediaRecoderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartMediaRecoderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartMediaRecoderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.StartMediaRecoderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.StartMediaRecoderRequest)
    MergeFrom(*source);
  }
}

void StartMediaRecoderRequest::MergeFrom(const StartMediaRecoderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.StartMediaRecoderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.starttime() <= 0 && from.starttime() >= 0)) {
    set_starttime(from.starttime());
  }
}

void StartMediaRecoderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.StartMediaRecoderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartMediaRecoderRequest::CopyFrom(const StartMediaRecoderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.StartMediaRecoderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartMediaRecoderRequest::IsInitialized() const {
  return true;
}

void StartMediaRecoderRequest::Swap(StartMediaRecoderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartMediaRecoderRequest::InternalSwap(StartMediaRecoderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(starttime_, other->starttime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartMediaRecoderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DownloadVideoRequest::InitAsDefaultInstance() {
}
class DownloadVideoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownloadVideoRequest::kFileNameFieldNumber;
const int DownloadVideoRequest::kPacketSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownloadVideoRequest::DownloadVideoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.DownloadVideoRequest)
}
DownloadVideoRequest::DownloadVideoRequest(const DownloadVideoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  packetsize_ = from.packetsize_;
  // @@protoc_insertion_point(copy_constructor:AR51.DownloadVideoRequest)
}

void DownloadVideoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DownloadVideoRequest_dgs_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packetsize_ = 0;
}

DownloadVideoRequest::~DownloadVideoRequest() {
  // @@protoc_insertion_point(destructor:AR51.DownloadVideoRequest)
  SharedDtor();
}

void DownloadVideoRequest::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DownloadVideoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownloadVideoRequest& DownloadVideoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DownloadVideoRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void DownloadVideoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.DownloadVideoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packetsize_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DownloadVideoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string FileName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_filename(), ptr, ctx, "AR51.DownloadVideoRequest.FileName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PacketSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          packetsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DownloadVideoRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.DownloadVideoRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string FileName = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.DownloadVideoRequest.FileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PacketSize = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.DownloadVideoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.DownloadVideoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DownloadVideoRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.DownloadVideoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FileName = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.DownloadVideoRequest.FileName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // int32 PacketSize = 2;
  if (this->packetsize() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->packetsize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.DownloadVideoRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadVideoRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.DownloadVideoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FileName = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.DownloadVideoRequest.FileName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // int32 PacketSize = 2;
  if (this->packetsize() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->packetsize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.DownloadVideoRequest)
  return target;
}

size_t DownloadVideoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.DownloadVideoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string FileName = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // int32 PacketSize = 2;
  if (this->packetsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->packetsize());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadVideoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.DownloadVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadVideoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DownloadVideoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.DownloadVideoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.DownloadVideoRequest)
    MergeFrom(*source);
  }
}

void DownloadVideoRequest::MergeFrom(const DownloadVideoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.DownloadVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.packetsize() != 0) {
    set_packetsize(from.packetsize());
  }
}

void DownloadVideoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.DownloadVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadVideoRequest::CopyFrom(const DownloadVideoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.DownloadVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadVideoRequest::IsInitialized() const {
  return true;
}

void DownloadVideoRequest::Swap(DownloadVideoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadVideoRequest::InternalSwap(DownloadVideoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(packetsize_, other->packetsize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadVideoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartRecordingRequest::InitAsDefaultInstance() {
}
class StartRecordingRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartRecordingRequest::kFileNameFieldNumber;
const int StartRecordingRequest::kUseBestSettingFieldNumber;
const int StartRecordingRequest::kCameraIdFieldNumber;
const int StartRecordingRequest::kWidthFieldNumber;
const int StartRecordingRequest::kHeightFieldNumber;
const int StartRecordingRequest::kFrameRateFieldNumber;
const int StartRecordingRequest::kMaxDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartRecordingRequest::StartRecordingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.StartRecordingRequest)
}
StartRecordingRequest::StartRecordingRequest(const StartRecordingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cameraid().size() > 0) {
    cameraid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraid_);
  }
  ::memcpy(&usebestsetting_, &from.usebestsetting_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxduration_) -
    reinterpret_cast<char*>(&usebestsetting_)) + sizeof(maxduration_));
  // @@protoc_insertion_point(copy_constructor:AR51.StartRecordingRequest)
}

void StartRecordingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartRecordingRequest_dgs_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&usebestsetting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxduration_) -
      reinterpret_cast<char*>(&usebestsetting_)) + sizeof(maxduration_));
}

StartRecordingRequest::~StartRecordingRequest() {
  // @@protoc_insertion_point(destructor:AR51.StartRecordingRequest)
  SharedDtor();
}

void StartRecordingRequest::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cameraid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartRecordingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartRecordingRequest& StartRecordingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartRecordingRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void StartRecordingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.StartRecordingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cameraid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&usebestsetting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxduration_) -
      reinterpret_cast<char*>(&usebestsetting_)) + sizeof(maxduration_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartRecordingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string FileName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_filename(), ptr, ctx, "AR51.StartRecordingRequest.FileName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool useBestSetting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          usebestsetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CameraId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cameraid(), ptr, ctx, "AR51.StartRecordingRequest.CameraId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 FrameRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float maxDuration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          maxduration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartRecordingRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.StartRecordingRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string FileName = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.StartRecordingRequest.FileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool useBestSetting = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usebestsetting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CameraId = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cameraid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cameraid().data(), static_cast<int>(this->cameraid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.StartRecordingRequest.CameraId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FrameRate = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &framerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float maxDuration = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxduration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.StartRecordingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.StartRecordingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartRecordingRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.StartRecordingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FileName = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.StartRecordingRequest.FileName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // bool useBestSetting = 2;
  if (this->usebestsetting() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->usebestsetting(), output);
  }

  // string CameraId = 3;
  if (this->cameraid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cameraid().data(), static_cast<int>(this->cameraid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.StartRecordingRequest.CameraId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cameraid(), output);
  }

  // int32 width = 4;
  if (this->width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // int32 height = 5;
  if (this->height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // int32 FrameRate = 6;
  if (this->framerate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->framerate(), output);
  }

  // float maxDuration = 7;
  if (!(this->maxduration() <= 0 && this->maxduration() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->maxduration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.StartRecordingRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* StartRecordingRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.StartRecordingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FileName = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.StartRecordingRequest.FileName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // bool useBestSetting = 2;
  if (this->usebestsetting() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->usebestsetting(), target);
  }

  // string CameraId = 3;
  if (this->cameraid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cameraid().data(), static_cast<int>(this->cameraid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.StartRecordingRequest.CameraId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->cameraid(), target);
  }

  // int32 width = 4;
  if (this->width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // int32 height = 5;
  if (this->height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // int32 FrameRate = 6;
  if (this->framerate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->framerate(), target);
  }

  // float maxDuration = 7;
  if (!(this->maxduration() <= 0 && this->maxduration() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->maxduration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.StartRecordingRequest)
  return target;
}

size_t StartRecordingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.StartRecordingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string FileName = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // string CameraId = 3;
  if (this->cameraid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cameraid());
  }

  // bool useBestSetting = 2;
  if (this->usebestsetting() != 0) {
    total_size += 1 + 1;
  }

  // int32 width = 4;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 5;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 FrameRate = 6;
  if (this->framerate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->framerate());
  }

  // float maxDuration = 7;
  if (!(this->maxduration() <= 0 && this->maxduration() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartRecordingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.StartRecordingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartRecordingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartRecordingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.StartRecordingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.StartRecordingRequest)
    MergeFrom(*source);
  }
}

void StartRecordingRequest::MergeFrom(const StartRecordingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.StartRecordingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.cameraid().size() > 0) {

    cameraid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraid_);
  }
  if (from.usebestsetting() != 0) {
    set_usebestsetting(from.usebestsetting());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.framerate() != 0) {
    set_framerate(from.framerate());
  }
  if (!(from.maxduration() <= 0 && from.maxduration() >= 0)) {
    set_maxduration(from.maxduration());
  }
}

void StartRecordingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.StartRecordingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRecordingRequest::CopyFrom(const StartRecordingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.StartRecordingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRecordingRequest::IsInitialized() const {
  return true;
}

void StartRecordingRequest::Swap(StartRecordingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartRecordingRequest::InternalSwap(StartRecordingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cameraid_.Swap(&other->cameraid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(usebestsetting_, other->usebestsetting_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(framerate_, other->framerate_);
  swap(maxduration_, other->maxduration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRecordingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartRecordingResponse::InitAsDefaultInstance() {
}
class StartRecordingResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartRecordingResponse::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartRecordingResponse::StartRecordingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.StartRecordingResponse)
}
StartRecordingResponse::StartRecordingResponse(const StartRecordingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.StartRecordingResponse)
}

void StartRecordingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartRecordingResponse_dgs_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StartRecordingResponse::~StartRecordingResponse() {
  // @@protoc_insertion_point(destructor:AR51.StartRecordingResponse)
  SharedDtor();
}

void StartRecordingResponse::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartRecordingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartRecordingResponse& StartRecordingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartRecordingResponse_dgs_2eproto.base);
  return *internal_default_instance();
}


void StartRecordingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.StartRecordingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartRecordingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string FileName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_filename(), ptr, ctx, "AR51.StartRecordingResponse.FileName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartRecordingResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.StartRecordingResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string FileName = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.StartRecordingResponse.FileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.StartRecordingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.StartRecordingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartRecordingResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.StartRecordingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FileName = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.StartRecordingResponse.FileName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.StartRecordingResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* StartRecordingResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.StartRecordingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FileName = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.StartRecordingResponse.FileName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.StartRecordingResponse)
  return target;
}

size_t StartRecordingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.StartRecordingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string FileName = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->filename());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartRecordingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.StartRecordingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartRecordingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartRecordingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.StartRecordingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.StartRecordingResponse)
    MergeFrom(*source);
  }
}

void StartRecordingResponse::MergeFrom(const StartRecordingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.StartRecordingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
}

void StartRecordingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.StartRecordingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRecordingResponse::CopyFrom(const StartRecordingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.StartRecordingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRecordingResponse::IsInitialized() const {
  return true;
}

void StartRecordingResponse::Swap(StartRecordingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartRecordingResponse::InternalSwap(StartRecordingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRecordingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoRecordingSettings::InitAsDefaultInstance() {
}
class VideoRecordingSettings::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoRecordingSettings::kCameraIdFieldNumber;
const int VideoRecordingSettings::kWidthFieldNumber;
const int VideoRecordingSettings::kHeightFieldNumber;
const int VideoRecordingSettings::kFrameRateFieldNumber;
const int VideoRecordingSettings::kLensFacingFieldNumber;
const int VideoRecordingSettings::kIsHighSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoRecordingSettings::VideoRecordingSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.VideoRecordingSettings)
}
VideoRecordingSettings::VideoRecordingSettings(const VideoRecordingSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cameraid().size() > 0) {
    cameraid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraid_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&ishighspeed_) -
    reinterpret_cast<char*>(&width_)) + sizeof(ishighspeed_));
  // @@protoc_insertion_point(copy_constructor:AR51.VideoRecordingSettings)
}

void VideoRecordingSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoRecordingSettings_dgs_2eproto.base);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ishighspeed_) -
      reinterpret_cast<char*>(&width_)) + sizeof(ishighspeed_));
}

VideoRecordingSettings::~VideoRecordingSettings() {
  // @@protoc_insertion_point(destructor:AR51.VideoRecordingSettings)
  SharedDtor();
}

void VideoRecordingSettings::SharedDtor() {
  cameraid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoRecordingSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoRecordingSettings& VideoRecordingSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoRecordingSettings_dgs_2eproto.base);
  return *internal_default_instance();
}


void VideoRecordingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.VideoRecordingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameraid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ishighspeed_) -
      reinterpret_cast<char*>(&width_)) + sizeof(ishighspeed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VideoRecordingSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string CameraId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cameraid(), ptr, ctx, "AR51.VideoRecordingSettings.CameraId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 FrameRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.LensFacing LensFacing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_lensfacing(static_cast<::AR51::LensFacing>(val));
        } else goto handle_unusual;
        continue;
      // bool IsHighSpeed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ishighspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VideoRecordingSettings::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.VideoRecordingSettings)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string CameraId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cameraid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cameraid().data(), static_cast<int>(this->cameraid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.VideoRecordingSettings.CameraId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Width = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Height = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FrameRate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &framerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.LensFacing LensFacing = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lensfacing(static_cast< ::AR51::LensFacing >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsHighSpeed = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishighspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.VideoRecordingSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.VideoRecordingSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VideoRecordingSettings::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.VideoRecordingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string CameraId = 1;
  if (this->cameraid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cameraid().data(), static_cast<int>(this->cameraid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.VideoRecordingSettings.CameraId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cameraid(), output);
  }

  // int32 Width = 2;
  if (this->width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // int32 Height = 3;
  if (this->height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // int32 FrameRate = 4;
  if (this->framerate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->framerate(), output);
  }

  // .AR51.LensFacing LensFacing = 5;
  if (this->lensfacing() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->lensfacing(), output);
  }

  // bool IsHighSpeed = 6;
  if (this->ishighspeed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->ishighspeed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.VideoRecordingSettings)
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoRecordingSettings::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.VideoRecordingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string CameraId = 1;
  if (this->cameraid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cameraid().data(), static_cast<int>(this->cameraid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.VideoRecordingSettings.CameraId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->cameraid(), target);
  }

  // int32 Width = 2;
  if (this->width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // int32 Height = 3;
  if (this->height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // int32 FrameRate = 4;
  if (this->framerate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->framerate(), target);
  }

  // .AR51.LensFacing LensFacing = 5;
  if (this->lensfacing() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->lensfacing(), target);
  }

  // bool IsHighSpeed = 6;
  if (this->ishighspeed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->ishighspeed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.VideoRecordingSettings)
  return target;
}

size_t VideoRecordingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.VideoRecordingSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string CameraId = 1;
  if (this->cameraid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cameraid());
  }

  // int32 Width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 Height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 FrameRate = 4;
  if (this->framerate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->framerate());
  }

  // .AR51.LensFacing LensFacing = 5;
  if (this->lensfacing() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->lensfacing());
  }

  // bool IsHighSpeed = 6;
  if (this->ishighspeed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoRecordingSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.VideoRecordingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoRecordingSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoRecordingSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.VideoRecordingSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.VideoRecordingSettings)
    MergeFrom(*source);
  }
}

void VideoRecordingSettings::MergeFrom(const VideoRecordingSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.VideoRecordingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cameraid().size() > 0) {

    cameraid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraid_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.framerate() != 0) {
    set_framerate(from.framerate());
  }
  if (from.lensfacing() != 0) {
    set_lensfacing(from.lensfacing());
  }
  if (from.ishighspeed() != 0) {
    set_ishighspeed(from.ishighspeed());
  }
}

void VideoRecordingSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.VideoRecordingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoRecordingSettings::CopyFrom(const VideoRecordingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.VideoRecordingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRecordingSettings::IsInitialized() const {
  return true;
}

void VideoRecordingSettings::Swap(VideoRecordingSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoRecordingSettings::InternalSwap(VideoRecordingSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cameraid_.Swap(&other->cameraid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(framerate_, other->framerate_);
  swap(lensfacing_, other->lensfacing_);
  swap(ishighspeed_, other->ishighspeed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoRecordingSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetVideoRecordingSettingResponse::InitAsDefaultInstance() {
}
class GetVideoRecordingSettingResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVideoRecordingSettingResponse::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVideoRecordingSettingResponse::GetVideoRecordingSettingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.GetVideoRecordingSettingResponse)
}
GetVideoRecordingSettingResponse::GetVideoRecordingSettingResponse(const GetVideoRecordingSettingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AR51.GetVideoRecordingSettingResponse)
}

void GetVideoRecordingSettingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetVideoRecordingSettingResponse_dgs_2eproto.base);
}

GetVideoRecordingSettingResponse::~GetVideoRecordingSettingResponse() {
  // @@protoc_insertion_point(destructor:AR51.GetVideoRecordingSettingResponse)
  SharedDtor();
}

void GetVideoRecordingSettingResponse::SharedDtor() {
}

void GetVideoRecordingSettingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVideoRecordingSettingResponse& GetVideoRecordingSettingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVideoRecordingSettingResponse_dgs_2eproto.base);
  return *internal_default_instance();
}


void GetVideoRecordingSettingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.GetVideoRecordingSettingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settings_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetVideoRecordingSettingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .AR51.VideoRecordingSettings Settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetVideoRecordingSettingResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.GetVideoRecordingSettingResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AR51.VideoRecordingSettings Settings = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.GetVideoRecordingSettingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.GetVideoRecordingSettingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetVideoRecordingSettingResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.GetVideoRecordingSettingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AR51.VideoRecordingSettings Settings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->settings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.GetVideoRecordingSettingResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVideoRecordingSettingResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.GetVideoRecordingSettingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AR51.VideoRecordingSettings Settings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->settings(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.GetVideoRecordingSettingResponse)
  return target;
}

size_t GetVideoRecordingSettingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.GetVideoRecordingSettingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AR51.VideoRecordingSettings Settings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->settings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->settings(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVideoRecordingSettingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.GetVideoRecordingSettingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVideoRecordingSettingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVideoRecordingSettingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.GetVideoRecordingSettingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.GetVideoRecordingSettingResponse)
    MergeFrom(*source);
  }
}

void GetVideoRecordingSettingResponse::MergeFrom(const GetVideoRecordingSettingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.GetVideoRecordingSettingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settings_.MergeFrom(from.settings_);
}

void GetVideoRecordingSettingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.GetVideoRecordingSettingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVideoRecordingSettingResponse::CopyFrom(const GetVideoRecordingSettingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.GetVideoRecordingSettingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVideoRecordingSettingResponse::IsInitialized() const {
  return true;
}

void GetVideoRecordingSettingResponse::Swap(GetVideoRecordingSettingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVideoRecordingSettingResponse::InternalSwap(GetVideoRecordingSettingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&settings_)->InternalSwap(CastToBase(&other->settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVideoRecordingSettingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraFeedRequest::InitAsDefaultInstance() {
}
class CameraFeedRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraFeedRequest::kJpgQualityFieldNumber;
const int CameraFeedRequest::kMaxWidthFieldNumber;
const int CameraFeedRequest::kMaxHeightFieldNumber;
const int CameraFeedRequest::kFrameRateFieldNumber;
const int CameraFeedRequest::kHologramsEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraFeedRequest::CameraFeedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.CameraFeedRequest)
}
CameraFeedRequest::CameraFeedRequest(const CameraFeedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&jpgquality_, &from.jpgquality_,
    static_cast<size_t>(reinterpret_cast<char*>(&hologramsenabled_) -
    reinterpret_cast<char*>(&jpgquality_)) + sizeof(hologramsenabled_));
  // @@protoc_insertion_point(copy_constructor:AR51.CameraFeedRequest)
}

void CameraFeedRequest::SharedCtor() {
  ::memset(&jpgquality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hologramsenabled_) -
      reinterpret_cast<char*>(&jpgquality_)) + sizeof(hologramsenabled_));
}

CameraFeedRequest::~CameraFeedRequest() {
  // @@protoc_insertion_point(destructor:AR51.CameraFeedRequest)
  SharedDtor();
}

void CameraFeedRequest::SharedDtor() {
}

void CameraFeedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraFeedRequest& CameraFeedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraFeedRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void CameraFeedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.CameraFeedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&jpgquality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hologramsenabled_) -
      reinterpret_cast<char*>(&jpgquality_)) + sizeof(hologramsenabled_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraFeedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 JpgQuality = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          jpgquality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MaxWidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MaxHeight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 FrameRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HologramsEnabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hologramsenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraFeedRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.CameraFeedRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 JpgQuality = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &jpgquality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MaxWidth = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MaxHeight = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FrameRate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &framerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool HologramsEnabled = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hologramsenabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.CameraFeedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.CameraFeedRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraFeedRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.CameraFeedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 JpgQuality = 1;
  if (this->jpgquality() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->jpgquality(), output);
  }

  // int32 MaxWidth = 2;
  if (this->maxwidth() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->maxwidth(), output);
  }

  // int32 MaxHeight = 3;
  if (this->maxheight() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->maxheight(), output);
  }

  // int32 FrameRate = 4;
  if (this->framerate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->framerate(), output);
  }

  // bool HologramsEnabled = 5;
  if (this->hologramsenabled() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->hologramsenabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.CameraFeedRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraFeedRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.CameraFeedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 JpgQuality = 1;
  if (this->jpgquality() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->jpgquality(), target);
  }

  // int32 MaxWidth = 2;
  if (this->maxwidth() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->maxwidth(), target);
  }

  // int32 MaxHeight = 3;
  if (this->maxheight() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->maxheight(), target);
  }

  // int32 FrameRate = 4;
  if (this->framerate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->framerate(), target);
  }

  // bool HologramsEnabled = 5;
  if (this->hologramsenabled() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->hologramsenabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.CameraFeedRequest)
  return target;
}

size_t CameraFeedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.CameraFeedRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 JpgQuality = 1;
  if (this->jpgquality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->jpgquality());
  }

  // int32 MaxWidth = 2;
  if (this->maxwidth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->maxwidth());
  }

  // int32 MaxHeight = 3;
  if (this->maxheight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->maxheight());
  }

  // int32 FrameRate = 4;
  if (this->framerate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->framerate());
  }

  // bool HologramsEnabled = 5;
  if (this->hologramsenabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraFeedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.CameraFeedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraFeedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraFeedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.CameraFeedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.CameraFeedRequest)
    MergeFrom(*source);
  }
}

void CameraFeedRequest::MergeFrom(const CameraFeedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.CameraFeedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.jpgquality() != 0) {
    set_jpgquality(from.jpgquality());
  }
  if (from.maxwidth() != 0) {
    set_maxwidth(from.maxwidth());
  }
  if (from.maxheight() != 0) {
    set_maxheight(from.maxheight());
  }
  if (from.framerate() != 0) {
    set_framerate(from.framerate());
  }
  if (from.hologramsenabled() != 0) {
    set_hologramsenabled(from.hologramsenabled());
  }
}

void CameraFeedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.CameraFeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraFeedRequest::CopyFrom(const CameraFeedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.CameraFeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraFeedRequest::IsInitialized() const {
  return true;
}

void CameraFeedRequest::Swap(CameraFeedRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraFeedRequest::InternalSwap(CameraFeedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(jpgquality_, other->jpgquality_);
  swap(maxwidth_, other->maxwidth_);
  swap(maxheight_, other->maxheight_);
  swap(framerate_, other->framerate_);
  swap(hologramsenabled_, other->hologramsenabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraFeedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraFeedResponse::InitAsDefaultInstance() {
}
class CameraFeedResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraFeedResponse::kIdFieldNumber;
const int CameraFeedResponse::kCameraToWorldFieldNumber;
const int CameraFeedResponse::kProjectionFieldNumber;
const int CameraFeedResponse::kJpgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraFeedResponse::CameraFeedResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.CameraFeedResponse)
}
CameraFeedResponse::CameraFeedResponse(const CameraFeedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cameratoworld_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cameratoworld().size() > 0) {
    cameratoworld_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameratoworld_);
  }
  projection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.projection().size() > 0) {
    projection_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.projection_);
  }
  jpg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.jpg().size() > 0) {
    jpg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jpg_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:AR51.CameraFeedResponse)
}

void CameraFeedResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraFeedResponse_dgs_2eproto.base);
  cameratoworld_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jpg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

CameraFeedResponse::~CameraFeedResponse() {
  // @@protoc_insertion_point(destructor:AR51.CameraFeedResponse)
  SharedDtor();
}

void CameraFeedResponse::SharedDtor() {
  cameratoworld_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jpg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CameraFeedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraFeedResponse& CameraFeedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraFeedResponse_dgs_2eproto.base);
  return *internal_default_instance();
}


void CameraFeedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.CameraFeedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameratoworld_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jpg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraFeedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes CameraToWorld = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_cameratoworld(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Projection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_projection(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Jpg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_jpg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraFeedResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.CameraFeedResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes CameraToWorld = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cameratoworld()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Projection = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_projection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Jpg = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jpg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.CameraFeedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.CameraFeedResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraFeedResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.CameraFeedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // bytes CameraToWorld = 2;
  if (this->cameratoworld().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cameratoworld(), output);
  }

  // bytes Projection = 3;
  if (this->projection().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->projection(), output);
  }

  // bytes Jpg = 4;
  if (this->jpg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->jpg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.CameraFeedResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraFeedResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.CameraFeedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // bytes CameraToWorld = 2;
  if (this->cameratoworld().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->cameratoworld(), target);
  }

  // bytes Projection = 3;
  if (this->projection().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->projection(), target);
  }

  // bytes Jpg = 4;
  if (this->jpg().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->jpg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.CameraFeedResponse)
  return target;
}

size_t CameraFeedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.CameraFeedResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes CameraToWorld = 2;
  if (this->cameratoworld().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->cameratoworld());
  }

  // bytes Projection = 3;
  if (this->projection().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->projection());
  }

  // bytes Jpg = 4;
  if (this->jpg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->jpg());
  }

  // int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraFeedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.CameraFeedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraFeedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraFeedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.CameraFeedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.CameraFeedResponse)
    MergeFrom(*source);
  }
}

void CameraFeedResponse::MergeFrom(const CameraFeedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.CameraFeedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cameratoworld().size() > 0) {

    cameratoworld_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameratoworld_);
  }
  if (from.projection().size() > 0) {

    projection_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.projection_);
  }
  if (from.jpg().size() > 0) {

    jpg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jpg_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void CameraFeedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.CameraFeedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraFeedResponse::CopyFrom(const CameraFeedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.CameraFeedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraFeedResponse::IsInitialized() const {
  return true;
}

void CameraFeedResponse::Swap(CameraFeedResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraFeedResponse::InternalSwap(CameraFeedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cameratoworld_.Swap(&other->cameratoworld_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  projection_.Swap(&other->projection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  jpg_.Swap(&other->jpg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraFeedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RenderingRequest::InitAsDefaultInstance() {
}
class RenderingRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RenderingRequest::kCameraIdFieldNumber;
const int RenderingRequest::kIpAddressFieldNumber;
const int RenderingRequest::kPortFieldNumber;
const int RenderingRequest::kWidthFieldNumber;
const int RenderingRequest::kHeightFieldNumber;
const int RenderingRequest::kFrameRateFieldNumber;
const int RenderingRequest::kJpgQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenderingRequest::RenderingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.RenderingRequest)
}
RenderingRequest::RenderingRequest(const RenderingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cameraid().size() > 0) {
    cameraid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraid_);
  }
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ipaddress().size() > 0) {
    ipaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&jpgquality_) -
    reinterpret_cast<char*>(&port_)) + sizeof(jpgquality_));
  // @@protoc_insertion_point(copy_constructor:AR51.RenderingRequest)
}

void RenderingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RenderingRequest_dgs_2eproto.base);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jpgquality_) -
      reinterpret_cast<char*>(&port_)) + sizeof(jpgquality_));
}

RenderingRequest::~RenderingRequest() {
  // @@protoc_insertion_point(destructor:AR51.RenderingRequest)
  SharedDtor();
}

void RenderingRequest::SharedDtor() {
  cameraid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RenderingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenderingRequest& RenderingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RenderingRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void RenderingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.RenderingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameraid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jpgquality_) -
      reinterpret_cast<char*>(&port_)) + sizeof(jpgquality_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RenderingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string CameraId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cameraid(), ptr, ctx, "AR51.RenderingRequest.CameraId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string IpAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ipaddress(), ptr, ctx, "AR51.RenderingRequest.IpAddress");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 FrameRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 JpgQuality = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          jpgquality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RenderingRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.RenderingRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string CameraId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cameraid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cameraid().data(), static_cast<int>(this->cameraid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.RenderingRequest.CameraId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string IpAddress = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddress().data(), static_cast<int>(this->ipaddress().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.RenderingRequest.IpAddress"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Port = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Width = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Height = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FrameRate = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &framerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 JpgQuality = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &jpgquality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.RenderingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.RenderingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RenderingRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.RenderingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string CameraId = 1;
  if (this->cameraid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cameraid().data(), static_cast<int>(this->cameraid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.RenderingRequest.CameraId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cameraid(), output);
  }

  // string IpAddress = 2;
  if (this->ipaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), static_cast<int>(this->ipaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.RenderingRequest.IpAddress");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ipaddress(), output);
  }

  // int32 Port = 3;
  if (this->port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // int32 Width = 4;
  if (this->width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // int32 Height = 5;
  if (this->height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // int32 FrameRate = 6;
  if (this->framerate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->framerate(), output);
  }

  // int32 JpgQuality = 7;
  if (this->jpgquality() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->jpgquality(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.RenderingRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RenderingRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.RenderingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string CameraId = 1;
  if (this->cameraid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cameraid().data(), static_cast<int>(this->cameraid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.RenderingRequest.CameraId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->cameraid(), target);
  }

  // string IpAddress = 2;
  if (this->ipaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), static_cast<int>(this->ipaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.RenderingRequest.IpAddress");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->ipaddress(), target);
  }

  // int32 Port = 3;
  if (this->port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // int32 Width = 4;
  if (this->width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // int32 Height = 5;
  if (this->height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // int32 FrameRate = 6;
  if (this->framerate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->framerate(), target);
  }

  // int32 JpgQuality = 7;
  if (this->jpgquality() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->jpgquality(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.RenderingRequest)
  return target;
}

size_t RenderingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.RenderingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string CameraId = 1;
  if (this->cameraid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cameraid());
  }

  // string IpAddress = 2;
  if (this->ipaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ipaddress());
  }

  // int32 Port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 Width = 4;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 Height = 5;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 FrameRate = 6;
  if (this->framerate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->framerate());
  }

  // int32 JpgQuality = 7;
  if (this->jpgquality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->jpgquality());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenderingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.RenderingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RenderingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenderingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.RenderingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.RenderingRequest)
    MergeFrom(*source);
  }
}

void RenderingRequest::MergeFrom(const RenderingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.RenderingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cameraid().size() > 0) {

    cameraid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraid_);
  }
  if (from.ipaddress().size() > 0) {

    ipaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.framerate() != 0) {
    set_framerate(from.framerate());
  }
  if (from.jpgquality() != 0) {
    set_jpgquality(from.jpgquality());
  }
}

void RenderingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.RenderingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenderingRequest::CopyFrom(const RenderingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.RenderingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderingRequest::IsInitialized() const {
  return true;
}

void RenderingRequest::Swap(RenderingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenderingRequest::InternalSwap(RenderingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cameraid_.Swap(&other->cameraid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipaddress_.Swap(&other->ipaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(framerate_, other->framerate_);
  swap(jpgquality_, other->jpgquality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenderingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RenderingResponse::InitAsDefaultInstance() {
}
class RenderingResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RenderingResponse::kJpgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenderingResponse::RenderingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.RenderingResponse)
}
RenderingResponse::RenderingResponse(const RenderingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  jpg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.jpg().size() > 0) {
    jpg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jpg_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.RenderingResponse)
}

void RenderingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RenderingResponse_dgs_2eproto.base);
  jpg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RenderingResponse::~RenderingResponse() {
  // @@protoc_insertion_point(destructor:AR51.RenderingResponse)
  SharedDtor();
}

void RenderingResponse::SharedDtor() {
  jpg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RenderingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenderingResponse& RenderingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RenderingResponse_dgs_2eproto.base);
  return *internal_default_instance();
}


void RenderingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.RenderingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jpg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RenderingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes Jpg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_jpg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RenderingResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.RenderingResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes Jpg = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jpg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.RenderingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.RenderingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RenderingResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.RenderingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Jpg = 1;
  if (this->jpg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->jpg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.RenderingResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RenderingResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.RenderingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Jpg = 1;
  if (this->jpg().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->jpg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.RenderingResponse)
  return target;
}

size_t RenderingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.RenderingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Jpg = 1;
  if (this->jpg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->jpg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenderingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.RenderingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RenderingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenderingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.RenderingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.RenderingResponse)
    MergeFrom(*source);
  }
}

void RenderingResponse::MergeFrom(const RenderingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.RenderingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.jpg().size() > 0) {

    jpg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jpg_);
  }
}

void RenderingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.RenderingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenderingResponse::CopyFrom(const RenderingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.RenderingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderingResponse::IsInitialized() const {
  return true;
}

void RenderingResponse::Swap(RenderingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenderingResponse::InternalSwap(RenderingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jpg_.Swap(&other->jpg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RenderingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawRequest::InitAsDefaultInstance() {
  ::AR51::_DrawRequest_default_instance_._instance.get_mutable()->color_ = const_cast< ::AR51::Color*>(
      ::AR51::Color::internal_default_instance());
  ::AR51::_DrawRequest_default_instance_._instance.get_mutable()->fillcolor_ = const_cast< ::AR51::Color*>(
      ::AR51::Color::internal_default_instance());
}
class DrawRequest::HasBitSetters {
 public:
  static const ::AR51::Color& color(const DrawRequest* msg);
  static const ::AR51::Color& fillcolor(const DrawRequest* msg);
};

const ::AR51::Color&
DrawRequest::HasBitSetters::color(const DrawRequest* msg) {
  return *msg->color_;
}
const ::AR51::Color&
DrawRequest::HasBitSetters::fillcolor(const DrawRequest* msg) {
  return *msg->fillcolor_;
}
void DrawRequest::clear_color() {
  if (GetArenaNoVirtual() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
void DrawRequest::clear_fillcolor() {
  if (GetArenaNoVirtual() == nullptr && fillcolor_ != nullptr) {
    delete fillcolor_;
  }
  fillcolor_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrawRequest::kTextFieldNumber;
const int DrawRequest::kLineWidthFieldNumber;
const int DrawRequest::kColorFieldNumber;
const int DrawRequest::kFillColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrawRequest::DrawRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.DrawRequest)
}
DrawRequest::DrawRequest(const DrawRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_color()) {
    color_ = new ::AR51::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  if (from.has_fillcolor()) {
    fillcolor_ = new ::AR51::Color(*from.fillcolor_);
  } else {
    fillcolor_ = nullptr;
  }
  linewidth_ = from.linewidth_;
  // @@protoc_insertion_point(copy_constructor:AR51.DrawRequest)
}

void DrawRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrawRequest_dgs_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linewidth_) -
      reinterpret_cast<char*>(&color_)) + sizeof(linewidth_));
}

DrawRequest::~DrawRequest() {
  // @@protoc_insertion_point(destructor:AR51.DrawRequest)
  SharedDtor();
}

void DrawRequest::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete fillcolor_;
}

void DrawRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawRequest& DrawRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void DrawRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.DrawRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fillcolor_ != nullptr) {
    delete fillcolor_;
  }
  fillcolor_ = nullptr;
  linewidth_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DrawRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_text(), ptr, ctx, "AR51.DrawRequest.Text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float LineWidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          linewidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .AR51.Color Color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Color FillColor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_fillcolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DrawRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.DrawRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Text = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.DrawRequest.Text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float LineWidth = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linewidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Color Color = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Color FillColor = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fillcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.DrawRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.DrawRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DrawRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.DrawRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.DrawRequest.Text");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // float LineWidth = 2;
  if (!(this->linewidth() <= 0 && this->linewidth() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->linewidth(), output);
  }

  // .AR51.Color Color = 3;
  if (this->has_color()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::color(this), output);
  }

  // .AR51.Color FillColor = 4;
  if (this->has_fillcolor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::fillcolor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.DrawRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.DrawRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.DrawRequest.Text");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // float LineWidth = 2;
  if (!(this->linewidth() <= 0 && this->linewidth() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->linewidth(), target);
  }

  // .AR51.Color Color = 3;
  if (this->has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::color(this), target);
  }

  // .AR51.Color FillColor = 4;
  if (this->has_fillcolor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::fillcolor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.DrawRequest)
  return target;
}

size_t DrawRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.DrawRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->text());
  }

  // .AR51.Color Color = 3;
  if (this->has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // .AR51.Color FillColor = 4;
  if (this->has_fillcolor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fillcolor_);
  }

  // float LineWidth = 2;
  if (!(this->linewidth() <= 0 && this->linewidth() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.DrawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.DrawRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.DrawRequest)
    MergeFrom(*source);
  }
}

void DrawRequest::MergeFrom(const DrawRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.DrawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_color()) {
    mutable_color()->::AR51::Color::MergeFrom(from.color());
  }
  if (from.has_fillcolor()) {
    mutable_fillcolor()->::AR51::Color::MergeFrom(from.fillcolor());
  }
  if (!(from.linewidth() <= 0 && from.linewidth() >= 0)) {
    set_linewidth(from.linewidth());
  }
}

void DrawRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.DrawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawRequest::CopyFrom(const DrawRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.DrawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawRequest::IsInitialized() const {
  return true;
}

void DrawRequest::Swap(DrawRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrawRequest::InternalSwap(DrawRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(color_, other->color_);
  swap(fillcolor_, other->fillcolor_);
  swap(linewidth_, other->linewidth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawLine2DRequest::InitAsDefaultInstance() {
  ::AR51::_DrawLine2DRequest_default_instance_._instance.get_mutable()->settings_ = const_cast< ::AR51::DrawRequest*>(
      ::AR51::DrawRequest::internal_default_instance());
  ::AR51::_DrawLine2DRequest_default_instance_._instance.get_mutable()->from_ = const_cast< ::AR51::Vector2*>(
      ::AR51::Vector2::internal_default_instance());
  ::AR51::_DrawLine2DRequest_default_instance_._instance.get_mutable()->to_ = const_cast< ::AR51::Vector2*>(
      ::AR51::Vector2::internal_default_instance());
}
class DrawLine2DRequest::HasBitSetters {
 public:
  static const ::AR51::DrawRequest& settings(const DrawLine2DRequest* msg);
  static const ::AR51::Vector2& from(const DrawLine2DRequest* msg);
  static const ::AR51::Vector2& to(const DrawLine2DRequest* msg);
};

const ::AR51::DrawRequest&
DrawLine2DRequest::HasBitSetters::settings(const DrawLine2DRequest* msg) {
  return *msg->settings_;
}
const ::AR51::Vector2&
DrawLine2DRequest::HasBitSetters::from(const DrawLine2DRequest* msg) {
  return *msg->from_;
}
const ::AR51::Vector2&
DrawLine2DRequest::HasBitSetters::to(const DrawLine2DRequest* msg) {
  return *msg->to_;
}
void DrawLine2DRequest::clear_from() {
  if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
void DrawLine2DRequest::clear_to() {
  if (GetArenaNoVirtual() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrawLine2DRequest::kSettingsFieldNumber;
const int DrawLine2DRequest::kFromFieldNumber;
const int DrawLine2DRequest::kToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrawLine2DRequest::DrawLine2DRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.DrawLine2DRequest)
}
DrawLine2DRequest::DrawLine2DRequest(const DrawLine2DRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_settings()) {
    settings_ = new ::AR51::DrawRequest(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from.has_from()) {
    from_ = new ::AR51::Vector2(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from.has_to()) {
    to_ = new ::AR51::Vector2(*from.to_);
  } else {
    to_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AR51.DrawLine2DRequest)
}

void DrawLine2DRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrawLine2DRequest_dgs_2eproto.base);
  ::memset(&settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(to_));
}

DrawLine2DRequest::~DrawLine2DRequest() {
  // @@protoc_insertion_point(destructor:AR51.DrawLine2DRequest)
  SharedDtor();
}

void DrawLine2DRequest::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
}

void DrawLine2DRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawLine2DRequest& DrawLine2DRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawLine2DRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void DrawLine2DRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.DrawLine2DRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DrawLine2DRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AR51.DrawRequest Settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector2 From = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector2 To = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DrawLine2DRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.DrawLine2DRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AR51.DrawRequest Settings = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector2 From = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector2 To = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.DrawLine2DRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.DrawLine2DRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DrawLine2DRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.DrawLine2DRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::settings(this), output);
  }

  // .AR51.Vector2 From = 2;
  if (this->has_from()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::from(this), output);
  }

  // .AR51.Vector2 To = 3;
  if (this->has_to()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::to(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.DrawLine2DRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawLine2DRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.DrawLine2DRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::settings(this), target);
  }

  // .AR51.Vector2 From = 2;
  if (this->has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::from(this), target);
  }

  // .AR51.Vector2 To = 3;
  if (this->has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::to(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.DrawLine2DRequest)
  return target;
}

size_t DrawLine2DRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.DrawLine2DRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  // .AR51.Vector2 From = 2;
  if (this->has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .AR51.Vector2 To = 3;
  if (this->has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawLine2DRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.DrawLine2DRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawLine2DRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawLine2DRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.DrawLine2DRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.DrawLine2DRequest)
    MergeFrom(*source);
  }
}

void DrawLine2DRequest::MergeFrom(const DrawLine2DRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.DrawLine2DRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_settings()) {
    mutable_settings()->::AR51::DrawRequest::MergeFrom(from.settings());
  }
  if (from.has_from()) {
    mutable_from()->::AR51::Vector2::MergeFrom(from.from());
  }
  if (from.has_to()) {
    mutable_to()->::AR51::Vector2::MergeFrom(from.to());
  }
}

void DrawLine2DRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.DrawLine2DRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawLine2DRequest::CopyFrom(const DrawLine2DRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.DrawLine2DRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawLine2DRequest::IsInitialized() const {
  return true;
}

void DrawLine2DRequest::Swap(DrawLine2DRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrawLine2DRequest::InternalSwap(DrawLine2DRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(settings_, other->settings_);
  swap(from_, other->from_);
  swap(to_, other->to_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawLine2DRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawLine3DRequest::InitAsDefaultInstance() {
  ::AR51::_DrawLine3DRequest_default_instance_._instance.get_mutable()->settings_ = const_cast< ::AR51::DrawRequest*>(
      ::AR51::DrawRequest::internal_default_instance());
  ::AR51::_DrawLine3DRequest_default_instance_._instance.get_mutable()->from_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
  ::AR51::_DrawLine3DRequest_default_instance_._instance.get_mutable()->to_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
}
class DrawLine3DRequest::HasBitSetters {
 public:
  static const ::AR51::DrawRequest& settings(const DrawLine3DRequest* msg);
  static const ::AR51::Vector3& from(const DrawLine3DRequest* msg);
  static const ::AR51::Vector3& to(const DrawLine3DRequest* msg);
};

const ::AR51::DrawRequest&
DrawLine3DRequest::HasBitSetters::settings(const DrawLine3DRequest* msg) {
  return *msg->settings_;
}
const ::AR51::Vector3&
DrawLine3DRequest::HasBitSetters::from(const DrawLine3DRequest* msg) {
  return *msg->from_;
}
const ::AR51::Vector3&
DrawLine3DRequest::HasBitSetters::to(const DrawLine3DRequest* msg) {
  return *msg->to_;
}
void DrawLine3DRequest::clear_from() {
  if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
void DrawLine3DRequest::clear_to() {
  if (GetArenaNoVirtual() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrawLine3DRequest::kSettingsFieldNumber;
const int DrawLine3DRequest::kFromFieldNumber;
const int DrawLine3DRequest::kToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrawLine3DRequest::DrawLine3DRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.DrawLine3DRequest)
}
DrawLine3DRequest::DrawLine3DRequest(const DrawLine3DRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_settings()) {
    settings_ = new ::AR51::DrawRequest(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from.has_from()) {
    from_ = new ::AR51::Vector3(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from.has_to()) {
    to_ = new ::AR51::Vector3(*from.to_);
  } else {
    to_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AR51.DrawLine3DRequest)
}

void DrawLine3DRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrawLine3DRequest_dgs_2eproto.base);
  ::memset(&settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(to_));
}

DrawLine3DRequest::~DrawLine3DRequest() {
  // @@protoc_insertion_point(destructor:AR51.DrawLine3DRequest)
  SharedDtor();
}

void DrawLine3DRequest::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
}

void DrawLine3DRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawLine3DRequest& DrawLine3DRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawLine3DRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void DrawLine3DRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.DrawLine3DRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DrawLine3DRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AR51.DrawRequest Settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector3 From = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector3 To = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DrawLine3DRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.DrawLine3DRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AR51.DrawRequest Settings = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector3 From = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector3 To = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.DrawLine3DRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.DrawLine3DRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DrawLine3DRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.DrawLine3DRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::settings(this), output);
  }

  // .AR51.Vector3 From = 2;
  if (this->has_from()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::from(this), output);
  }

  // .AR51.Vector3 To = 3;
  if (this->has_to()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::to(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.DrawLine3DRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawLine3DRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.DrawLine3DRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::settings(this), target);
  }

  // .AR51.Vector3 From = 2;
  if (this->has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::from(this), target);
  }

  // .AR51.Vector3 To = 3;
  if (this->has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::to(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.DrawLine3DRequest)
  return target;
}

size_t DrawLine3DRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.DrawLine3DRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  // .AR51.Vector3 From = 2;
  if (this->has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .AR51.Vector3 To = 3;
  if (this->has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawLine3DRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.DrawLine3DRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawLine3DRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawLine3DRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.DrawLine3DRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.DrawLine3DRequest)
    MergeFrom(*source);
  }
}

void DrawLine3DRequest::MergeFrom(const DrawLine3DRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.DrawLine3DRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_settings()) {
    mutable_settings()->::AR51::DrawRequest::MergeFrom(from.settings());
  }
  if (from.has_from()) {
    mutable_from()->::AR51::Vector3::MergeFrom(from.from());
  }
  if (from.has_to()) {
    mutable_to()->::AR51::Vector3::MergeFrom(from.to());
  }
}

void DrawLine3DRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.DrawLine3DRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawLine3DRequest::CopyFrom(const DrawLine3DRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.DrawLine3DRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawLine3DRequest::IsInitialized() const {
  return true;
}

void DrawLine3DRequest::Swap(DrawLine3DRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrawLine3DRequest::InternalSwap(DrawLine3DRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(settings_, other->settings_);
  swap(from_, other->from_);
  swap(to_, other->to_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawLine3DRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawRectRequest::InitAsDefaultInstance() {
  ::AR51::_DrawRectRequest_default_instance_._instance.get_mutable()->settings_ = const_cast< ::AR51::DrawRequest*>(
      ::AR51::DrawRequest::internal_default_instance());
  ::AR51::_DrawRectRequest_default_instance_._instance.get_mutable()->center_ = const_cast< ::AR51::Vector2*>(
      ::AR51::Vector2::internal_default_instance());
  ::AR51::_DrawRectRequest_default_instance_._instance.get_mutable()->size_ = const_cast< ::AR51::Vector2*>(
      ::AR51::Vector2::internal_default_instance());
}
class DrawRectRequest::HasBitSetters {
 public:
  static const ::AR51::DrawRequest& settings(const DrawRectRequest* msg);
  static const ::AR51::Vector2& center(const DrawRectRequest* msg);
  static const ::AR51::Vector2& size(const DrawRectRequest* msg);
};

const ::AR51::DrawRequest&
DrawRectRequest::HasBitSetters::settings(const DrawRectRequest* msg) {
  return *msg->settings_;
}
const ::AR51::Vector2&
DrawRectRequest::HasBitSetters::center(const DrawRectRequest* msg) {
  return *msg->center_;
}
const ::AR51::Vector2&
DrawRectRequest::HasBitSetters::size(const DrawRectRequest* msg) {
  return *msg->size_;
}
void DrawRectRequest::clear_center() {
  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
void DrawRectRequest::clear_size() {
  if (GetArenaNoVirtual() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrawRectRequest::kSettingsFieldNumber;
const int DrawRectRequest::kCenterFieldNumber;
const int DrawRectRequest::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrawRectRequest::DrawRectRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.DrawRectRequest)
}
DrawRectRequest::DrawRectRequest(const DrawRectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_settings()) {
    settings_ = new ::AR51::DrawRequest(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from.has_center()) {
    center_ = new ::AR51::Vector2(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from.has_size()) {
    size_ = new ::AR51::Vector2(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AR51.DrawRectRequest)
}

void DrawRectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrawRectRequest_dgs_2eproto.base);
  ::memset(&settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(size_));
}

DrawRectRequest::~DrawRectRequest() {
  // @@protoc_insertion_point(destructor:AR51.DrawRectRequest)
  SharedDtor();
}

void DrawRectRequest::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete size_;
}

void DrawRectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawRectRequest& DrawRectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawRectRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void DrawRectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.DrawRectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DrawRectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AR51.DrawRequest Settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector2 Center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector2 Size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DrawRectRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.DrawRectRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AR51.DrawRequest Settings = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector2 Center = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector2 Size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.DrawRectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.DrawRectRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DrawRectRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.DrawRectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::settings(this), output);
  }

  // .AR51.Vector2 Center = 2;
  if (this->has_center()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::center(this), output);
  }

  // .AR51.Vector2 Size = 3;
  if (this->has_size()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::size(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.DrawRectRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawRectRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.DrawRectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::settings(this), target);
  }

  // .AR51.Vector2 Center = 2;
  if (this->has_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::center(this), target);
  }

  // .AR51.Vector2 Size = 3;
  if (this->has_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::size(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.DrawRectRequest)
  return target;
}

size_t DrawRectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.DrawRectRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  // .AR51.Vector2 Center = 2;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // .AR51.Vector2 Size = 3;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawRectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.DrawRectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawRectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawRectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.DrawRectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.DrawRectRequest)
    MergeFrom(*source);
  }
}

void DrawRectRequest::MergeFrom(const DrawRectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.DrawRectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_settings()) {
    mutable_settings()->::AR51::DrawRequest::MergeFrom(from.settings());
  }
  if (from.has_center()) {
    mutable_center()->::AR51::Vector2::MergeFrom(from.center());
  }
  if (from.has_size()) {
    mutable_size()->::AR51::Vector2::MergeFrom(from.size());
  }
}

void DrawRectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.DrawRectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawRectRequest::CopyFrom(const DrawRectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.DrawRectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawRectRequest::IsInitialized() const {
  return true;
}

void DrawRectRequest::Swap(DrawRectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrawRectRequest::InternalSwap(DrawRectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(settings_, other->settings_);
  swap(center_, other->center_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawRectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawCubeRequest::InitAsDefaultInstance() {
  ::AR51::_DrawCubeRequest_default_instance_._instance.get_mutable()->settings_ = const_cast< ::AR51::DrawRequest*>(
      ::AR51::DrawRequest::internal_default_instance());
  ::AR51::_DrawCubeRequest_default_instance_._instance.get_mutable()->center_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
  ::AR51::_DrawCubeRequest_default_instance_._instance.get_mutable()->size_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
}
class DrawCubeRequest::HasBitSetters {
 public:
  static const ::AR51::DrawRequest& settings(const DrawCubeRequest* msg);
  static const ::AR51::Vector3& center(const DrawCubeRequest* msg);
  static const ::AR51::Vector3& size(const DrawCubeRequest* msg);
};

const ::AR51::DrawRequest&
DrawCubeRequest::HasBitSetters::settings(const DrawCubeRequest* msg) {
  return *msg->settings_;
}
const ::AR51::Vector3&
DrawCubeRequest::HasBitSetters::center(const DrawCubeRequest* msg) {
  return *msg->center_;
}
const ::AR51::Vector3&
DrawCubeRequest::HasBitSetters::size(const DrawCubeRequest* msg) {
  return *msg->size_;
}
void DrawCubeRequest::clear_center() {
  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
void DrawCubeRequest::clear_size() {
  if (GetArenaNoVirtual() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrawCubeRequest::kSettingsFieldNumber;
const int DrawCubeRequest::kCenterFieldNumber;
const int DrawCubeRequest::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrawCubeRequest::DrawCubeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.DrawCubeRequest)
}
DrawCubeRequest::DrawCubeRequest(const DrawCubeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_settings()) {
    settings_ = new ::AR51::DrawRequest(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from.has_center()) {
    center_ = new ::AR51::Vector3(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from.has_size()) {
    size_ = new ::AR51::Vector3(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AR51.DrawCubeRequest)
}

void DrawCubeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrawCubeRequest_dgs_2eproto.base);
  ::memset(&settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(size_));
}

DrawCubeRequest::~DrawCubeRequest() {
  // @@protoc_insertion_point(destructor:AR51.DrawCubeRequest)
  SharedDtor();
}

void DrawCubeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete size_;
}

void DrawCubeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawCubeRequest& DrawCubeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawCubeRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void DrawCubeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.DrawCubeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DrawCubeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AR51.DrawRequest Settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector3 Center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector3 Size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DrawCubeRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.DrawCubeRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AR51.DrawRequest Settings = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector3 Center = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector3 Size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.DrawCubeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.DrawCubeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DrawCubeRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.DrawCubeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::settings(this), output);
  }

  // .AR51.Vector3 Center = 2;
  if (this->has_center()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::center(this), output);
  }

  // .AR51.Vector3 Size = 3;
  if (this->has_size()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::size(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.DrawCubeRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawCubeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.DrawCubeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::settings(this), target);
  }

  // .AR51.Vector3 Center = 2;
  if (this->has_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::center(this), target);
  }

  // .AR51.Vector3 Size = 3;
  if (this->has_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::size(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.DrawCubeRequest)
  return target;
}

size_t DrawCubeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.DrawCubeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  // .AR51.Vector3 Center = 2;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // .AR51.Vector3 Size = 3;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawCubeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.DrawCubeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawCubeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawCubeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.DrawCubeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.DrawCubeRequest)
    MergeFrom(*source);
  }
}

void DrawCubeRequest::MergeFrom(const DrawCubeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.DrawCubeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_settings()) {
    mutable_settings()->::AR51::DrawRequest::MergeFrom(from.settings());
  }
  if (from.has_center()) {
    mutable_center()->::AR51::Vector3::MergeFrom(from.center());
  }
  if (from.has_size()) {
    mutable_size()->::AR51::Vector3::MergeFrom(from.size());
  }
}

void DrawCubeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.DrawCubeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawCubeRequest::CopyFrom(const DrawCubeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.DrawCubeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawCubeRequest::IsInitialized() const {
  return true;
}

void DrawCubeRequest::Swap(DrawCubeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrawCubeRequest::InternalSwap(DrawCubeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(settings_, other->settings_);
  swap(center_, other->center_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawCubeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawCircleRequest::InitAsDefaultInstance() {
  ::AR51::_DrawCircleRequest_default_instance_._instance.get_mutable()->settings_ = const_cast< ::AR51::DrawRequest*>(
      ::AR51::DrawRequest::internal_default_instance());
  ::AR51::_DrawCircleRequest_default_instance_._instance.get_mutable()->center_ = const_cast< ::AR51::Vector2*>(
      ::AR51::Vector2::internal_default_instance());
}
class DrawCircleRequest::HasBitSetters {
 public:
  static const ::AR51::DrawRequest& settings(const DrawCircleRequest* msg);
  static const ::AR51::Vector2& center(const DrawCircleRequest* msg);
};

const ::AR51::DrawRequest&
DrawCircleRequest::HasBitSetters::settings(const DrawCircleRequest* msg) {
  return *msg->settings_;
}
const ::AR51::Vector2&
DrawCircleRequest::HasBitSetters::center(const DrawCircleRequest* msg) {
  return *msg->center_;
}
void DrawCircleRequest::clear_center() {
  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrawCircleRequest::kSettingsFieldNumber;
const int DrawCircleRequest::kCenterFieldNumber;
const int DrawCircleRequest::kRadiusFieldNumber;
const int DrawCircleRequest::kSegmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrawCircleRequest::DrawCircleRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.DrawCircleRequest)
}
DrawCircleRequest::DrawCircleRequest(const DrawCircleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_settings()) {
    settings_ = new ::AR51::DrawRequest(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from.has_center()) {
    center_ = new ::AR51::Vector2(*from.center_);
  } else {
    center_ = nullptr;
  }
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&segments_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(segments_));
  // @@protoc_insertion_point(copy_constructor:AR51.DrawCircleRequest)
}

void DrawCircleRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrawCircleRequest_dgs_2eproto.base);
  ::memset(&settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segments_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(segments_));
}

DrawCircleRequest::~DrawCircleRequest() {
  // @@protoc_insertion_point(destructor:AR51.DrawCircleRequest)
  SharedDtor();
}

void DrawCircleRequest::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete center_;
}

void DrawCircleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawCircleRequest& DrawCircleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawCircleRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void DrawCircleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.DrawCircleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segments_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(segments_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DrawCircleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AR51.DrawRequest Settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector2 Center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Radius = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 Segments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          segments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DrawCircleRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.DrawCircleRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AR51.DrawRequest Settings = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector2 Center = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Radius = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Segments = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &segments_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.DrawCircleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.DrawCircleRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DrawCircleRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.DrawCircleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::settings(this), output);
  }

  // .AR51.Vector2 Center = 2;
  if (this->has_center()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::center(this), output);
  }

  // float Radius = 3;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->radius(), output);
  }

  // int32 Segments = 4;
  if (this->segments() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->segments(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.DrawCircleRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawCircleRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.DrawCircleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::settings(this), target);
  }

  // .AR51.Vector2 Center = 2;
  if (this->has_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::center(this), target);
  }

  // float Radius = 3;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->radius(), target);
  }

  // int32 Segments = 4;
  if (this->segments() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->segments(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.DrawCircleRequest)
  return target;
}

size_t DrawCircleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.DrawCircleRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  // .AR51.Vector2 Center = 2;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // float Radius = 3;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 Segments = 4;
  if (this->segments() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->segments());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawCircleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.DrawCircleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawCircleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawCircleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.DrawCircleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.DrawCircleRequest)
    MergeFrom(*source);
  }
}

void DrawCircleRequest::MergeFrom(const DrawCircleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.DrawCircleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_settings()) {
    mutable_settings()->::AR51::DrawRequest::MergeFrom(from.settings());
  }
  if (from.has_center()) {
    mutable_center()->::AR51::Vector2::MergeFrom(from.center());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    set_radius(from.radius());
  }
  if (from.segments() != 0) {
    set_segments(from.segments());
  }
}

void DrawCircleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.DrawCircleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawCircleRequest::CopyFrom(const DrawCircleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.DrawCircleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawCircleRequest::IsInitialized() const {
  return true;
}

void DrawCircleRequest::Swap(DrawCircleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrawCircleRequest::InternalSwap(DrawCircleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(settings_, other->settings_);
  swap(center_, other->center_);
  swap(radius_, other->radius_);
  swap(segments_, other->segments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawCircleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawSphereRequest::InitAsDefaultInstance() {
  ::AR51::_DrawSphereRequest_default_instance_._instance.get_mutable()->settings_ = const_cast< ::AR51::DrawRequest*>(
      ::AR51::DrawRequest::internal_default_instance());
  ::AR51::_DrawSphereRequest_default_instance_._instance.get_mutable()->center_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
}
class DrawSphereRequest::HasBitSetters {
 public:
  static const ::AR51::DrawRequest& settings(const DrawSphereRequest* msg);
  static const ::AR51::Vector3& center(const DrawSphereRequest* msg);
};

const ::AR51::DrawRequest&
DrawSphereRequest::HasBitSetters::settings(const DrawSphereRequest* msg) {
  return *msg->settings_;
}
const ::AR51::Vector3&
DrawSphereRequest::HasBitSetters::center(const DrawSphereRequest* msg) {
  return *msg->center_;
}
void DrawSphereRequest::clear_center() {
  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrawSphereRequest::kSettingsFieldNumber;
const int DrawSphereRequest::kCenterFieldNumber;
const int DrawSphereRequest::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrawSphereRequest::DrawSphereRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.DrawSphereRequest)
}
DrawSphereRequest::DrawSphereRequest(const DrawSphereRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_settings()) {
    settings_ = new ::AR51::DrawRequest(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from.has_center()) {
    center_ = new ::AR51::Vector3(*from.center_);
  } else {
    center_ = nullptr;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:AR51.DrawSphereRequest)
}

void DrawSphereRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrawSphereRequest_dgs_2eproto.base);
  ::memset(&settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(radius_));
}

DrawSphereRequest::~DrawSphereRequest() {
  // @@protoc_insertion_point(destructor:AR51.DrawSphereRequest)
  SharedDtor();
}

void DrawSphereRequest::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete center_;
}

void DrawSphereRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawSphereRequest& DrawSphereRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawSphereRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void DrawSphereRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.DrawSphereRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  radius_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DrawSphereRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AR51.DrawRequest Settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector3 Center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Radius = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DrawSphereRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.DrawSphereRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AR51.DrawRequest Settings = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector3 Center = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Radius = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.DrawSphereRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.DrawSphereRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DrawSphereRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.DrawSphereRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::settings(this), output);
  }

  // .AR51.Vector3 Center = 2;
  if (this->has_center()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::center(this), output);
  }

  // float Radius = 3;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.DrawSphereRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawSphereRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.DrawSphereRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::settings(this), target);
  }

  // .AR51.Vector3 Center = 2;
  if (this->has_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::center(this), target);
  }

  // float Radius = 3;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.DrawSphereRequest)
  return target;
}

size_t DrawSphereRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.DrawSphereRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AR51.DrawRequest Settings = 1;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  // .AR51.Vector3 Center = 2;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // float Radius = 3;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawSphereRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.DrawSphereRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawSphereRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawSphereRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.DrawSphereRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.DrawSphereRequest)
    MergeFrom(*source);
  }
}

void DrawSphereRequest::MergeFrom(const DrawSphereRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.DrawSphereRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_settings()) {
    mutable_settings()->::AR51::DrawRequest::MergeFrom(from.settings());
  }
  if (from.has_center()) {
    mutable_center()->::AR51::Vector3::MergeFrom(from.center());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    set_radius(from.radius());
  }
}

void DrawSphereRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.DrawSphereRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawSphereRequest::CopyFrom(const DrawSphereRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.DrawSphereRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawSphereRequest::IsInitialized() const {
  return true;
}

void DrawSphereRequest::Swap(DrawSphereRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrawSphereRequest::InternalSwap(DrawSphereRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(settings_, other->settings_);
  swap(center_, other->center_);
  swap(radius_, other->radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawSphereRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstantiateRequest::InitAsDefaultInstance() {
  ::AR51::_InstantiateRequest_default_instance_._instance.get_mutable()->position_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
  ::AR51::_InstantiateRequest_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::AR51::Quaternion*>(
      ::AR51::Quaternion::internal_default_instance());
  ::AR51::_InstantiateRequest_default_instance_._instance.get_mutable()->scale_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
  ::AR51::_InstantiateRequest_default_instance_._instance.get_mutable()->color_ = const_cast< ::AR51::Color*>(
      ::AR51::Color::internal_default_instance());
}
class InstantiateRequest::HasBitSetters {
 public:
  static const ::AR51::Vector3& position(const InstantiateRequest* msg);
  static const ::AR51::Quaternion& rotation(const InstantiateRequest* msg);
  static const ::AR51::Vector3& scale(const InstantiateRequest* msg);
  static const ::AR51::Color& color(const InstantiateRequest* msg);
};

const ::AR51::Vector3&
InstantiateRequest::HasBitSetters::position(const InstantiateRequest* msg) {
  return *msg->position_;
}
const ::AR51::Quaternion&
InstantiateRequest::HasBitSetters::rotation(const InstantiateRequest* msg) {
  return *msg->rotation_;
}
const ::AR51::Vector3&
InstantiateRequest::HasBitSetters::scale(const InstantiateRequest* msg) {
  return *msg->scale_;
}
const ::AR51::Color&
InstantiateRequest::HasBitSetters::color(const InstantiateRequest* msg) {
  return *msg->color_;
}
void InstantiateRequest::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void InstantiateRequest::clear_rotation() {
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
void InstantiateRequest::clear_scale() {
  if (GetArenaNoVirtual() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
}
void InstantiateRequest::clear_color() {
  if (GetArenaNoVirtual() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstantiateRequest::kNameFieldNumber;
const int InstantiateRequest::kPositionFieldNumber;
const int InstantiateRequest::kRotationFieldNumber;
const int InstantiateRequest::kScaleFieldNumber;
const int InstantiateRequest::kParentIdFieldNumber;
const int InstantiateRequest::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstantiateRequest::InstantiateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.InstantiateRequest)
}
InstantiateRequest::InstantiateRequest(const InstantiateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_position()) {
    position_ = new ::AR51::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_rotation()) {
    rotation_ = new ::AR51::Quaternion(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from.has_scale()) {
    scale_ = new ::AR51::Vector3(*from.scale_);
  } else {
    scale_ = nullptr;
  }
  if (from.has_color()) {
    color_ = new ::AR51::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  parentid_ = from.parentid_;
  // @@protoc_insertion_point(copy_constructor:AR51.InstantiateRequest)
}

void InstantiateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstantiateRequest_dgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parentid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(parentid_));
}

InstantiateRequest::~InstantiateRequest() {
  // @@protoc_insertion_point(destructor:AR51.InstantiateRequest)
  SharedDtor();
}

void InstantiateRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete color_;
}

void InstantiateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstantiateRequest& InstantiateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstantiateRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void InstantiateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.InstantiateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  parentid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InstantiateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "AR51.InstantiateRequest.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector3 Position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Quaternion Rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector3 Scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ParentId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          parentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Color color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InstantiateRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.InstantiateRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.InstantiateRequest.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector3 Position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Quaternion Rotation = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector3 Scale = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ParentId = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &parentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Color color = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.InstantiateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.InstantiateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InstantiateRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.InstantiateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.InstantiateRequest.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .AR51.Vector3 Position = 2;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::position(this), output);
  }

  // .AR51.Quaternion Rotation = 3;
  if (this->has_rotation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::rotation(this), output);
  }

  // .AR51.Vector3 Scale = 4;
  if (this->has_scale()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::scale(this), output);
  }

  // int64 ParentId = 5;
  if (this->parentid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->parentid(), output);
  }

  // .AR51.Color color = 6;
  if (this->has_color()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::color(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.InstantiateRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* InstantiateRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.InstantiateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.InstantiateRequest.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .AR51.Vector3 Position = 2;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::position(this), target);
  }

  // .AR51.Quaternion Rotation = 3;
  if (this->has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::rotation(this), target);
  }

  // .AR51.Vector3 Scale = 4;
  if (this->has_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::scale(this), target);
  }

  // int64 ParentId = 5;
  if (this->parentid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->parentid(), target);
  }

  // .AR51.Color color = 6;
  if (this->has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::color(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.InstantiateRequest)
  return target;
}

size_t InstantiateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.InstantiateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .AR51.Vector3 Position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .AR51.Quaternion Rotation = 3;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // .AR51.Vector3 Scale = 4;
  if (this->has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scale_);
  }

  // .AR51.Color color = 6;
  if (this->has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // int64 ParentId = 5;
  if (this->parentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->parentid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstantiateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.InstantiateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InstantiateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstantiateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.InstantiateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.InstantiateRequest)
    MergeFrom(*source);
  }
}

void InstantiateRequest::MergeFrom(const InstantiateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.InstantiateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_position()) {
    mutable_position()->::AR51::Vector3::MergeFrom(from.position());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::AR51::Quaternion::MergeFrom(from.rotation());
  }
  if (from.has_scale()) {
    mutable_scale()->::AR51::Vector3::MergeFrom(from.scale());
  }
  if (from.has_color()) {
    mutable_color()->::AR51::Color::MergeFrom(from.color());
  }
  if (from.parentid() != 0) {
    set_parentid(from.parentid());
  }
}

void InstantiateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.InstantiateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstantiateRequest::CopyFrom(const InstantiateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.InstantiateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantiateRequest::IsInitialized() const {
  return true;
}

void InstantiateRequest::Swap(InstantiateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstantiateRequest::InternalSwap(InstantiateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(rotation_, other->rotation_);
  swap(scale_, other->scale_);
  swap(color_, other->color_);
  swap(parentid_, other->parentid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstantiateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePrimitiveRequest::InitAsDefaultInstance() {
  ::AR51::_CreatePrimitiveRequest_default_instance_._instance.get_mutable()->instance_ = const_cast< ::AR51::InstantiateRequest*>(
      ::AR51::InstantiateRequest::internal_default_instance());
}
class CreatePrimitiveRequest::HasBitSetters {
 public:
  static const ::AR51::InstantiateRequest& instance(const CreatePrimitiveRequest* msg);
};

const ::AR51::InstantiateRequest&
CreatePrimitiveRequest::HasBitSetters::instance(const CreatePrimitiveRequest* msg) {
  return *msg->instance_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreatePrimitiveRequest::kPritmiveTypeFieldNumber;
const int CreatePrimitiveRequest::kInstanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreatePrimitiveRequest::CreatePrimitiveRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.CreatePrimitiveRequest)
}
CreatePrimitiveRequest::CreatePrimitiveRequest(const CreatePrimitiveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_instance()) {
    instance_ = new ::AR51::InstantiateRequest(*from.instance_);
  } else {
    instance_ = nullptr;
  }
  pritmivetype_ = from.pritmivetype_;
  // @@protoc_insertion_point(copy_constructor:AR51.CreatePrimitiveRequest)
}

void CreatePrimitiveRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePrimitiveRequest_dgs_2eproto.base);
  ::memset(&instance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pritmivetype_) -
      reinterpret_cast<char*>(&instance_)) + sizeof(pritmivetype_));
}

CreatePrimitiveRequest::~CreatePrimitiveRequest() {
  // @@protoc_insertion_point(destructor:AR51.CreatePrimitiveRequest)
  SharedDtor();
}

void CreatePrimitiveRequest::SharedDtor() {
  if (this != internal_default_instance()) delete instance_;
}

void CreatePrimitiveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePrimitiveRequest& CreatePrimitiveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePrimitiveRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void CreatePrimitiveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.CreatePrimitiveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && instance_ != nullptr) {
    delete instance_;
  }
  instance_ = nullptr;
  pritmivetype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreatePrimitiveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AR51.PrimitiveType pritmiveType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_pritmivetype(static_cast<::AR51::PrimitiveType>(val));
        } else goto handle_unusual;
        continue;
      // .AR51.InstantiateRequest Instance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_instance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreatePrimitiveRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.CreatePrimitiveRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AR51.PrimitiveType pritmiveType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pritmivetype(static_cast< ::AR51::PrimitiveType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.InstantiateRequest Instance = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_instance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.CreatePrimitiveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.CreatePrimitiveRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreatePrimitiveRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.CreatePrimitiveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.PrimitiveType pritmiveType = 1;
  if (this->pritmivetype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->pritmivetype(), output);
  }

  // .AR51.InstantiateRequest Instance = 2;
  if (this->has_instance()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::instance(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.CreatePrimitiveRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePrimitiveRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.CreatePrimitiveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.PrimitiveType pritmiveType = 1;
  if (this->pritmivetype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->pritmivetype(), target);
  }

  // .AR51.InstantiateRequest Instance = 2;
  if (this->has_instance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::instance(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.CreatePrimitiveRequest)
  return target;
}

size_t CreatePrimitiveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.CreatePrimitiveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AR51.InstantiateRequest Instance = 2;
  if (this->has_instance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instance_);
  }

  // .AR51.PrimitiveType pritmiveType = 1;
  if (this->pritmivetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->pritmivetype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePrimitiveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.CreatePrimitiveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePrimitiveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePrimitiveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.CreatePrimitiveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.CreatePrimitiveRequest)
    MergeFrom(*source);
  }
}

void CreatePrimitiveRequest::MergeFrom(const CreatePrimitiveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.CreatePrimitiveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_instance()) {
    mutable_instance()->::AR51::InstantiateRequest::MergeFrom(from.instance());
  }
  if (from.pritmivetype() != 0) {
    set_pritmivetype(from.pritmivetype());
  }
}

void CreatePrimitiveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.CreatePrimitiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePrimitiveRequest::CopyFrom(const CreatePrimitiveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.CreatePrimitiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePrimitiveRequest::IsInitialized() const {
  return true;
}

void CreatePrimitiveRequest::Swap(CreatePrimitiveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreatePrimitiveRequest::InternalSwap(CreatePrimitiveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(instance_, other->instance_);
  swap(pritmivetype_, other->pritmivetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePrimitiveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NameRequest::InitAsDefaultInstance() {
}
class NameRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NameRequest::NameRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.NameRequest)
}
NameRequest::NameRequest(const NameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.NameRequest)
}

void NameRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NameRequest_dgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NameRequest::~NameRequest() {
  // @@protoc_insertion_point(destructor:AR51.NameRequest)
  SharedDtor();
}

void NameRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NameRequest& NameRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NameRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void NameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.NameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "AR51.NameRequest.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NameRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.NameRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.NameRequest.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.NameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.NameRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NameRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.NameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.NameRequest.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.NameRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* NameRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.NameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.NameRequest.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.NameRequest)
  return target;
}

size_t NameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.NameRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NameRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.NameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NameRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NameRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.NameRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.NameRequest)
    MergeFrom(*source);
  }
}

void NameRequest::MergeFrom(const NameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.NameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void NameRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.NameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameRequest::CopyFrom(const NameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.NameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameRequest::IsInitialized() const {
  return true;
}

void NameRequest::Swap(NameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameRequest::InternalSwap(NameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NameRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectIdMessage::InitAsDefaultInstance() {
}
class ObjectIdMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectIdMessage::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectIdMessage::ObjectIdMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.ObjectIdMessage)
}
ObjectIdMessage::ObjectIdMessage(const ObjectIdMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:AR51.ObjectIdMessage)
}

void ObjectIdMessage::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

ObjectIdMessage::~ObjectIdMessage() {
  // @@protoc_insertion_point(destructor:AR51.ObjectIdMessage)
  SharedDtor();
}

void ObjectIdMessage::SharedDtor() {
}

void ObjectIdMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectIdMessage& ObjectIdMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectIdMessage_dgs_2eproto.base);
  return *internal_default_instance();
}


void ObjectIdMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.ObjectIdMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectIdMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectIdMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.ObjectIdMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 Id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.ObjectIdMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.ObjectIdMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectIdMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.ObjectIdMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.ObjectIdMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectIdMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.ObjectIdMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.ObjectIdMessage)
  return target;
}

size_t ObjectIdMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.ObjectIdMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectIdMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.ObjectIdMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectIdMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectIdMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.ObjectIdMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.ObjectIdMessage)
    MergeFrom(*source);
  }
}

void ObjectIdMessage::MergeFrom(const ObjectIdMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.ObjectIdMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ObjectIdMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.ObjectIdMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectIdMessage::CopyFrom(const ObjectIdMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.ObjectIdMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectIdMessage::IsInitialized() const {
  return true;
}

void ObjectIdMessage::Swap(ObjectIdMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectIdMessage::InternalSwap(ObjectIdMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectIdMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActiveMessage::InitAsDefaultInstance() {
}
class ActiveMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveMessage::kIdFieldNumber;
const int ActiveMessage::kIsActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveMessage::ActiveMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.ActiveMessage)
}
ActiveMessage::ActiveMessage(const ActiveMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&isactive_) -
    reinterpret_cast<char*>(&id_)) + sizeof(isactive_));
  // @@protoc_insertion_point(copy_constructor:AR51.ActiveMessage)
}

void ActiveMessage::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isactive_) -
      reinterpret_cast<char*>(&id_)) + sizeof(isactive_));
}

ActiveMessage::~ActiveMessage() {
  // @@protoc_insertion_point(destructor:AR51.ActiveMessage)
  SharedDtor();
}

void ActiveMessage::SharedDtor() {
}

void ActiveMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveMessage& ActiveMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveMessage_dgs_2eproto.base);
  return *internal_default_instance();
}


void ActiveMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.ActiveMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isactive_) -
      reinterpret_cast<char*>(&id_)) + sizeof(isactive_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsActive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.ActiveMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 Id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsActive = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.ActiveMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.ActiveMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.ActiveMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // bool IsActive = 2;
  if (this->isactive() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->isactive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.ActiveMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActiveMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.ActiveMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // bool IsActive = 2;
  if (this->isactive() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->isactive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.ActiveMessage)
  return target;
}

size_t ActiveMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.ActiveMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // bool IsActive = 2;
  if (this->isactive() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.ActiveMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActiveMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.ActiveMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.ActiveMessage)
    MergeFrom(*source);
  }
}

void ActiveMessage::MergeFrom(const ActiveMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.ActiveMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.isactive() != 0) {
    set_isactive(from.isactive());
  }
}

void ActiveMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.ActiveMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveMessage::CopyFrom(const ActiveMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.ActiveMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveMessage::IsInitialized() const {
  return true;
}

void ActiveMessage::Swap(ActiveMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActiveMessage::InternalSwap(ActiveMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(isactive_, other->isactive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetParentRequest::InitAsDefaultInstance() {
}
class SetParentRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetParentRequest::kIdFieldNumber;
const int SetParentRequest::kParentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetParentRequest::SetParentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.SetParentRequest)
}
SetParentRequest::SetParentRequest(const SetParentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parentid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(parentid_));
  // @@protoc_insertion_point(copy_constructor:AR51.SetParentRequest)
}

void SetParentRequest::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parentid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(parentid_));
}

SetParentRequest::~SetParentRequest() {
  // @@protoc_insertion_point(destructor:AR51.SetParentRequest)
  SharedDtor();
}

void SetParentRequest::SharedDtor() {
}

void SetParentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetParentRequest& SetParentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetParentRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void SetParentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.SetParentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parentid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(parentid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetParentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 parentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetParentRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.SetParentRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 Id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 parentId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &parentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.SetParentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.SetParentRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetParentRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.SetParentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // int64 parentId = 2;
  if (this->parentid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->parentid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.SetParentRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetParentRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.SetParentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // int64 parentId = 2;
  if (this->parentid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->parentid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.SetParentRequest)
  return target;
}

size_t SetParentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.SetParentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 parentId = 2;
  if (this->parentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->parentid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetParentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.SetParentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetParentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetParentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.SetParentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.SetParentRequest)
    MergeFrom(*source);
  }
}

void SetParentRequest::MergeFrom(const SetParentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.SetParentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.parentid() != 0) {
    set_parentid(from.parentid());
  }
}

void SetParentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.SetParentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetParentRequest::CopyFrom(const SetParentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.SetParentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetParentRequest::IsInitialized() const {
  return true;
}

void SetParentRequest::Swap(SetParentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetParentRequest::InternalSwap(SetParentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(parentid_, other->parentid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetParentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetNameRequest::InitAsDefaultInstance() {
}
class SetNameRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetNameRequest::kIdFieldNumber;
const int SetNameRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetNameRequest::SetNameRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.SetNameRequest)
}
SetNameRequest::SetNameRequest(const SetNameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:AR51.SetNameRequest)
}

void SetNameRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetNameRequest_dgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

SetNameRequest::~SetNameRequest() {
  // @@protoc_insertion_point(destructor:AR51.SetNameRequest)
  SharedDtor();
}

void SetNameRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetNameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetNameRequest& SetNameRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetNameRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void SetNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.SetNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetNameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "AR51.SetNameRequest.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetNameRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.SetNameRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 Id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.SetNameRequest.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.SetNameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.SetNameRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetNameRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.SetNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetNameRequest.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.SetNameRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetNameRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.SetNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetNameRequest.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.SetNameRequest)
  return target;
}

size_t SetNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.SetNameRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetNameRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.SetNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetNameRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetNameRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.SetNameRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.SetNameRequest)
    MergeFrom(*source);
  }
}

void SetNameRequest::MergeFrom(const SetNameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.SetNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void SetNameRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.SetNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetNameRequest::CopyFrom(const SetNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.SetNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNameRequest::IsInitialized() const {
  return true;
}

void SetNameRequest::Swap(SetNameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetNameRequest::InternalSwap(SetNameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetNameRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTransformRequest::InitAsDefaultInstance() {
}
class GetTransformRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTransformRequest::kGameObjectIdFieldNumber;
const int GetTransformRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTransformRequest::GetTransformRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.GetTransformRequest)
}
GetTransformRequest::GetTransformRequest(const GetTransformRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameobjectid_, &from.gameobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&gameobjectid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:AR51.GetTransformRequest)
}

void GetTransformRequest::SharedCtor() {
  ::memset(&gameobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&gameobjectid_)) + sizeof(type_));
}

GetTransformRequest::~GetTransformRequest() {
  // @@protoc_insertion_point(destructor:AR51.GetTransformRequest)
  SharedDtor();
}

void GetTransformRequest::SharedDtor() {
}

void GetTransformRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTransformRequest& GetTransformRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTransformRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void GetTransformRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.GetTransformRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gameobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&gameobjectid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetTransformRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 GameObjectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.TransformTypes Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::AR51::TransformTypes>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetTransformRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.GetTransformRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 GameObjectId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &gameobjectid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.TransformTypes Type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::AR51::TransformTypes >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.GetTransformRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.GetTransformRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetTransformRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.GetTransformRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->gameobjectid(), output);
  }

  // .AR51.TransformTypes Type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.GetTransformRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTransformRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.GetTransformRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->gameobjectid(), target);
  }

  // .AR51.TransformTypes Type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.GetTransformRequest)
  return target;
}

size_t GetTransformRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.GetTransformRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->gameobjectid());
  }

  // .AR51.TransformTypes Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTransformRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.GetTransformRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTransformRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTransformRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.GetTransformRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.GetTransformRequest)
    MergeFrom(*source);
  }
}

void GetTransformRequest::MergeFrom(const GetTransformRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.GetTransformRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameobjectid() != 0) {
    set_gameobjectid(from.gameobjectid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void GetTransformRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.GetTransformRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransformRequest::CopyFrom(const GetTransformRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.GetTransformRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransformRequest::IsInitialized() const {
  return true;
}

void GetTransformRequest::Swap(GetTransformRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTransformRequest::InternalSwap(GetTransformRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gameobjectid_, other->gameobjectid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTransformRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetTransformRequest::InitAsDefaultInstance() {
}
class SetTransformRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetTransformRequest::kGameObjectIdFieldNumber;
const int SetTransformRequest::kTypeFieldNumber;
const int SetTransformRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetTransformRequest::SetTransformRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.SetTransformRequest)
}
SetTransformRequest::SetTransformRequest(const SetTransformRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&gameobjectid_, &from.gameobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&gameobjectid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:AR51.SetTransformRequest)
}

void SetTransformRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetTransformRequest_dgs_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&gameobjectid_)) + sizeof(type_));
}

SetTransformRequest::~SetTransformRequest() {
  // @@protoc_insertion_point(destructor:AR51.SetTransformRequest)
  SharedDtor();
}

void SetTransformRequest::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetTransformRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetTransformRequest& SetTransformRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetTransformRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void SetTransformRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.SetTransformRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&gameobjectid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetTransformRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 GameObjectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.TransformTypes Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::AR51::TransformTypes>(val));
        } else goto handle_unusual;
        continue;
      // bytes Value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetTransformRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.SetTransformRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 GameObjectId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &gameobjectid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.TransformTypes Type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::AR51::TransformTypes >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.SetTransformRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.SetTransformRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetTransformRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.SetTransformRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->gameobjectid(), output);
  }

  // .AR51.TransformTypes Type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // bytes Value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.SetTransformRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTransformRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.SetTransformRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->gameobjectid(), target);
  }

  // .AR51.TransformTypes Type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // bytes Value = 3;
  if (this->value().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.SetTransformRequest)
  return target;
}

size_t SetTransformRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.SetTransformRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->gameobjectid());
  }

  // .AR51.TransformTypes Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTransformRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.SetTransformRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTransformRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetTransformRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.SetTransformRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.SetTransformRequest)
    MergeFrom(*source);
  }
}

void SetTransformRequest::MergeFrom(const SetTransformRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.SetTransformRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.gameobjectid() != 0) {
    set_gameobjectid(from.gameobjectid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SetTransformRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.SetTransformRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTransformRequest::CopyFrom(const SetTransformRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.SetTransformRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTransformRequest::IsInitialized() const {
  return true;
}

void SetTransformRequest::Swap(SetTransformRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetTransformRequest::InternalSwap(SetTransformRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameobjectid_, other->gameobjectid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTransformRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransformMessage::InitAsDefaultInstance() {
}
class TransformMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformMessage::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformMessage::TransformMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.TransformMessage)
}
TransformMessage::TransformMessage(const TransformMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.TransformMessage)
}

void TransformMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransformMessage_dgs_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransformMessage::~TransformMessage() {
  // @@protoc_insertion_point(destructor:AR51.TransformMessage)
  SharedDtor();
}

void TransformMessage::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransformMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformMessage& TransformMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransformMessage_dgs_2eproto.base);
  return *internal_default_instance();
}


void TransformMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.TransformMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransformMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes Value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransformMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.TransformMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes Value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.TransformMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.TransformMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransformMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.TransformMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.TransformMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransformMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.TransformMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Value = 1;
  if (this->value().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.TransformMessage)
  return target;
}

size_t TransformMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.TransformMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.TransformMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransformMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.TransformMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.TransformMessage)
    MergeFrom(*source);
  }
}

void TransformMessage::MergeFrom(const TransformMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.TransformMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void TransformMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.TransformMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformMessage::CopyFrom(const TransformMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.TransformMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformMessage::IsInitialized() const {
  return true;
}

void TransformMessage::Swap(TransformMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformMessage::InternalSwap(TransformMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComponentRequest::InitAsDefaultInstance() {
}
class ComponentRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComponentRequest::kGameObjectIdFieldNumber;
const int ComponentRequest::kComponentTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComponentRequest::ComponentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.ComponentRequest)
}
ComponentRequest::ComponentRequest(const ComponentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  componenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.componenttype().size() > 0) {
    componenttype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.componenttype_);
  }
  gameobjectid_ = from.gameobjectid_;
  // @@protoc_insertion_point(copy_constructor:AR51.ComponentRequest)
}

void ComponentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ComponentRequest_dgs_2eproto.base);
  componenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameobjectid_ = PROTOBUF_LONGLONG(0);
}

ComponentRequest::~ComponentRequest() {
  // @@protoc_insertion_point(destructor:AR51.ComponentRequest)
  SharedDtor();
}

void ComponentRequest::SharedDtor() {
  componenttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ComponentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComponentRequest& ComponentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComponentRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void ComponentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.ComponentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  componenttype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameobjectid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ComponentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 GameObjectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ComponentType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_componenttype(), ptr, ctx, "AR51.ComponentRequest.ComponentType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ComponentRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.ComponentRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 GameObjectId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &gameobjectid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ComponentType = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_componenttype()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->componenttype().data(), static_cast<int>(this->componenttype().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.ComponentRequest.ComponentType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.ComponentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.ComponentRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ComponentRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.ComponentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->gameobjectid(), output);
  }

  // string ComponentType = 2;
  if (this->componenttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->componenttype().data(), static_cast<int>(this->componenttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.ComponentRequest.ComponentType");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->componenttype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.ComponentRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ComponentRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.ComponentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->gameobjectid(), target);
  }

  // string ComponentType = 2;
  if (this->componenttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->componenttype().data(), static_cast<int>(this->componenttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.ComponentRequest.ComponentType");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->componenttype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.ComponentRequest)
  return target;
}

size_t ComponentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.ComponentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ComponentType = 2;
  if (this->componenttype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->componenttype());
  }

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->gameobjectid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.ComponentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ComponentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComponentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.ComponentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.ComponentRequest)
    MergeFrom(*source);
  }
}

void ComponentRequest::MergeFrom(const ComponentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.ComponentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.componenttype().size() > 0) {

    componenttype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.componenttype_);
  }
  if (from.gameobjectid() != 0) {
    set_gameobjectid(from.gameobjectid());
  }
}

void ComponentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.ComponentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentRequest::CopyFrom(const ComponentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.ComponentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentRequest::IsInitialized() const {
  return true;
}

void ComponentRequest::Swap(ComponentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComponentRequest::InternalSwap(ComponentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  componenttype_.Swap(&other->componenttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameobjectid_, other->gameobjectid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComponentFieldMessage::InitAsDefaultInstance() {
}
class ComponentFieldMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComponentFieldMessage::kComponentIdFieldNumber;
const int ComponentFieldMessage::kFieldNameFieldNumber;
const int ComponentFieldMessage::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComponentFieldMessage::ComponentFieldMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.ComponentFieldMessage)
}
ComponentFieldMessage::ComponentFieldMessage(const ComponentFieldMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fieldname().size() > 0) {
    fieldname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fieldname_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  componentid_ = from.componentid_;
  // @@protoc_insertion_point(copy_constructor:AR51.ComponentFieldMessage)
}

void ComponentFieldMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ComponentFieldMessage_dgs_2eproto.base);
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  componentid_ = PROTOBUF_LONGLONG(0);
}

ComponentFieldMessage::~ComponentFieldMessage() {
  // @@protoc_insertion_point(destructor:AR51.ComponentFieldMessage)
  SharedDtor();
}

void ComponentFieldMessage::SharedDtor() {
  fieldname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ComponentFieldMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComponentFieldMessage& ComponentFieldMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComponentFieldMessage_dgs_2eproto.base);
  return *internal_default_instance();
}


void ComponentFieldMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.ComponentFieldMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  componentid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ComponentFieldMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ComponentId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          componentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FieldName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fieldname(), ptr, ctx, "AR51.ComponentFieldMessage.FieldName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ComponentFieldMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.ComponentFieldMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 ComponentId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &componentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FieldName = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fieldname().data(), static_cast<int>(this->fieldname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.ComponentFieldMessage.FieldName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.ComponentFieldMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.ComponentFieldMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ComponentFieldMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.ComponentFieldMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ComponentId = 1;
  if (this->componentid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->componentid(), output);
  }

  // string FieldName = 2;
  if (this->fieldname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fieldname().data(), static_cast<int>(this->fieldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.ComponentFieldMessage.FieldName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fieldname(), output);
  }

  // bytes Value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.ComponentFieldMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* ComponentFieldMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.ComponentFieldMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ComponentId = 1;
  if (this->componentid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->componentid(), target);
  }

  // string FieldName = 2;
  if (this->fieldname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fieldname().data(), static_cast<int>(this->fieldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.ComponentFieldMessage.FieldName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->fieldname(), target);
  }

  // bytes Value = 3;
  if (this->value().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.ComponentFieldMessage)
  return target;
}

size_t ComponentFieldMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.ComponentFieldMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string FieldName = 2;
  if (this->fieldname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fieldname());
  }

  // bytes Value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // int64 ComponentId = 1;
  if (this->componentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->componentid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentFieldMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.ComponentFieldMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ComponentFieldMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComponentFieldMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.ComponentFieldMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.ComponentFieldMessage)
    MergeFrom(*source);
  }
}

void ComponentFieldMessage::MergeFrom(const ComponentFieldMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.ComponentFieldMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fieldname().size() > 0) {

    fieldname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fieldname_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.componentid() != 0) {
    set_componentid(from.componentid());
  }
}

void ComponentFieldMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.ComponentFieldMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentFieldMessage::CopyFrom(const ComponentFieldMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.ComponentFieldMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentFieldMessage::IsInitialized() const {
  return true;
}

void ComponentFieldMessage::Swap(ComponentFieldMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComponentFieldMessage::InternalSwap(ComponentFieldMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fieldname_.Swap(&other->fieldname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(componentid_, other->componentid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentFieldMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetMaterialTextureRequest::InitAsDefaultInstance() {
}
class SetMaterialTextureRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetMaterialTextureRequest::kGameObjectIdFieldNumber;
const int SetMaterialTextureRequest::kTextureNameFieldNumber;
const int SetMaterialTextureRequest::kJpgFieldNumber;
const int SetMaterialTextureRequest::kDestroyCurrentTextureFieldNumber;
const int SetMaterialTextureRequest::kSharedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetMaterialTextureRequest::SetMaterialTextureRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.SetMaterialTextureRequest)
}
SetMaterialTextureRequest::SetMaterialTextureRequest(const SetMaterialTextureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  texturename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.texturename().size() > 0) {
    texturename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.texturename_);
  }
  jpg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.jpg().size() > 0) {
    jpg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jpg_);
  }
  ::memcpy(&gameobjectid_, &from.gameobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&shared_) -
    reinterpret_cast<char*>(&gameobjectid_)) + sizeof(shared_));
  // @@protoc_insertion_point(copy_constructor:AR51.SetMaterialTextureRequest)
}

void SetMaterialTextureRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetMaterialTextureRequest_dgs_2eproto.base);
  texturename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jpg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shared_) -
      reinterpret_cast<char*>(&gameobjectid_)) + sizeof(shared_));
}

SetMaterialTextureRequest::~SetMaterialTextureRequest() {
  // @@protoc_insertion_point(destructor:AR51.SetMaterialTextureRequest)
  SharedDtor();
}

void SetMaterialTextureRequest::SharedDtor() {
  texturename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jpg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetMaterialTextureRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMaterialTextureRequest& SetMaterialTextureRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMaterialTextureRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void SetMaterialTextureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.SetMaterialTextureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  texturename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jpg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shared_) -
      reinterpret_cast<char*>(&gameobjectid_)) + sizeof(shared_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetMaterialTextureRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 GameObjectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string TextureName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_texturename(), ptr, ctx, "AR51.SetMaterialTextureRequest.TextureName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Jpg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_jpg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool DestroyCurrentTexture = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          destroycurrenttexture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Shared = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetMaterialTextureRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.SetMaterialTextureRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 GameObjectId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &gameobjectid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TextureName = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_texturename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->texturename().data(), static_cast<int>(this->texturename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.SetMaterialTextureRequest.TextureName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Jpg = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jpg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool DestroyCurrentTexture = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroycurrenttexture_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Shared = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.SetMaterialTextureRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.SetMaterialTextureRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetMaterialTextureRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.SetMaterialTextureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->gameobjectid(), output);
  }

  // string TextureName = 2;
  if (this->texturename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->texturename().data(), static_cast<int>(this->texturename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetMaterialTextureRequest.TextureName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->texturename(), output);
  }

  // bytes Jpg = 3;
  if (this->jpg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->jpg(), output);
  }

  // bool DestroyCurrentTexture = 4;
  if (this->destroycurrenttexture() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->destroycurrenttexture(), output);
  }

  // bool Shared = 5;
  if (this->shared() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->shared(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.SetMaterialTextureRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMaterialTextureRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.SetMaterialTextureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->gameobjectid(), target);
  }

  // string TextureName = 2;
  if (this->texturename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->texturename().data(), static_cast<int>(this->texturename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetMaterialTextureRequest.TextureName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->texturename(), target);
  }

  // bytes Jpg = 3;
  if (this->jpg().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->jpg(), target);
  }

  // bool DestroyCurrentTexture = 4;
  if (this->destroycurrenttexture() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->destroycurrenttexture(), target);
  }

  // bool Shared = 5;
  if (this->shared() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->shared(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.SetMaterialTextureRequest)
  return target;
}

size_t SetMaterialTextureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.SetMaterialTextureRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string TextureName = 2;
  if (this->texturename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->texturename());
  }

  // bytes Jpg = 3;
  if (this->jpg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->jpg());
  }

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->gameobjectid());
  }

  // bool DestroyCurrentTexture = 4;
  if (this->destroycurrenttexture() != 0) {
    total_size += 1 + 1;
  }

  // bool Shared = 5;
  if (this->shared() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMaterialTextureRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.SetMaterialTextureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMaterialTextureRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetMaterialTextureRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.SetMaterialTextureRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.SetMaterialTextureRequest)
    MergeFrom(*source);
  }
}

void SetMaterialTextureRequest::MergeFrom(const SetMaterialTextureRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.SetMaterialTextureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.texturename().size() > 0) {

    texturename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.texturename_);
  }
  if (from.jpg().size() > 0) {

    jpg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jpg_);
  }
  if (from.gameobjectid() != 0) {
    set_gameobjectid(from.gameobjectid());
  }
  if (from.destroycurrenttexture() != 0) {
    set_destroycurrenttexture(from.destroycurrenttexture());
  }
  if (from.shared() != 0) {
    set_shared(from.shared());
  }
}

void SetMaterialTextureRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.SetMaterialTextureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMaterialTextureRequest::CopyFrom(const SetMaterialTextureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.SetMaterialTextureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMaterialTextureRequest::IsInitialized() const {
  return true;
}

void SetMaterialTextureRequest::Swap(SetMaterialTextureRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetMaterialTextureRequest::InternalSwap(SetMaterialTextureRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  texturename_.Swap(&other->texturename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  jpg_.Swap(&other->jpg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameobjectid_, other->gameobjectid_);
  swap(destroycurrenttexture_, other->destroycurrenttexture_);
  swap(shared_, other->shared_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMaterialTextureRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetMaterialInt32Request::InitAsDefaultInstance() {
}
class SetMaterialInt32Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetMaterialInt32Request::kGameObjectIdFieldNumber;
const int SetMaterialInt32Request::kNameFieldNumber;
const int SetMaterialInt32Request::kValueFieldNumber;
const int SetMaterialInt32Request::kSharedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetMaterialInt32Request::SetMaterialInt32Request()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.SetMaterialInt32Request)
}
SetMaterialInt32Request::SetMaterialInt32Request(const SetMaterialInt32Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&gameobjectid_, &from.gameobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&shared_) -
    reinterpret_cast<char*>(&gameobjectid_)) + sizeof(shared_));
  // @@protoc_insertion_point(copy_constructor:AR51.SetMaterialInt32Request)
}

void SetMaterialInt32Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetMaterialInt32Request_dgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shared_) -
      reinterpret_cast<char*>(&gameobjectid_)) + sizeof(shared_));
}

SetMaterialInt32Request::~SetMaterialInt32Request() {
  // @@protoc_insertion_point(destructor:AR51.SetMaterialInt32Request)
  SharedDtor();
}

void SetMaterialInt32Request::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetMaterialInt32Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMaterialInt32Request& SetMaterialInt32Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMaterialInt32Request_dgs_2eproto.base);
  return *internal_default_instance();
}


void SetMaterialInt32Request::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.SetMaterialInt32Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shared_) -
      reinterpret_cast<char*>(&gameobjectid_)) + sizeof(shared_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetMaterialInt32Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 GameObjectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "AR51.SetMaterialInt32Request.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Shared = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetMaterialInt32Request::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.SetMaterialInt32Request)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 GameObjectId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &gameobjectid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.SetMaterialInt32Request.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Shared = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.SetMaterialInt32Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.SetMaterialInt32Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetMaterialInt32Request::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.SetMaterialInt32Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->gameobjectid(), output);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetMaterialInt32Request.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 Value = 3;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  // bool Shared = 4;
  if (this->shared() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->shared(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.SetMaterialInt32Request)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMaterialInt32Request::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.SetMaterialInt32Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->gameobjectid(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetMaterialInt32Request.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 Value = 3;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  // bool Shared = 4;
  if (this->shared() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->shared(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.SetMaterialInt32Request)
  return target;
}

size_t SetMaterialInt32Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.SetMaterialInt32Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->gameobjectid());
  }

  // int32 Value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->value());
  }

  // bool Shared = 4;
  if (this->shared() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMaterialInt32Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.SetMaterialInt32Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMaterialInt32Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetMaterialInt32Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.SetMaterialInt32Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.SetMaterialInt32Request)
    MergeFrom(*source);
  }
}

void SetMaterialInt32Request::MergeFrom(const SetMaterialInt32Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.SetMaterialInt32Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.gameobjectid() != 0) {
    set_gameobjectid(from.gameobjectid());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.shared() != 0) {
    set_shared(from.shared());
  }
}

void SetMaterialInt32Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.SetMaterialInt32Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMaterialInt32Request::CopyFrom(const SetMaterialInt32Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.SetMaterialInt32Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMaterialInt32Request::IsInitialized() const {
  return true;
}

void SetMaterialInt32Request::Swap(SetMaterialInt32Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetMaterialInt32Request::InternalSwap(SetMaterialInt32Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameobjectid_, other->gameobjectid_);
  swap(value_, other->value_);
  swap(shared_, other->shared_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMaterialInt32Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetMaterialFloatRequest::InitAsDefaultInstance() {
}
class SetMaterialFloatRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetMaterialFloatRequest::kGameObjectIdFieldNumber;
const int SetMaterialFloatRequest::kNameFieldNumber;
const int SetMaterialFloatRequest::kValueFieldNumber;
const int SetMaterialFloatRequest::kSharedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetMaterialFloatRequest::SetMaterialFloatRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.SetMaterialFloatRequest)
}
SetMaterialFloatRequest::SetMaterialFloatRequest(const SetMaterialFloatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&gameobjectid_, &from.gameobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&shared_) -
    reinterpret_cast<char*>(&gameobjectid_)) + sizeof(shared_));
  // @@protoc_insertion_point(copy_constructor:AR51.SetMaterialFloatRequest)
}

void SetMaterialFloatRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetMaterialFloatRequest_dgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shared_) -
      reinterpret_cast<char*>(&gameobjectid_)) + sizeof(shared_));
}

SetMaterialFloatRequest::~SetMaterialFloatRequest() {
  // @@protoc_insertion_point(destructor:AR51.SetMaterialFloatRequest)
  SharedDtor();
}

void SetMaterialFloatRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetMaterialFloatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMaterialFloatRequest& SetMaterialFloatRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMaterialFloatRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void SetMaterialFloatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.SetMaterialFloatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shared_) -
      reinterpret_cast<char*>(&gameobjectid_)) + sizeof(shared_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetMaterialFloatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 GameObjectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "AR51.SetMaterialFloatRequest.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool Shared = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetMaterialFloatRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.SetMaterialFloatRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 GameObjectId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &gameobjectid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.SetMaterialFloatRequest.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Shared = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.SetMaterialFloatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.SetMaterialFloatRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetMaterialFloatRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.SetMaterialFloatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->gameobjectid(), output);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetMaterialFloatRequest.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // float Value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->value(), output);
  }

  // bool Shared = 4;
  if (this->shared() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->shared(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.SetMaterialFloatRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMaterialFloatRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.SetMaterialFloatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->gameobjectid(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetMaterialFloatRequest.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // float Value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->value(), target);
  }

  // bool Shared = 4;
  if (this->shared() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->shared(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.SetMaterialFloatRequest)
  return target;
}

size_t SetMaterialFloatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.SetMaterialFloatRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->gameobjectid());
  }

  // float Value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  // bool Shared = 4;
  if (this->shared() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMaterialFloatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.SetMaterialFloatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMaterialFloatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetMaterialFloatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.SetMaterialFloatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.SetMaterialFloatRequest)
    MergeFrom(*source);
  }
}

void SetMaterialFloatRequest::MergeFrom(const SetMaterialFloatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.SetMaterialFloatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.gameobjectid() != 0) {
    set_gameobjectid(from.gameobjectid());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
  if (from.shared() != 0) {
    set_shared(from.shared());
  }
}

void SetMaterialFloatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.SetMaterialFloatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMaterialFloatRequest::CopyFrom(const SetMaterialFloatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.SetMaterialFloatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMaterialFloatRequest::IsInitialized() const {
  return true;
}

void SetMaterialFloatRequest::Swap(SetMaterialFloatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetMaterialFloatRequest::InternalSwap(SetMaterialFloatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameobjectid_, other->gameobjectid_);
  swap(value_, other->value_);
  swap(shared_, other->shared_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMaterialFloatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetMaterialColorRequest::InitAsDefaultInstance() {
  ::AR51::_SetMaterialColorRequest_default_instance_._instance.get_mutable()->color_ = const_cast< ::AR51::Color*>(
      ::AR51::Color::internal_default_instance());
}
class SetMaterialColorRequest::HasBitSetters {
 public:
  static const ::AR51::Color& color(const SetMaterialColorRequest* msg);
};

const ::AR51::Color&
SetMaterialColorRequest::HasBitSetters::color(const SetMaterialColorRequest* msg) {
  return *msg->color_;
}
void SetMaterialColorRequest::clear_color() {
  if (GetArenaNoVirtual() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetMaterialColorRequest::kGameObjectIdFieldNumber;
const int SetMaterialColorRequest::kColorFieldNumber;
const int SetMaterialColorRequest::kNameFieldNumber;
const int SetMaterialColorRequest::kSharedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetMaterialColorRequest::SetMaterialColorRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.SetMaterialColorRequest)
}
SetMaterialColorRequest::SetMaterialColorRequest(const SetMaterialColorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_color()) {
    color_ = new ::AR51::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  ::memcpy(&gameobjectid_, &from.gameobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&shared_) -
    reinterpret_cast<char*>(&gameobjectid_)) + sizeof(shared_));
  // @@protoc_insertion_point(copy_constructor:AR51.SetMaterialColorRequest)
}

void SetMaterialColorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetMaterialColorRequest_dgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shared_) -
      reinterpret_cast<char*>(&color_)) + sizeof(shared_));
}

SetMaterialColorRequest::~SetMaterialColorRequest() {
  // @@protoc_insertion_point(destructor:AR51.SetMaterialColorRequest)
  SharedDtor();
}

void SetMaterialColorRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete color_;
}

void SetMaterialColorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMaterialColorRequest& SetMaterialColorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMaterialColorRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void SetMaterialColorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.SetMaterialColorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  ::memset(&gameobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shared_) -
      reinterpret_cast<char*>(&gameobjectid_)) + sizeof(shared_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetMaterialColorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 GameObjectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "AR51.SetMaterialColorRequest.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Shared = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetMaterialColorRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.SetMaterialColorRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 GameObjectId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &gameobjectid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Color color = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.SetMaterialColorRequest.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Shared = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.SetMaterialColorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.SetMaterialColorRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetMaterialColorRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.SetMaterialColorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->gameobjectid(), output);
  }

  // .AR51.Color color = 2;
  if (this->has_color()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::color(this), output);
  }

  // string Name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetMaterialColorRequest.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // bool Shared = 4;
  if (this->shared() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->shared(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.SetMaterialColorRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMaterialColorRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.SetMaterialColorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->gameobjectid(), target);
  }

  // .AR51.Color color = 2;
  if (this->has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::color(this), target);
  }

  // string Name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetMaterialColorRequest.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // bool Shared = 4;
  if (this->shared() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->shared(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.SetMaterialColorRequest)
  return target;
}

size_t SetMaterialColorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.SetMaterialColorRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .AR51.Color color = 2;
  if (this->has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->gameobjectid());
  }

  // bool Shared = 4;
  if (this->shared() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMaterialColorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.SetMaterialColorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMaterialColorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetMaterialColorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.SetMaterialColorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.SetMaterialColorRequest)
    MergeFrom(*source);
  }
}

void SetMaterialColorRequest::MergeFrom(const SetMaterialColorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.SetMaterialColorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_color()) {
    mutable_color()->::AR51::Color::MergeFrom(from.color());
  }
  if (from.gameobjectid() != 0) {
    set_gameobjectid(from.gameobjectid());
  }
  if (from.shared() != 0) {
    set_shared(from.shared());
  }
}

void SetMaterialColorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.SetMaterialColorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMaterialColorRequest::CopyFrom(const SetMaterialColorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.SetMaterialColorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMaterialColorRequest::IsInitialized() const {
  return true;
}

void SetMaterialColorRequest::Swap(SetMaterialColorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetMaterialColorRequest::InternalSwap(SetMaterialColorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(color_, other->color_);
  swap(gameobjectid_, other->gameobjectid_);
  swap(shared_, other->shared_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMaterialColorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMaterialColorRequest::InitAsDefaultInstance() {
}
class GetMaterialColorRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMaterialColorRequest::kGameObjectIdFieldNumber;
const int GetMaterialColorRequest::kNameFieldNumber;
const int GetMaterialColorRequest::kSharedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMaterialColorRequest::GetMaterialColorRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.GetMaterialColorRequest)
}
GetMaterialColorRequest::GetMaterialColorRequest(const GetMaterialColorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&gameobjectid_, &from.gameobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&shared_) -
    reinterpret_cast<char*>(&gameobjectid_)) + sizeof(shared_));
  // @@protoc_insertion_point(copy_constructor:AR51.GetMaterialColorRequest)
}

void GetMaterialColorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMaterialColorRequest_dgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shared_) -
      reinterpret_cast<char*>(&gameobjectid_)) + sizeof(shared_));
}

GetMaterialColorRequest::~GetMaterialColorRequest() {
  // @@protoc_insertion_point(destructor:AR51.GetMaterialColorRequest)
  SharedDtor();
}

void GetMaterialColorRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetMaterialColorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMaterialColorRequest& GetMaterialColorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMaterialColorRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void GetMaterialColorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.GetMaterialColorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shared_) -
      reinterpret_cast<char*>(&gameobjectid_)) + sizeof(shared_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMaterialColorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 GameObjectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "AR51.GetMaterialColorRequest.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Shared = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMaterialColorRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.GetMaterialColorRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 GameObjectId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &gameobjectid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.GetMaterialColorRequest.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Shared = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.GetMaterialColorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.GetMaterialColorRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMaterialColorRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.GetMaterialColorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->gameobjectid(), output);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GetMaterialColorRequest.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // bool Shared = 3;
  if (this->shared() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->shared(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.GetMaterialColorRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMaterialColorRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.GetMaterialColorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->gameobjectid(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GetMaterialColorRequest.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // bool Shared = 3;
  if (this->shared() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->shared(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.GetMaterialColorRequest)
  return target;
}

size_t GetMaterialColorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.GetMaterialColorRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->gameobjectid());
  }

  // bool Shared = 3;
  if (this->shared() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMaterialColorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.GetMaterialColorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMaterialColorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMaterialColorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.GetMaterialColorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.GetMaterialColorRequest)
    MergeFrom(*source);
  }
}

void GetMaterialColorRequest::MergeFrom(const GetMaterialColorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.GetMaterialColorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.gameobjectid() != 0) {
    set_gameobjectid(from.gameobjectid());
  }
  if (from.shared() != 0) {
    set_shared(from.shared());
  }
}

void GetMaterialColorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.GetMaterialColorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMaterialColorRequest::CopyFrom(const GetMaterialColorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.GetMaterialColorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMaterialColorRequest::IsInitialized() const {
  return true;
}

void GetMaterialColorRequest::Swap(GetMaterialColorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMaterialColorRequest::InternalSwap(GetMaterialColorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameobjectid_, other->gameobjectid_);
  swap(shared_, other->shared_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMaterialColorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRendererEnabledRequest::InitAsDefaultInstance() {
}
class SetRendererEnabledRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRendererEnabledRequest::kGameObjectIdFieldNumber;
const int SetRendererEnabledRequest::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRendererEnabledRequest::SetRendererEnabledRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.SetRendererEnabledRequest)
}
SetRendererEnabledRequest::SetRendererEnabledRequest(const SetRendererEnabledRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameobjectid_, &from.gameobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&gameobjectid_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:AR51.SetRendererEnabledRequest)
}

void SetRendererEnabledRequest::SharedCtor() {
  ::memset(&gameobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&gameobjectid_)) + sizeof(enabled_));
}

SetRendererEnabledRequest::~SetRendererEnabledRequest() {
  // @@protoc_insertion_point(destructor:AR51.SetRendererEnabledRequest)
  SharedDtor();
}

void SetRendererEnabledRequest::SharedDtor() {
}

void SetRendererEnabledRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRendererEnabledRequest& SetRendererEnabledRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRendererEnabledRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void SetRendererEnabledRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.SetRendererEnabledRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gameobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&gameobjectid_)) + sizeof(enabled_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetRendererEnabledRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 GameObjectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetRendererEnabledRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.SetRendererEnabledRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 GameObjectId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &gameobjectid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Enabled = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.SetRendererEnabledRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.SetRendererEnabledRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetRendererEnabledRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.SetRendererEnabledRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->gameobjectid(), output);
  }

  // bool Enabled = 2;
  if (this->enabled() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.SetRendererEnabledRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRendererEnabledRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.SetRendererEnabledRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->gameobjectid(), target);
  }

  // bool Enabled = 2;
  if (this->enabled() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.SetRendererEnabledRequest)
  return target;
}

size_t SetRendererEnabledRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.SetRendererEnabledRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 GameObjectId = 1;
  if (this->gameobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->gameobjectid());
  }

  // bool Enabled = 2;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRendererEnabledRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.SetRendererEnabledRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRendererEnabledRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRendererEnabledRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.SetRendererEnabledRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.SetRendererEnabledRequest)
    MergeFrom(*source);
  }
}

void SetRendererEnabledRequest::MergeFrom(const SetRendererEnabledRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.SetRendererEnabledRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameobjectid() != 0) {
    set_gameobjectid(from.gameobjectid());
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void SetRendererEnabledRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.SetRendererEnabledRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRendererEnabledRequest::CopyFrom(const SetRendererEnabledRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.SetRendererEnabledRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRendererEnabledRequest::IsInitialized() const {
  return true;
}

void SetRendererEnabledRequest::Swap(SetRendererEnabledRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRendererEnabledRequest::InternalSwap(SetRendererEnabledRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gameobjectid_, other->gameobjectid_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRendererEnabledRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGuardianIdsResponse::InitAsDefaultInstance() {
}
class GetGuardianIdsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGuardianIdsResponse::kGuardianIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGuardianIdsResponse::GetGuardianIdsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.GetGuardianIdsResponse)
}
GetGuardianIdsResponse::GetGuardianIdsResponse(const GetGuardianIdsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      guardianids_(from.guardianids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AR51.GetGuardianIdsResponse)
}

void GetGuardianIdsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetGuardianIdsResponse_dgs_2eproto.base);
}

GetGuardianIdsResponse::~GetGuardianIdsResponse() {
  // @@protoc_insertion_point(destructor:AR51.GetGuardianIdsResponse)
  SharedDtor();
}

void GetGuardianIdsResponse::SharedDtor() {
}

void GetGuardianIdsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGuardianIdsResponse& GetGuardianIdsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGuardianIdsResponse_dgs_2eproto.base);
  return *internal_default_instance();
}


void GetGuardianIdsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.GetGuardianIdsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guardianids_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetGuardianIdsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string GuardianIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_guardianids(), ptr, ctx, "AR51.GetGuardianIdsResponse.GuardianIds");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetGuardianIdsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.GetGuardianIdsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string GuardianIds = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_guardianids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->guardianids(this->guardianids_size() - 1).data(),
            static_cast<int>(this->guardianids(this->guardianids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.GetGuardianIdsResponse.GuardianIds"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.GetGuardianIdsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.GetGuardianIdsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetGuardianIdsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.GetGuardianIdsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string GuardianIds = 1;
  for (int i = 0, n = this->guardianids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->guardianids(i).data(), static_cast<int>(this->guardianids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GetGuardianIdsResponse.GuardianIds");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->guardianids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.GetGuardianIdsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGuardianIdsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.GetGuardianIdsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string GuardianIds = 1;
  for (int i = 0, n = this->guardianids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->guardianids(i).data(), static_cast<int>(this->guardianids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GetGuardianIdsResponse.GuardianIds");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->guardianids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.GetGuardianIdsResponse)
  return target;
}

size_t GetGuardianIdsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.GetGuardianIdsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string GuardianIds = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->guardianids_size());
  for (int i = 0, n = this->guardianids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->guardianids(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGuardianIdsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.GetGuardianIdsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGuardianIdsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGuardianIdsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.GetGuardianIdsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.GetGuardianIdsResponse)
    MergeFrom(*source);
  }
}

void GetGuardianIdsResponse::MergeFrom(const GetGuardianIdsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.GetGuardianIdsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  guardianids_.MergeFrom(from.guardianids_);
}

void GetGuardianIdsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.GetGuardianIdsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuardianIdsResponse::CopyFrom(const GetGuardianIdsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.GetGuardianIdsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuardianIdsResponse::IsInitialized() const {
  return true;
}

void GetGuardianIdsResponse::Swap(GetGuardianIdsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetGuardianIdsResponse::InternalSwap(GetGuardianIdsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  guardianids_.InternalSwap(CastToBase(&other->guardianids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGuardianIdsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuardianRequest::InitAsDefaultInstance() {
}
class GuardianRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuardianRequest::kGuardianIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuardianRequest::GuardianRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.GuardianRequest)
}
GuardianRequest::GuardianRequest(const GuardianRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guardianid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.guardianid().size() > 0) {
    guardianid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guardianid_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.GuardianRequest)
}

void GuardianRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuardianRequest_dgs_2eproto.base);
  guardianid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GuardianRequest::~GuardianRequest() {
  // @@protoc_insertion_point(destructor:AR51.GuardianRequest)
  SharedDtor();
}

void GuardianRequest::SharedDtor() {
  guardianid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GuardianRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuardianRequest& GuardianRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuardianRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void GuardianRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.GuardianRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guardianid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GuardianRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string GuardianId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_guardianid(), ptr, ctx, "AR51.GuardianRequest.GuardianId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GuardianRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.GuardianRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string GuardianId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_guardianid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->guardianid().data(), static_cast<int>(this->guardianid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.GuardianRequest.GuardianId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.GuardianRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.GuardianRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GuardianRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.GuardianRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string GuardianId = 1;
  if (this->guardianid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->guardianid().data(), static_cast<int>(this->guardianid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GuardianRequest.GuardianId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guardianid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.GuardianRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GuardianRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.GuardianRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string GuardianId = 1;
  if (this->guardianid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->guardianid().data(), static_cast<int>(this->guardianid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GuardianRequest.GuardianId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->guardianid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.GuardianRequest)
  return target;
}

size_t GuardianRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.GuardianRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string GuardianId = 1;
  if (this->guardianid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->guardianid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuardianRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.GuardianRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GuardianRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuardianRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.GuardianRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.GuardianRequest)
    MergeFrom(*source);
  }
}

void GuardianRequest::MergeFrom(const GuardianRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.GuardianRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guardianid().size() > 0) {

    guardianid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guardianid_);
  }
}

void GuardianRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.GuardianRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuardianRequest::CopyFrom(const GuardianRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.GuardianRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuardianRequest::IsInitialized() const {
  return true;
}

void GuardianRequest::Swap(GuardianRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GuardianRequest::InternalSwap(GuardianRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  guardianid_.Swap(&other->guardianid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GuardianRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGuardianResponse::InitAsDefaultInstance() {
}
class GetGuardianResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGuardianResponse::kGuardianIdFieldNumber;
const int GetGuardianResponse::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGuardianResponse::GetGuardianResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.GetGuardianResponse)
}
GetGuardianResponse::GetGuardianResponse(const GetGuardianResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guardianid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.guardianid().size() > 0) {
    guardianid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guardianid_);
  }
  points_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.points().size() > 0) {
    points_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.points_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.GetGuardianResponse)
}

void GetGuardianResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetGuardianResponse_dgs_2eproto.base);
  guardianid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  points_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetGuardianResponse::~GetGuardianResponse() {
  // @@protoc_insertion_point(destructor:AR51.GetGuardianResponse)
  SharedDtor();
}

void GetGuardianResponse::SharedDtor() {
  guardianid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  points_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetGuardianResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGuardianResponse& GetGuardianResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGuardianResponse_dgs_2eproto.base);
  return *internal_default_instance();
}


void GetGuardianResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.GetGuardianResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guardianid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  points_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetGuardianResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string GuardianId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_guardianid(), ptr, ctx, "AR51.GetGuardianResponse.GuardianId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetGuardianResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.GetGuardianResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string GuardianId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_guardianid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->guardianid().data(), static_cast<int>(this->guardianid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.GetGuardianResponse.GuardianId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Points = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.GetGuardianResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.GetGuardianResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetGuardianResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.GetGuardianResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string GuardianId = 1;
  if (this->guardianid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->guardianid().data(), static_cast<int>(this->guardianid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GetGuardianResponse.GuardianId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guardianid(), output);
  }

  // bytes Points = 2;
  if (this->points().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->points(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.GetGuardianResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGuardianResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.GetGuardianResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string GuardianId = 1;
  if (this->guardianid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->guardianid().data(), static_cast<int>(this->guardianid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GetGuardianResponse.GuardianId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->guardianid(), target);
  }

  // bytes Points = 2;
  if (this->points().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->points(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.GetGuardianResponse)
  return target;
}

size_t GetGuardianResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.GetGuardianResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string GuardianId = 1;
  if (this->guardianid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->guardianid());
  }

  // bytes Points = 2;
  if (this->points().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->points());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGuardianResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.GetGuardianResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGuardianResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGuardianResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.GetGuardianResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.GetGuardianResponse)
    MergeFrom(*source);
  }
}

void GetGuardianResponse::MergeFrom(const GetGuardianResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.GetGuardianResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guardianid().size() > 0) {

    guardianid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guardianid_);
  }
  if (from.points().size() > 0) {

    points_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.points_);
  }
}

void GetGuardianResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.GetGuardianResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuardianResponse::CopyFrom(const GetGuardianResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.GetGuardianResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuardianResponse::IsInitialized() const {
  return true;
}

void GetGuardianResponse::Swap(GetGuardianResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetGuardianResponse::InternalSwap(GetGuardianResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  guardianid_.Swap(&other->guardianid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  points_.Swap(&other->points_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGuardianResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateGuardianRequest::InitAsDefaultInstance() {
}
class CreateGuardianRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateGuardianRequest::kGuardianIdFieldNumber;
const int CreateGuardianRequest::kPointsFieldNumber;
const int CreateGuardianRequest::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateGuardianRequest::CreateGuardianRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.CreateGuardianRequest)
}
CreateGuardianRequest::CreateGuardianRequest(const CreateGuardianRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guardianid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.guardianid().size() > 0) {
    guardianid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guardianid_);
  }
  points_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.points().size() > 0) {
    points_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.points_);
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:AR51.CreateGuardianRequest)
}

void CreateGuardianRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateGuardianRequest_dgs_2eproto.base);
  guardianid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  points_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  height_ = 0;
}

CreateGuardianRequest::~CreateGuardianRequest() {
  // @@protoc_insertion_point(destructor:AR51.CreateGuardianRequest)
  SharedDtor();
}

void CreateGuardianRequest::SharedDtor() {
  guardianid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  points_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateGuardianRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateGuardianRequest& CreateGuardianRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateGuardianRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void CreateGuardianRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.CreateGuardianRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guardianid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  points_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  height_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateGuardianRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string GuardianId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_guardianid(), ptr, ctx, "AR51.CreateGuardianRequest.GuardianId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateGuardianRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.CreateGuardianRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string GuardianId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_guardianid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->guardianid().data(), static_cast<int>(this->guardianid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.CreateGuardianRequest.GuardianId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Points = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Height = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.CreateGuardianRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.CreateGuardianRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateGuardianRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.CreateGuardianRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string GuardianId = 1;
  if (this->guardianid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->guardianid().data(), static_cast<int>(this->guardianid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CreateGuardianRequest.GuardianId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guardianid(), output);
  }

  // bytes Points = 2;
  if (this->points().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->points(), output);
  }

  // float Height = 3;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.CreateGuardianRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateGuardianRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.CreateGuardianRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string GuardianId = 1;
  if (this->guardianid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->guardianid().data(), static_cast<int>(this->guardianid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CreateGuardianRequest.GuardianId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->guardianid(), target);
  }

  // bytes Points = 2;
  if (this->points().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->points(), target);
  }

  // float Height = 3;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.CreateGuardianRequest)
  return target;
}

size_t CreateGuardianRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.CreateGuardianRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string GuardianId = 1;
  if (this->guardianid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->guardianid());
  }

  // bytes Points = 2;
  if (this->points().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->points());
  }

  // float Height = 3;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateGuardianRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.CreateGuardianRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateGuardianRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateGuardianRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.CreateGuardianRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.CreateGuardianRequest)
    MergeFrom(*source);
  }
}

void CreateGuardianRequest::MergeFrom(const CreateGuardianRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.CreateGuardianRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guardianid().size() > 0) {

    guardianid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guardianid_);
  }
  if (from.points().size() > 0) {

    points_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.points_);
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    set_height(from.height());
  }
}

void CreateGuardianRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.CreateGuardianRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGuardianRequest::CopyFrom(const CreateGuardianRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.CreateGuardianRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGuardianRequest::IsInitialized() const {
  return true;
}

void CreateGuardianRequest::Swap(CreateGuardianRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateGuardianRequest::InternalSwap(CreateGuardianRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  guardianid_.Swap(&other->guardianid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  points_.Swap(&other->points_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGuardianRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateAnchorRequest::InitAsDefaultInstance() {
  ::AR51::_CreateAnchorRequest_default_instance_._instance.get_mutable()->position_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
  ::AR51::_CreateAnchorRequest_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::AR51::Quaternion*>(
      ::AR51::Quaternion::internal_default_instance());
}
class CreateAnchorRequest::HasBitSetters {
 public:
  static const ::AR51::Vector3& position(const CreateAnchorRequest* msg);
  static const ::AR51::Quaternion& rotation(const CreateAnchorRequest* msg);
};

const ::AR51::Vector3&
CreateAnchorRequest::HasBitSetters::position(const CreateAnchorRequest* msg) {
  return *msg->position_;
}
const ::AR51::Quaternion&
CreateAnchorRequest::HasBitSetters::rotation(const CreateAnchorRequest* msg) {
  return *msg->rotation_;
}
void CreateAnchorRequest::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void CreateAnchorRequest::clear_rotation() {
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateAnchorRequest::kAnchorIdFieldNumber;
const int CreateAnchorRequest::kParentIdFieldNumber;
const int CreateAnchorRequest::kPositionFieldNumber;
const int CreateAnchorRequest::kRotationFieldNumber;
const int CreateAnchorRequest::kVisibleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateAnchorRequest::CreateAnchorRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.CreateAnchorRequest)
}
CreateAnchorRequest::CreateAnchorRequest(const CreateAnchorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  anchorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.anchorid().size() > 0) {
    anchorid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anchorid_);
  }
  parentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.parentid().size() > 0) {
    parentid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parentid_);
  }
  if (from.has_position()) {
    position_ = new ::AR51::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_rotation()) {
    rotation_ = new ::AR51::Quaternion(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  visible_ = from.visible_;
  // @@protoc_insertion_point(copy_constructor:AR51.CreateAnchorRequest)
}

void CreateAnchorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateAnchorRequest_dgs_2eproto.base);
  anchorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visible_) -
      reinterpret_cast<char*>(&position_)) + sizeof(visible_));
}

CreateAnchorRequest::~CreateAnchorRequest() {
  // @@protoc_insertion_point(destructor:AR51.CreateAnchorRequest)
  SharedDtor();
}

void CreateAnchorRequest::SharedDtor() {
  anchorid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
}

void CreateAnchorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAnchorRequest& CreateAnchorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAnchorRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void CreateAnchorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.CreateAnchorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchorid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parentid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  visible_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateAnchorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string AnchorId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_anchorid(), ptr, ctx, "AR51.CreateAnchorRequest.AnchorId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ParentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_parentid(), ptr, ctx, "AR51.CreateAnchorRequest.ParentId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector3 Position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Quaternion Rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Visible = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateAnchorRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.CreateAnchorRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string AnchorId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_anchorid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->anchorid().data(), static_cast<int>(this->anchorid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.CreateAnchorRequest.AnchorId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ParentId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_parentid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->parentid().data(), static_cast<int>(this->parentid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.CreateAnchorRequest.ParentId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector3 Position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Quaternion Rotation = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Visible = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.CreateAnchorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.CreateAnchorRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateAnchorRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.CreateAnchorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string AnchorId = 1;
  if (this->anchorid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->anchorid().data(), static_cast<int>(this->anchorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CreateAnchorRequest.AnchorId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->anchorid(), output);
  }

  // string ParentId = 2;
  if (this->parentid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->parentid().data(), static_cast<int>(this->parentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CreateAnchorRequest.ParentId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->parentid(), output);
  }

  // .AR51.Vector3 Position = 3;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::position(this), output);
  }

  // .AR51.Quaternion Rotation = 4;
  if (this->has_rotation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::rotation(this), output);
  }

  // bool Visible = 5;
  if (this->visible() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->visible(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.CreateAnchorRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAnchorRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.CreateAnchorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string AnchorId = 1;
  if (this->anchorid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->anchorid().data(), static_cast<int>(this->anchorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CreateAnchorRequest.AnchorId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->anchorid(), target);
  }

  // string ParentId = 2;
  if (this->parentid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->parentid().data(), static_cast<int>(this->parentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CreateAnchorRequest.ParentId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->parentid(), target);
  }

  // .AR51.Vector3 Position = 3;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::position(this), target);
  }

  // .AR51.Quaternion Rotation = 4;
  if (this->has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::rotation(this), target);
  }

  // bool Visible = 5;
  if (this->visible() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->visible(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.CreateAnchorRequest)
  return target;
}

size_t CreateAnchorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.CreateAnchorRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string AnchorId = 1;
  if (this->anchorid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->anchorid());
  }

  // string ParentId = 2;
  if (this->parentid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->parentid());
  }

  // .AR51.Vector3 Position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .AR51.Quaternion Rotation = 4;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // bool Visible = 5;
  if (this->visible() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAnchorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.CreateAnchorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAnchorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAnchorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.CreateAnchorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.CreateAnchorRequest)
    MergeFrom(*source);
  }
}

void CreateAnchorRequest::MergeFrom(const CreateAnchorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.CreateAnchorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.anchorid().size() > 0) {

    anchorid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anchorid_);
  }
  if (from.parentid().size() > 0) {

    parentid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parentid_);
  }
  if (from.has_position()) {
    mutable_position()->::AR51::Vector3::MergeFrom(from.position());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::AR51::Quaternion::MergeFrom(from.rotation());
  }
  if (from.visible() != 0) {
    set_visible(from.visible());
  }
}

void CreateAnchorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.CreateAnchorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAnchorRequest::CopyFrom(const CreateAnchorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.CreateAnchorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAnchorRequest::IsInitialized() const {
  return true;
}

void CreateAnchorRequest::Swap(CreateAnchorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateAnchorRequest::InternalSwap(CreateAnchorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  anchorid_.Swap(&other->anchorid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parentid_.Swap(&other->parentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(rotation_, other->rotation_);
  swap(visible_, other->visible_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAnchorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAnchorVisiliblityRequest::InitAsDefaultInstance() {
}
class SetAnchorVisiliblityRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetAnchorVisiliblityRequest::kAnchorIdFieldNumber;
const int SetAnchorVisiliblityRequest::kVisibleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetAnchorVisiliblityRequest::SetAnchorVisiliblityRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.SetAnchorVisiliblityRequest)
}
SetAnchorVisiliblityRequest::SetAnchorVisiliblityRequest(const SetAnchorVisiliblityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  anchorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.anchorid().size() > 0) {
    anchorid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anchorid_);
  }
  visible_ = from.visible_;
  // @@protoc_insertion_point(copy_constructor:AR51.SetAnchorVisiliblityRequest)
}

void SetAnchorVisiliblityRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAnchorVisiliblityRequest_dgs_2eproto.base);
  anchorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visible_ = false;
}

SetAnchorVisiliblityRequest::~SetAnchorVisiliblityRequest() {
  // @@protoc_insertion_point(destructor:AR51.SetAnchorVisiliblityRequest)
  SharedDtor();
}

void SetAnchorVisiliblityRequest::SharedDtor() {
  anchorid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetAnchorVisiliblityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAnchorVisiliblityRequest& SetAnchorVisiliblityRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAnchorVisiliblityRequest_dgs_2eproto.base);
  return *internal_default_instance();
}


void SetAnchorVisiliblityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.SetAnchorVisiliblityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchorid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visible_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetAnchorVisiliblityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string AnchorId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_anchorid(), ptr, ctx, "AR51.SetAnchorVisiliblityRequest.AnchorId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Visible = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetAnchorVisiliblityRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.SetAnchorVisiliblityRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string AnchorId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_anchorid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->anchorid().data(), static_cast<int>(this->anchorid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.SetAnchorVisiliblityRequest.AnchorId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Visible = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.SetAnchorVisiliblityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.SetAnchorVisiliblityRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetAnchorVisiliblityRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.SetAnchorVisiliblityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string AnchorId = 1;
  if (this->anchorid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->anchorid().data(), static_cast<int>(this->anchorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetAnchorVisiliblityRequest.AnchorId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->anchorid(), output);
  }

  // bool Visible = 2;
  if (this->visible() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->visible(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.SetAnchorVisiliblityRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAnchorVisiliblityRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.SetAnchorVisiliblityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string AnchorId = 1;
  if (this->anchorid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->anchorid().data(), static_cast<int>(this->anchorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetAnchorVisiliblityRequest.AnchorId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->anchorid(), target);
  }

  // bool Visible = 2;
  if (this->visible() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->visible(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.SetAnchorVisiliblityRequest)
  return target;
}

size_t SetAnchorVisiliblityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.SetAnchorVisiliblityRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string AnchorId = 1;
  if (this->anchorid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->anchorid());
  }

  // bool Visible = 2;
  if (this->visible() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAnchorVisiliblityRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.SetAnchorVisiliblityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAnchorVisiliblityRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAnchorVisiliblityRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.SetAnchorVisiliblityRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.SetAnchorVisiliblityRequest)
    MergeFrom(*source);
  }
}

void SetAnchorVisiliblityRequest::MergeFrom(const SetAnchorVisiliblityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.SetAnchorVisiliblityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.anchorid().size() > 0) {

    anchorid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anchorid_);
  }
  if (from.visible() != 0) {
    set_visible(from.visible());
  }
}

void SetAnchorVisiliblityRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.SetAnchorVisiliblityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAnchorVisiliblityRequest::CopyFrom(const SetAnchorVisiliblityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.SetAnchorVisiliblityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAnchorVisiliblityRequest::IsInitialized() const {
  return true;
}

void SetAnchorVisiliblityRequest::Swap(SetAnchorVisiliblityRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetAnchorVisiliblityRequest::InternalSwap(SetAnchorVisiliblityRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  anchorid_.Swap(&other->anchorid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(visible_, other->visible_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAnchorVisiliblityRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnchorIdsReply::InitAsDefaultInstance() {
}
class AnchorIdsReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnchorIdsReply::kAnchorIdsFieldNumber;
const int AnchorIdsReply::kVisibleAnchorIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnchorIdsReply::AnchorIdsReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.AnchorIdsReply)
}
AnchorIdsReply::AnchorIdsReply(const AnchorIdsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      anchorids_(from.anchorids_),
      visibleanchorids_(from.visibleanchorids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AR51.AnchorIdsReply)
}

void AnchorIdsReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnchorIdsReply_dgs_2eproto.base);
}

AnchorIdsReply::~AnchorIdsReply() {
  // @@protoc_insertion_point(destructor:AR51.AnchorIdsReply)
  SharedDtor();
}

void AnchorIdsReply::SharedDtor() {
}

void AnchorIdsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnchorIdsReply& AnchorIdsReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnchorIdsReply_dgs_2eproto.base);
  return *internal_default_instance();
}


void AnchorIdsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.AnchorIdsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchorids_.Clear();
  visibleanchorids_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnchorIdsReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string AnchorIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_anchorids(), ptr, ctx, "AR51.AnchorIdsReply.AnchorIds");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated string VisibleAnchorIds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_visibleanchorids(), ptr, ctx, "AR51.AnchorIdsReply.VisibleAnchorIds");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnchorIdsReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.AnchorIdsReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string AnchorIds = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_anchorids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->anchorids(this->anchorids_size() - 1).data(),
            static_cast<int>(this->anchorids(this->anchorids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.AnchorIdsReply.AnchorIds"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string VisibleAnchorIds = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_visibleanchorids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->visibleanchorids(this->visibleanchorids_size() - 1).data(),
            static_cast<int>(this->visibleanchorids(this->visibleanchorids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.AnchorIdsReply.VisibleAnchorIds"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.AnchorIdsReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.AnchorIdsReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnchorIdsReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.AnchorIdsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string AnchorIds = 1;
  for (int i = 0, n = this->anchorids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->anchorids(i).data(), static_cast<int>(this->anchorids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.AnchorIdsReply.AnchorIds");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->anchorids(i), output);
  }

  // repeated string VisibleAnchorIds = 2;
  for (int i = 0, n = this->visibleanchorids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->visibleanchorids(i).data(), static_cast<int>(this->visibleanchorids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.AnchorIdsReply.VisibleAnchorIds");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->visibleanchorids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.AnchorIdsReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* AnchorIdsReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.AnchorIdsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string AnchorIds = 1;
  for (int i = 0, n = this->anchorids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->anchorids(i).data(), static_cast<int>(this->anchorids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.AnchorIdsReply.AnchorIds");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->anchorids(i), target);
  }

  // repeated string VisibleAnchorIds = 2;
  for (int i = 0, n = this->visibleanchorids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->visibleanchorids(i).data(), static_cast<int>(this->visibleanchorids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.AnchorIdsReply.VisibleAnchorIds");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->visibleanchorids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.AnchorIdsReply)
  return target;
}

size_t AnchorIdsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.AnchorIdsReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string AnchorIds = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->anchorids_size());
  for (int i = 0, n = this->anchorids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->anchorids(i));
  }

  // repeated string VisibleAnchorIds = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->visibleanchorids_size());
  for (int i = 0, n = this->visibleanchorids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->visibleanchorids(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnchorIdsReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.AnchorIdsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AnchorIdsReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnchorIdsReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.AnchorIdsReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.AnchorIdsReply)
    MergeFrom(*source);
  }
}

void AnchorIdsReply::MergeFrom(const AnchorIdsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.AnchorIdsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  anchorids_.MergeFrom(from.anchorids_);
  visibleanchorids_.MergeFrom(from.visibleanchorids_);
}

void AnchorIdsReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.AnchorIdsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnchorIdsReply::CopyFrom(const AnchorIdsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.AnchorIdsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnchorIdsReply::IsInitialized() const {
  return true;
}

void AnchorIdsReply::Swap(AnchorIdsReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnchorIdsReply::InternalSwap(AnchorIdsReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  anchorids_.InternalSwap(CastToBase(&other->anchorids_));
  visibleanchorids_.InternalSwap(CastToBase(&other->visibleanchorids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnchorIdsReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FieldInfos::InitAsDefaultInstance() {
}
class FieldInfos::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldInfos::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldInfos::FieldInfos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.FieldInfos)
}
FieldInfos::FieldInfos(const FieldInfos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AR51.FieldInfos)
}

void FieldInfos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldInfos_dgs_2eproto.base);
}

FieldInfos::~FieldInfos() {
  // @@protoc_insertion_point(destructor:AR51.FieldInfos)
  SharedDtor();
}

void FieldInfos::SharedDtor() {
}

void FieldInfos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldInfos& FieldInfos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldInfos_dgs_2eproto.base);
  return *internal_default_instance();
}


void FieldInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.FieldInfos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FieldInfos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .AR51.FieldInfo Fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FieldInfos::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.FieldInfos)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AR51.FieldInfo Fields = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.FieldInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.FieldInfos)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FieldInfos::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.FieldInfos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AR51.FieldInfo Fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->fields(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.FieldInfos)
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldInfos::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.FieldInfos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AR51.FieldInfo Fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->fields(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.FieldInfos)
  return target;
}

size_t FieldInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.FieldInfos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AR51.FieldInfo Fields = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->fields(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldInfos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.FieldInfos)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldInfos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldInfos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.FieldInfos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.FieldInfos)
    MergeFrom(*source);
  }
}

void FieldInfos::MergeFrom(const FieldInfos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.FieldInfos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void FieldInfos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.FieldInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldInfos::CopyFrom(const FieldInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.FieldInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldInfos::IsInitialized() const {
  return true;
}

void FieldInfos::Swap(FieldInfos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldInfos::InternalSwap(FieldInfos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&fields_)->InternalSwap(CastToBase(&other->fields_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldInfos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FieldInfo::InitAsDefaultInstance() {
}
class FieldInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldInfo::kNameFieldNumber;
const int FieldInfo::kTypeFieldNumber;
const int FieldInfo::kValueFieldNumber;
const int FieldInfo::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldInfo::FieldInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.FieldInfo)
}
FieldInfo::FieldInfo(const FieldInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.category().size() > 0) {
    category_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:AR51.FieldInfo)
}

void FieldInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldInfo_dgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

FieldInfo::~FieldInfo() {
  // @@protoc_insertion_point(destructor:AR51.FieldInfo)
  SharedDtor();
}

void FieldInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FieldInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldInfo& FieldInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldInfo_dgs_2eproto.base);
  return *internal_default_instance();
}


void FieldInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.FieldInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FieldInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "AR51.FieldInfo.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.FieldTypeEnum Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::AR51::FieldTypeEnum>(val));
        } else goto handle_unusual;
        continue;
      // string Value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx, "AR51.FieldInfo.Value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_category(), ptr, ctx, "AR51.FieldInfo.Category");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FieldInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.FieldInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.FieldInfo.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.FieldTypeEnum Type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::AR51::FieldTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.FieldInfo.Value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Category = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->category().data(), static_cast<int>(this->category().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.FieldInfo.Category"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.FieldInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.FieldInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FieldInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.FieldInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.FieldInfo.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .AR51.FieldTypeEnum Type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string Value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.FieldInfo.Value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // string Category = 4;
  if (this->category().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), static_cast<int>(this->category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.FieldInfo.Category");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->category(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.FieldInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.FieldInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.FieldInfo.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .AR51.FieldTypeEnum Type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // string Value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.FieldInfo.Value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // string Category = 4;
  if (this->category().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), static_cast<int>(this->category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.FieldInfo.Category");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->category(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.FieldInfo)
  return target;
}

size_t FieldInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.FieldInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string Value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value());
  }

  // string Category = 4;
  if (this->category().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->category());
  }

  // .AR51.FieldTypeEnum Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.FieldInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.FieldInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.FieldInfo)
    MergeFrom(*source);
  }
}

void FieldInfo::MergeFrom(const FieldInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.FieldInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.category().size() > 0) {

    category_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void FieldInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.FieldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldInfo::CopyFrom(const FieldInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.FieldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldInfo::IsInitialized() const {
  return true;
}

void FieldInfo::Swap(FieldInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldInfo::InternalSwap(FieldInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  category_.Swap(&other->category_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HandInfoResponse::InitAsDefaultInstance() {
}
class HandInfoResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HandInfoResponse::kHandednessFieldNumber;
const int HandInfoResponse::kIsTrackedFieldNumber;
const int HandInfoResponse::kPositionsFieldNumber;
const int HandInfoResponse::kRotationsFieldNumber;
const int HandInfoResponse::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HandInfoResponse::HandInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.HandInfoResponse)
}
HandInfoResponse::HandInfoResponse(const HandInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  positions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.positions().size() > 0) {
    positions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.positions_);
  }
  rotations_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.rotations().size() > 0) {
    rotations_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rotations_);
  }
  confidence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.confidence().size() > 0) {
    confidence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.confidence_);
  }
  ::memcpy(&handedness_, &from.handedness_,
    static_cast<size_t>(reinterpret_cast<char*>(&istracked_) -
    reinterpret_cast<char*>(&handedness_)) + sizeof(istracked_));
  // @@protoc_insertion_point(copy_constructor:AR51.HandInfoResponse)
}

void HandInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HandInfoResponse_dgs_2eproto.base);
  positions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rotations_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  confidence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&handedness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&istracked_) -
      reinterpret_cast<char*>(&handedness_)) + sizeof(istracked_));
}

HandInfoResponse::~HandInfoResponse() {
  // @@protoc_insertion_point(destructor:AR51.HandInfoResponse)
  SharedDtor();
}

void HandInfoResponse::SharedDtor() {
  positions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rotations_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  confidence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HandInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HandInfoResponse& HandInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HandInfoResponse_dgs_2eproto.base);
  return *internal_default_instance();
}


void HandInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.HandInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rotations_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  confidence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&handedness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&istracked_) -
      reinterpret_cast<char*>(&handedness_)) + sizeof(istracked_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HandInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AR51.HandednessTypes Handedness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_handedness(static_cast<::AR51::HandednessTypes>(val));
        } else goto handle_unusual;
        continue;
      // bool IsTracked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          istracked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Positions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_positions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Rotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_rotations(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Confidence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_confidence(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HandInfoResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.HandInfoResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AR51.HandednessTypes Handedness = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_handedness(static_cast< ::AR51::HandednessTypes >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsTracked = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istracked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Positions = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Rotations = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Confidence = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.HandInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.HandInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HandInfoResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.HandInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.HandednessTypes Handedness = 1;
  if (this->handedness() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->handedness(), output);
  }

  // bool IsTracked = 2;
  if (this->istracked() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->istracked(), output);
  }

  // bytes Positions = 3;
  if (this->positions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->positions(), output);
  }

  // bytes Rotations = 4;
  if (this->rotations().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->rotations(), output);
  }

  // bytes Confidence = 5;
  if (this->confidence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->confidence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.HandInfoResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* HandInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.HandInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.HandednessTypes Handedness = 1;
  if (this->handedness() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->handedness(), target);
  }

  // bool IsTracked = 2;
  if (this->istracked() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->istracked(), target);
  }

  // bytes Positions = 3;
  if (this->positions().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->positions(), target);
  }

  // bytes Rotations = 4;
  if (this->rotations().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->rotations(), target);
  }

  // bytes Confidence = 5;
  if (this->confidence().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->confidence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.HandInfoResponse)
  return target;
}

size_t HandInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.HandInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Positions = 3;
  if (this->positions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->positions());
  }

  // bytes Rotations = 4;
  if (this->rotations().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->rotations());
  }

  // bytes Confidence = 5;
  if (this->confidence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->confidence());
  }

  // .AR51.HandednessTypes Handedness = 1;
  if (this->handedness() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->handedness());
  }

  // bool IsTracked = 2;
  if (this->istracked() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HandInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.HandInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HandInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HandInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.HandInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.HandInfoResponse)
    MergeFrom(*source);
  }
}

void HandInfoResponse::MergeFrom(const HandInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.HandInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.positions().size() > 0) {

    positions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.positions_);
  }
  if (from.rotations().size() > 0) {

    rotations_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rotations_);
  }
  if (from.confidence().size() > 0) {

    confidence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.confidence_);
  }
  if (from.handedness() != 0) {
    set_handedness(from.handedness());
  }
  if (from.istracked() != 0) {
    set_istracked(from.istracked());
  }
}

void HandInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.HandInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandInfoResponse::CopyFrom(const HandInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.HandInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandInfoResponse::IsInitialized() const {
  return true;
}

void HandInfoResponse::Swap(HandInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HandInfoResponse::InternalSwap(HandInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  positions_.Swap(&other->positions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rotations_.Swap(&other->rotations_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  confidence_.Swap(&other->confidence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(handedness_, other->handedness_);
  swap(istracked_, other->istracked_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TwoHandsInfoResponse::InitAsDefaultInstance() {
  ::AR51::_TwoHandsInfoResponse_default_instance_._instance.get_mutable()->lefthandinfo_ = const_cast< ::AR51::HandInfoResponse*>(
      ::AR51::HandInfoResponse::internal_default_instance());
  ::AR51::_TwoHandsInfoResponse_default_instance_._instance.get_mutable()->righthandinfo_ = const_cast< ::AR51::HandInfoResponse*>(
      ::AR51::HandInfoResponse::internal_default_instance());
}
class TwoHandsInfoResponse::HasBitSetters {
 public:
  static const ::AR51::HandInfoResponse& lefthandinfo(const TwoHandsInfoResponse* msg);
  static const ::AR51::HandInfoResponse& righthandinfo(const TwoHandsInfoResponse* msg);
};

const ::AR51::HandInfoResponse&
TwoHandsInfoResponse::HasBitSetters::lefthandinfo(const TwoHandsInfoResponse* msg) {
  return *msg->lefthandinfo_;
}
const ::AR51::HandInfoResponse&
TwoHandsInfoResponse::HasBitSetters::righthandinfo(const TwoHandsInfoResponse* msg) {
  return *msg->righthandinfo_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TwoHandsInfoResponse::kLeftHandInfoFieldNumber;
const int TwoHandsInfoResponse::kRightHandInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TwoHandsInfoResponse::TwoHandsInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.TwoHandsInfoResponse)
}
TwoHandsInfoResponse::TwoHandsInfoResponse(const TwoHandsInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lefthandinfo()) {
    lefthandinfo_ = new ::AR51::HandInfoResponse(*from.lefthandinfo_);
  } else {
    lefthandinfo_ = nullptr;
  }
  if (from.has_righthandinfo()) {
    righthandinfo_ = new ::AR51::HandInfoResponse(*from.righthandinfo_);
  } else {
    righthandinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AR51.TwoHandsInfoResponse)
}

void TwoHandsInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TwoHandsInfoResponse_dgs_2eproto.base);
  ::memset(&lefthandinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&righthandinfo_) -
      reinterpret_cast<char*>(&lefthandinfo_)) + sizeof(righthandinfo_));
}

TwoHandsInfoResponse::~TwoHandsInfoResponse() {
  // @@protoc_insertion_point(destructor:AR51.TwoHandsInfoResponse)
  SharedDtor();
}

void TwoHandsInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete lefthandinfo_;
  if (this != internal_default_instance()) delete righthandinfo_;
}

void TwoHandsInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TwoHandsInfoResponse& TwoHandsInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TwoHandsInfoResponse_dgs_2eproto.base);
  return *internal_default_instance();
}


void TwoHandsInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.TwoHandsInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && lefthandinfo_ != nullptr) {
    delete lefthandinfo_;
  }
  lefthandinfo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && righthandinfo_ != nullptr) {
    delete righthandinfo_;
  }
  righthandinfo_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TwoHandsInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AR51.HandInfoResponse LeftHandInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_lefthandinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.HandInfoResponse RightHandInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_righthandinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TwoHandsInfoResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.TwoHandsInfoResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AR51.HandInfoResponse LeftHandInfo = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lefthandinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.HandInfoResponse RightHandInfo = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_righthandinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.TwoHandsInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.TwoHandsInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TwoHandsInfoResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.TwoHandsInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.HandInfoResponse LeftHandInfo = 1;
  if (this->has_lefthandinfo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::lefthandinfo(this), output);
  }

  // .AR51.HandInfoResponse RightHandInfo = 2;
  if (this->has_righthandinfo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::righthandinfo(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.TwoHandsInfoResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* TwoHandsInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.TwoHandsInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.HandInfoResponse LeftHandInfo = 1;
  if (this->has_lefthandinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::lefthandinfo(this), target);
  }

  // .AR51.HandInfoResponse RightHandInfo = 2;
  if (this->has_righthandinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::righthandinfo(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.TwoHandsInfoResponse)
  return target;
}

size_t TwoHandsInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.TwoHandsInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AR51.HandInfoResponse LeftHandInfo = 1;
  if (this->has_lefthandinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lefthandinfo_);
  }

  // .AR51.HandInfoResponse RightHandInfo = 2;
  if (this->has_righthandinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *righthandinfo_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TwoHandsInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.TwoHandsInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TwoHandsInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TwoHandsInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.TwoHandsInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.TwoHandsInfoResponse)
    MergeFrom(*source);
  }
}

void TwoHandsInfoResponse::MergeFrom(const TwoHandsInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.TwoHandsInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lefthandinfo()) {
    mutable_lefthandinfo()->::AR51::HandInfoResponse::MergeFrom(from.lefthandinfo());
  }
  if (from.has_righthandinfo()) {
    mutable_righthandinfo()->::AR51::HandInfoResponse::MergeFrom(from.righthandinfo());
  }
}

void TwoHandsInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.TwoHandsInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwoHandsInfoResponse::CopyFrom(const TwoHandsInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.TwoHandsInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwoHandsInfoResponse::IsInitialized() const {
  return true;
}

void TwoHandsInfoResponse::Swap(TwoHandsInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TwoHandsInfoResponse::InternalSwap(TwoHandsInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lefthandinfo_, other->lefthandinfo_);
  swap(righthandinfo_, other->righthandinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TwoHandsInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AR51
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AR51::GameStateReply* Arena::CreateMaybeMessage< ::AR51::GameStateReply >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::GameStateReply >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::SetupReply* Arena::CreateMaybeMessage< ::AR51::SetupReply >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::SetupReply >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::PlaceableDto* Arena::CreateMaybeMessage< ::AR51::PlaceableDto >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::PlaceableDto >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::SetPlaceableRequest* Arena::CreateMaybeMessage< ::AR51::SetPlaceableRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::SetPlaceableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::SetPlaceableReply* Arena::CreateMaybeMessage< ::AR51::SetPlaceableReply >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::SetPlaceableReply >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::GetRecorderFieldRequest* Arena::CreateMaybeMessage< ::AR51::GetRecorderFieldRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::GetRecorderFieldRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::SetRecorderFieldRequest* Arena::CreateMaybeMessage< ::AR51::SetRecorderFieldRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::SetRecorderFieldRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::GetCameraCharacteristicsRequest* Arena::CreateMaybeMessage< ::AR51::GetCameraCharacteristicsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::GetCameraCharacteristicsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::GetAllVideoFilesResponse* Arena::CreateMaybeMessage< ::AR51::GetAllVideoFilesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::GetAllVideoFilesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::StartMediaRecoderRequest* Arena::CreateMaybeMessage< ::AR51::StartMediaRecoderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::StartMediaRecoderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::DownloadVideoRequest* Arena::CreateMaybeMessage< ::AR51::DownloadVideoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::DownloadVideoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::StartRecordingRequest* Arena::CreateMaybeMessage< ::AR51::StartRecordingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::StartRecordingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::StartRecordingResponse* Arena::CreateMaybeMessage< ::AR51::StartRecordingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::StartRecordingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::VideoRecordingSettings* Arena::CreateMaybeMessage< ::AR51::VideoRecordingSettings >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::VideoRecordingSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::GetVideoRecordingSettingResponse* Arena::CreateMaybeMessage< ::AR51::GetVideoRecordingSettingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::GetVideoRecordingSettingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::CameraFeedRequest* Arena::CreateMaybeMessage< ::AR51::CameraFeedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::CameraFeedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::CameraFeedResponse* Arena::CreateMaybeMessage< ::AR51::CameraFeedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::CameraFeedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::RenderingRequest* Arena::CreateMaybeMessage< ::AR51::RenderingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::RenderingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::RenderingResponse* Arena::CreateMaybeMessage< ::AR51::RenderingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::RenderingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::DrawRequest* Arena::CreateMaybeMessage< ::AR51::DrawRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::DrawRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::DrawLine2DRequest* Arena::CreateMaybeMessage< ::AR51::DrawLine2DRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::DrawLine2DRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::DrawLine3DRequest* Arena::CreateMaybeMessage< ::AR51::DrawLine3DRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::DrawLine3DRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::DrawRectRequest* Arena::CreateMaybeMessage< ::AR51::DrawRectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::DrawRectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::DrawCubeRequest* Arena::CreateMaybeMessage< ::AR51::DrawCubeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::DrawCubeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::DrawCircleRequest* Arena::CreateMaybeMessage< ::AR51::DrawCircleRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::DrawCircleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::DrawSphereRequest* Arena::CreateMaybeMessage< ::AR51::DrawSphereRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::DrawSphereRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::InstantiateRequest* Arena::CreateMaybeMessage< ::AR51::InstantiateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::InstantiateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::CreatePrimitiveRequest* Arena::CreateMaybeMessage< ::AR51::CreatePrimitiveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::CreatePrimitiveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::NameRequest* Arena::CreateMaybeMessage< ::AR51::NameRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::NameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::ObjectIdMessage* Arena::CreateMaybeMessage< ::AR51::ObjectIdMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::ObjectIdMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::ActiveMessage* Arena::CreateMaybeMessage< ::AR51::ActiveMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::ActiveMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::SetParentRequest* Arena::CreateMaybeMessage< ::AR51::SetParentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::SetParentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::SetNameRequest* Arena::CreateMaybeMessage< ::AR51::SetNameRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::SetNameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::GetTransformRequest* Arena::CreateMaybeMessage< ::AR51::GetTransformRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::GetTransformRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::SetTransformRequest* Arena::CreateMaybeMessage< ::AR51::SetTransformRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::SetTransformRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::TransformMessage* Arena::CreateMaybeMessage< ::AR51::TransformMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::TransformMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::ComponentRequest* Arena::CreateMaybeMessage< ::AR51::ComponentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::ComponentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::ComponentFieldMessage* Arena::CreateMaybeMessage< ::AR51::ComponentFieldMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::ComponentFieldMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::SetMaterialTextureRequest* Arena::CreateMaybeMessage< ::AR51::SetMaterialTextureRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::SetMaterialTextureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::SetMaterialInt32Request* Arena::CreateMaybeMessage< ::AR51::SetMaterialInt32Request >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::SetMaterialInt32Request >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::SetMaterialFloatRequest* Arena::CreateMaybeMessage< ::AR51::SetMaterialFloatRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::SetMaterialFloatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::SetMaterialColorRequest* Arena::CreateMaybeMessage< ::AR51::SetMaterialColorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::SetMaterialColorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::GetMaterialColorRequest* Arena::CreateMaybeMessage< ::AR51::GetMaterialColorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::GetMaterialColorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::SetRendererEnabledRequest* Arena::CreateMaybeMessage< ::AR51::SetRendererEnabledRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::SetRendererEnabledRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::GetGuardianIdsResponse* Arena::CreateMaybeMessage< ::AR51::GetGuardianIdsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::GetGuardianIdsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::GuardianRequest* Arena::CreateMaybeMessage< ::AR51::GuardianRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::GuardianRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::GetGuardianResponse* Arena::CreateMaybeMessage< ::AR51::GetGuardianResponse >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::GetGuardianResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::CreateGuardianRequest* Arena::CreateMaybeMessage< ::AR51::CreateGuardianRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::CreateGuardianRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::CreateAnchorRequest* Arena::CreateMaybeMessage< ::AR51::CreateAnchorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::CreateAnchorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::SetAnchorVisiliblityRequest* Arena::CreateMaybeMessage< ::AR51::SetAnchorVisiliblityRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::SetAnchorVisiliblityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::AnchorIdsReply* Arena::CreateMaybeMessage< ::AR51::AnchorIdsReply >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::AnchorIdsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::FieldInfos* Arena::CreateMaybeMessage< ::AR51::FieldInfos >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::FieldInfos >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::FieldInfo* Arena::CreateMaybeMessage< ::AR51::FieldInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::FieldInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::HandInfoResponse* Arena::CreateMaybeMessage< ::AR51::HandInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::HandInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::TwoHandsInfoResponse* Arena::CreateMaybeMessage< ::AR51::TwoHandsInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::TwoHandsInfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
