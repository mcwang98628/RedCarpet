// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cvs.proto

#include "cvs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cvs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CalibrationPointCloudMessage_cvs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AR51_2eCore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_AR51_2eCore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cvs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControllerInfoRequest_cvs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cvs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CvsCameraInfo_cvs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cvs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarkerInfo_cvs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cvs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiControllerInfoRequest_cvs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AR51_2eCore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_AR51_2eCore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cvs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCvsCameraField_cvs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cvs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackedMarker_cvs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cvs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrackedObject_cvs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AR51_2eCore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_AR51_2eCore_2eproto;
namespace AR51 {
class HelloRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HelloRequest> _instance;
} _HelloRequest_default_instance_;
class HelloReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HelloReply> _instance;
} _HelloReply_default_instance_;
class HandsInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HandsInfoRequest> _instance;
} _HandsInfoRequest_default_instance_;
class ControllerInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControllerInfoRequest> _instance;
} _ControllerInfoRequest_default_instance_;
class MultiControllerInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiControllerInfoRequest> _instance;
} _MultiControllerInfoRequest_default_instance_;
class SkeletonReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SkeletonReply> _instance;
} _SkeletonReply_default_instance_;
class BoundInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundInfo> _instance;
} _BoundInfo_default_instance_;
class DeviceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceInfo> _instance;
} _DeviceInfo_default_instance_;
class CalibrationStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalibrationStatus> _instance;
} _CalibrationStatus_default_instance_;
class CalibrationPointCloudMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalibrationPointCloudMessage> _instance;
} _CalibrationPointCloudMessage_default_instance_;
class CalibrationVisualizationMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalibrationVisualizationMessage> _instance;
} _CalibrationVisualizationMessage_default_instance_;
class SetCvsCameraFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetCvsCameraField> _instance;
} _SetCvsCameraField_default_instance_;
class GetCvsCameraFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCvsCameraField> _instance;
} _GetCvsCameraField_default_instance_;
class CvsCameraInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CvsCameraInfo> _instance;
} _CvsCameraInfo_default_instance_;
class GetAvailableCamerasResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAvailableCamerasResponse> _instance;
} _GetAvailableCamerasResponse_default_instance_;
class CvsCameraFeedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CvsCameraFeedRequest> _instance;
} _CvsCameraFeedRequest_default_instance_;
class CvsCameraGetRecordingReadyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CvsCameraGetRecordingReadyRequest> _instance;
} _CvsCameraGetRecordingReadyRequest_default_instance_;
class CvsCameraIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CvsCameraIdRequest> _instance;
} _CvsCameraIdRequest_default_instance_;
class CvsCameraFeedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CvsCameraFeedResponse> _instance;
} _CvsCameraFeedResponse_default_instance_;
class MarkerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarkerInfo> _instance;
} _MarkerInfo_default_instance_;
class TrackedObjectInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackedObjectInfo> _instance;
} _TrackedObjectInfo_default_instance_;
class TrackedMarkerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackedMarker> _instance;
} _TrackedMarker_default_instance_;
class TrackedObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackedObject> _instance;
} _TrackedObject_default_instance_;
class ObjectDetectionReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectDetectionReply> _instance;
} _ObjectDetectionReply_default_instance_;
}  // namespace AR51
static void InitDefaultsscc_info_BoundInfo_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_BoundInfo_default_instance_;
    new (ptr) ::AR51::BoundInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::BoundInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundInfo_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BoundInfo_cvs_2eproto}, {
      &scc_info_Vector3_AR51_2eCore_2eproto.base,}};

static void InitDefaultsscc_info_CalibrationPointCloudMessage_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_CalibrationPointCloudMessage_default_instance_;
    new (ptr) ::AR51::CalibrationPointCloudMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::CalibrationPointCloudMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CalibrationPointCloudMessage_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CalibrationPointCloudMessage_cvs_2eproto}, {
      &scc_info_Color_AR51_2eCore_2eproto.base,}};

static void InitDefaultsscc_info_CalibrationStatus_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_CalibrationStatus_default_instance_;
    new (ptr) ::AR51::CalibrationStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::CalibrationStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalibrationStatus_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CalibrationStatus_cvs_2eproto}, {}};

static void InitDefaultsscc_info_CalibrationVisualizationMessage_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_CalibrationVisualizationMessage_default_instance_;
    new (ptr) ::AR51::CalibrationVisualizationMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::CalibrationVisualizationMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CalibrationVisualizationMessage_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CalibrationVisualizationMessage_cvs_2eproto}, {
      &scc_info_CalibrationPointCloudMessage_cvs_2eproto.base,}};

static void InitDefaultsscc_info_ControllerInfoRequest_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_ControllerInfoRequest_default_instance_;
    new (ptr) ::AR51::ControllerInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::ControllerInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControllerInfoRequest_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ControllerInfoRequest_cvs_2eproto}, {}};

static void InitDefaultsscc_info_CvsCameraFeedRequest_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_CvsCameraFeedRequest_default_instance_;
    new (ptr) ::AR51::CvsCameraFeedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::CvsCameraFeedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CvsCameraFeedRequest_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CvsCameraFeedRequest_cvs_2eproto}, {}};

static void InitDefaultsscc_info_CvsCameraFeedResponse_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_CvsCameraFeedResponse_default_instance_;
    new (ptr) ::AR51::CvsCameraFeedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::CvsCameraFeedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CvsCameraFeedResponse_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CvsCameraFeedResponse_cvs_2eproto}, {}};

static void InitDefaultsscc_info_CvsCameraGetRecordingReadyRequest_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_CvsCameraGetRecordingReadyRequest_default_instance_;
    new (ptr) ::AR51::CvsCameraGetRecordingReadyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::CvsCameraGetRecordingReadyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CvsCameraGetRecordingReadyRequest_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CvsCameraGetRecordingReadyRequest_cvs_2eproto}, {}};

static void InitDefaultsscc_info_CvsCameraIdRequest_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_CvsCameraIdRequest_default_instance_;
    new (ptr) ::AR51::CvsCameraIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::CvsCameraIdRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CvsCameraIdRequest_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CvsCameraIdRequest_cvs_2eproto}, {}};

static void InitDefaultsscc_info_CvsCameraInfo_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_CvsCameraInfo_default_instance_;
    new (ptr) ::AR51::CvsCameraInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::CvsCameraInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CvsCameraInfo_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CvsCameraInfo_cvs_2eproto}, {
      &scc_info_SetCvsCameraField_cvs_2eproto.base,}};

static void InitDefaultsscc_info_DeviceInfo_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_DeviceInfo_default_instance_;
    new (ptr) ::AR51::DeviceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::DeviceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceInfo_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceInfo_cvs_2eproto}, {}};

static void InitDefaultsscc_info_GetAvailableCamerasResponse_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_GetAvailableCamerasResponse_default_instance_;
    new (ptr) ::AR51::GetAvailableCamerasResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::GetAvailableCamerasResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAvailableCamerasResponse_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetAvailableCamerasResponse_cvs_2eproto}, {
      &scc_info_CvsCameraInfo_cvs_2eproto.base,}};

static void InitDefaultsscc_info_GetCvsCameraField_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_GetCvsCameraField_default_instance_;
    new (ptr) ::AR51::GetCvsCameraField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::GetCvsCameraField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCvsCameraField_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetCvsCameraField_cvs_2eproto}, {}};

static void InitDefaultsscc_info_HandsInfoRequest_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_HandsInfoRequest_default_instance_;
    new (ptr) ::AR51::HandsInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::HandsInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HandsInfoRequest_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_HandsInfoRequest_cvs_2eproto}, {
      &scc_info_Vector3_AR51_2eCore_2eproto.base,
      &scc_info_Quaternion_AR51_2eCore_2eproto.base,}};

static void InitDefaultsscc_info_HelloReply_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_HelloReply_default_instance_;
    new (ptr) ::AR51::HelloReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::HelloReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloReply_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HelloReply_cvs_2eproto}, {}};

static void InitDefaultsscc_info_HelloRequest_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_HelloRequest_default_instance_;
    new (ptr) ::AR51::HelloRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::HelloRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloRequest_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HelloRequest_cvs_2eproto}, {}};

static void InitDefaultsscc_info_MarkerInfo_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_MarkerInfo_default_instance_;
    new (ptr) ::AR51::MarkerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::MarkerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarkerInfo_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MarkerInfo_cvs_2eproto}, {
      &scc_info_Vector3_AR51_2eCore_2eproto.base,}};

static void InitDefaultsscc_info_MultiControllerInfoRequest_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_MultiControllerInfoRequest_default_instance_;
    new (ptr) ::AR51::MultiControllerInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::MultiControllerInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiControllerInfoRequest_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MultiControllerInfoRequest_cvs_2eproto}, {
      &scc_info_ControllerInfoRequest_cvs_2eproto.base,}};

static void InitDefaultsscc_info_ObjectDetectionReply_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_ObjectDetectionReply_default_instance_;
    new (ptr) ::AR51::ObjectDetectionReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::ObjectDetectionReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectDetectionReply_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ObjectDetectionReply_cvs_2eproto}, {
      &scc_info_TrackedMarker_cvs_2eproto.base,
      &scc_info_TrackedObject_cvs_2eproto.base,}};

static void InitDefaultsscc_info_SetCvsCameraField_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_SetCvsCameraField_default_instance_;
    new (ptr) ::AR51::SetCvsCameraField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::SetCvsCameraField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCvsCameraField_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetCvsCameraField_cvs_2eproto}, {}};

static void InitDefaultsscc_info_SkeletonReply_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_SkeletonReply_default_instance_;
    new (ptr) ::AR51::SkeletonReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::SkeletonReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SkeletonReply_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_SkeletonReply_cvs_2eproto}, {
      &scc_info_Quaternion_AR51_2eCore_2eproto.base,
      &scc_info_Vector3_AR51_2eCore_2eproto.base,
      &scc_info_MultiControllerInfoRequest_cvs_2eproto.base,}};

static void InitDefaultsscc_info_TrackedMarker_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_TrackedMarker_default_instance_;
    new (ptr) ::AR51::TrackedMarker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::TrackedMarker::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackedMarker_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrackedMarker_cvs_2eproto}, {
      &scc_info_Vector3_AR51_2eCore_2eproto.base,}};

static void InitDefaultsscc_info_TrackedObject_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_TrackedObject_default_instance_;
    new (ptr) ::AR51::TrackedObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::TrackedObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrackedObject_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TrackedObject_cvs_2eproto}, {
      &scc_info_Vector3_AR51_2eCore_2eproto.base,
      &scc_info_Quaternion_AR51_2eCore_2eproto.base,}};

static void InitDefaultsscc_info_TrackedObjectInfo_cvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AR51::_TrackedObjectInfo_default_instance_;
    new (ptr) ::AR51::TrackedObjectInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AR51::TrackedObjectInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackedObjectInfo_cvs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrackedObjectInfo_cvs_2eproto}, {
      &scc_info_MarkerInfo_cvs_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cvs_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cvs_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cvs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cvs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::HelloRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::HelloRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::HelloReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::HelloReply, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::HandsInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::HandsInfoRequest, skeletonid_),
  PROTOBUF_FIELD_OFFSET(::AR51::HandsInfoRequest, leftwristposition_),
  PROTOBUF_FIELD_OFFSET(::AR51::HandsInfoRequest, rightwristposition_),
  PROTOBUF_FIELD_OFFSET(::AR51::HandsInfoRequest, lefthandrotation_),
  PROTOBUF_FIELD_OFFSET(::AR51::HandsInfoRequest, righthandrotation_),
  PROTOBUF_FIELD_OFFSET(::AR51::HandsInfoRequest, headlocalrotation_),
  PROTOBUF_FIELD_OFFSET(::AR51::HandsInfoRequest, lefthandpositions_),
  PROTOBUF_FIELD_OFFSET(::AR51::HandsInfoRequest, righthandpositions_),
  PROTOBUF_FIELD_OFFSET(::AR51::HandsInfoRequest, deviceid_),
  PROTOBUF_FIELD_OFFSET(::AR51::HandsInfoRequest, characterprefab_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::ControllerInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::ControllerInfoRequest, isdetected_),
  PROTOBUF_FIELD_OFFSET(::AR51::ControllerInfoRequest, localtoworldlh_),
  PROTOBUF_FIELD_OFFSET(::AR51::ControllerInfoRequest, localtoanchorlh_),
  PROTOBUF_FIELD_OFFSET(::AR51::ControllerInfoRequest, buttons_),
  PROTOBUF_FIELD_OFFSET(::AR51::ControllerInfoRequest, buttonstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::MultiControllerInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::MultiControllerInfoRequest, skeletonid_),
  PROTOBUF_FIELD_OFFSET(::AR51::MultiControllerInfoRequest, leftcontroller_),
  PROTOBUF_FIELD_OFFSET(::AR51::MultiControllerInfoRequest, rightcontroller_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, id_),
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, anchorid_),
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, positions_),
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, lefthandrotation_),
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, righthandrotation_),
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, hasheadlocalrotation_),
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, headlocalrotation_),
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, haswristpositions_),
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, leftwristposition_),
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, rightwristposition_),
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, lefthandpositions_),
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, righthandpositions_),
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, capturetime_),
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, confidence_),
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, multicontrollerinfo_),
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, deviceid_),
  PROTOBUF_FIELD_OFFSET(::AR51::SkeletonReply, characterprefab_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::BoundInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::BoundInfo, center_),
  PROTOBUF_FIELD_OFFSET(::AR51::BoundInfo, extents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::DeviceInfo, name_),
  PROTOBUF_FIELD_OFFSET(::AR51::DeviceInfo, ipaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationStatus, progress_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationStatus, quality_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationStatus, reprojectionerror_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationStatus, result_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationStatus, anchorid_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationStatus, anchorbytesize_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationStatus, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationPointCloudMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationPointCloudMessage, name_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationPointCloudMessage, count_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationPointCloudMessage, startcolor_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationPointCloudMessage, endcolor_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationPointCloudMessage, startsize_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationPointCloudMessage, endsize_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationPointCloudMessage, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationVisualizationMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationVisualizationMessage, mode_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationVisualizationMessage, progress_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationVisualizationMessage, quality_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationVisualizationMessage, reprojectionerror_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationVisualizationMessage, title_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationVisualizationMessage, message_),
  PROTOBUF_FIELD_OFFSET(::AR51::CalibrationVisualizationMessage, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::SetCvsCameraField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::SetCvsCameraField, id_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetCvsCameraField, fieldname_),
  PROTOBUF_FIELD_OFFSET(::AR51::SetCvsCameraField, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::GetCvsCameraField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::GetCvsCameraField, id_),
  PROTOBUF_FIELD_OFFSET(::AR51::GetCvsCameraField, fieldname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraInfo, id_),
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraInfo, intrisic_),
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraInfo, extrensic_),
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraInfo, width_),
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraInfo, height_),
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraInfo, framerate_),
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraInfo, isconnected_),
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraInfo, fields_),
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraInfo, isremote_),
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraInfo, remoteendpoint_),
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraInfo, cameratype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::GetAvailableCamerasResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::GetAvailableCamerasResponse, camerainfos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraFeedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraFeedRequest, cameraid_),
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraFeedRequest, width_),
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraFeedRequest, height_),
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraFeedRequest, framerate_),
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraFeedRequest, jpgquality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraGetRecordingReadyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraGetRecordingReadyRequest, cameraid_),
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraGetRecordingReadyRequest, filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraIdRequest, cameraid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraFeedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraFeedResponse, jpg_),
  PROTOBUF_FIELD_OFFSET(::AR51::CvsCameraFeedResponse, actualfps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::MarkerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::MarkerInfo, type_),
  PROTOBUF_FIELD_OFFSET(::AR51::MarkerInfo, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::TrackedObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::TrackedObjectInfo, name_),
  PROTOBUF_FIELD_OFFSET(::AR51::TrackedObjectInfo, markers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::TrackedMarker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::TrackedMarker, id_),
  PROTOBUF_FIELD_OFFSET(::AR51::TrackedMarker, type_),
  PROTOBUF_FIELD_OFFSET(::AR51::TrackedMarker, position_),
  PROTOBUF_FIELD_OFFSET(::AR51::TrackedMarker, radius_),
  PROTOBUF_FIELD_OFFSET(::AR51::TrackedMarker, rays_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::TrackedObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::TrackedObject, id_),
  PROTOBUF_FIELD_OFFSET(::AR51::TrackedObject, name_),
  PROTOBUF_FIELD_OFFSET(::AR51::TrackedObject, position_),
  PROTOBUF_FIELD_OFFSET(::AR51::TrackedObject, rotation_),
  PROTOBUF_FIELD_OFFSET(::AR51::TrackedObject, markerids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AR51::ObjectDetectionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AR51::ObjectDetectionReply, markers_),
  PROTOBUF_FIELD_OFFSET(::AR51::ObjectDetectionReply, items_),
  PROTOBUF_FIELD_OFFSET(::AR51::ObjectDetectionReply, cameras_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas4[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AR51::HelloRequest)},
  { 6, -1, sizeof(::AR51::HelloReply)},
  { 12, -1, sizeof(::AR51::HandsInfoRequest)},
  { 27, -1, sizeof(::AR51::ControllerInfoRequest)},
  { 37, -1, sizeof(::AR51::MultiControllerInfoRequest)},
  { 45, -1, sizeof(::AR51::SkeletonReply)},
  { 67, -1, sizeof(::AR51::BoundInfo)},
  { 74, -1, sizeof(::AR51::DeviceInfo)},
  { 81, -1, sizeof(::AR51::CalibrationStatus)},
  { 93, -1, sizeof(::AR51::CalibrationPointCloudMessage)},
  { 105, -1, sizeof(::AR51::CalibrationVisualizationMessage)},
  { 117, -1, sizeof(::AR51::SetCvsCameraField)},
  { 125, -1, sizeof(::AR51::GetCvsCameraField)},
  { 132, -1, sizeof(::AR51::CvsCameraInfo)},
  { 148, -1, sizeof(::AR51::GetAvailableCamerasResponse)},
  { 154, -1, sizeof(::AR51::CvsCameraFeedRequest)},
  { 164, -1, sizeof(::AR51::CvsCameraGetRecordingReadyRequest)},
  { 171, -1, sizeof(::AR51::CvsCameraIdRequest)},
  { 177, -1, sizeof(::AR51::CvsCameraFeedResponse)},
  { 184, -1, sizeof(::AR51::MarkerInfo)},
  { 191, -1, sizeof(::AR51::TrackedObjectInfo)},
  { 198, -1, sizeof(::AR51::TrackedMarker)},
  { 208, -1, sizeof(::AR51::TrackedObject)},
  { 218, -1, sizeof(::AR51::ObjectDetectionReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances4[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_HelloRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_HelloReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_HandsInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_ControllerInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_MultiControllerInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_SkeletonReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_BoundInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_CalibrationStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_CalibrationPointCloudMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_CalibrationVisualizationMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_SetCvsCameraField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_GetCvsCameraField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_CvsCameraInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_GetAvailableCamerasResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_CvsCameraFeedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_CvsCameraGetRecordingReadyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_CvsCameraIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_CvsCameraFeedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_MarkerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_TrackedObjectInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_TrackedMarker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_TrackedObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AR51::_ObjectDetectionReply_default_instance_),
};

const char descriptor_table_protodef_cvs_2eproto[] =
  "\n\tcvs.proto\022\004AR51\032\017AR51.Core.proto\"\034\n\014He"
  "lloRequest\022\014\n\004name\030\001 \001(\t\"\035\n\nHelloReply\022\017"
  "\n\007message\030\001 \001(\t\"\277\002\n\020HandsInfoRequest\022\022\n\n"
  "SkeletonId\030\001 \001(\t\022(\n\021LeftWristPosition\030\002 "
  "\001(\0132\r.AR51.Vector3\022)\n\022RightWristPosition"
  "\030\003 \001(\0132\r.AR51.Vector3\022\030\n\020LeftHandRotatio"
  "n\030\004 \001(\014\022\031\n\021RightHandRotation\030\005 \001(\014\022+\n\021He"
  "adLocalRotation\030\006 \001(\0132\020.AR51.Quaternion\022"
  "\031\n\021LeftHandPositions\030\007 \001(\014\022\032\n\022RightHandP"
  "ositions\030\010 \001(\014\022\020\n\010DeviceId\030\t \001(\t\022\027\n\017Char"
  "acterPrefab\030\n \001(\t\"\271\001\n\025ControllerInfoRequ"
  "est\022\022\n\nIsDetected\030\001 \001(\010\022\026\n\016LocalToWorldL"
  "H\030\002 \001(\014\022\027\n\017LocalToAnchorLH\030\003 \001(\014\022\'\n\007Butt"
  "ons\030\004 \003(\0162\026.AR51.ControllerButton\0222\n\014But"
  "tonStatus\030\005 \003(\0162\034.AR51.ControllerButtonS"
  "tatus\"\233\001\n\032MultiControllerInfoRequest\022\022\n\n"
  "SkeletonId\030\001 \001(\t\0223\n\016LeftController\030\002 \001(\013"
  "2\033.AR51.ControllerInfoRequest\0224\n\017RightCo"
  "ntroller\030\003 \001(\0132\033.AR51.ControllerInfoRequ"
  "est\"\372\003\n\rSkeletonReply\022\n\n\002Id\030\001 \001(\t\022\020\n\010Anc"
  "horId\030\002 \001(\t\022\021\n\tPositions\030\003 \001(\014\022\030\n\020LeftHa"
  "ndRotation\030\004 \001(\014\022\031\n\021RightHandRotation\030\005 "
  "\001(\014\022\034\n\024HasHeadLocalRotation\030\006 \001(\010\022+\n\021Hea"
  "dLocalRotation\030\007 \001(\0132\020.AR51.Quaternion\022\031"
  "\n\021HasWristPositions\030\010 \001(\010\022(\n\021LeftWristPo"
  "sition\030\t \001(\0132\r.AR51.Vector3\022)\n\022RightWris"
  "tPosition\030\n \001(\0132\r.AR51.Vector3\022\031\n\021LeftHa"
  "ndPositions\030\013 \001(\014\022\032\n\022RightHandPositions\030"
  "\014 \001(\014\022\023\n\013CaptureTime\030\r \001(\001\022\022\n\nConfidence"
  "\030\016 \001(\014\022=\n\023MultiControllerInfo\030\017 \001(\0132 .AR"
  "51.MultiControllerInfoRequest\022\020\n\010DeviceI"
  "d\030\020 \001(\t\022\027\n\017CharacterPrefab\030\021 \001(\t\"J\n\tBoun"
  "dInfo\022\035\n\006Center\030\001 \001(\0132\r.AR51.Vector3\022\036\n\007"
  "Extents\030\002 \001(\0132\r.AR51.Vector3\"-\n\nDeviceIn"
  "fo\022\014\n\004Name\030\001 \001(\t\022\021\n\tIpAddress\030\002 \001(\t\"\261\001\n\021"
  "CalibrationStatus\022\020\n\010Progress\030\001 \001(\001\022\017\n\007Q"
  "uality\030\002 \001(\001\022\031\n\021ReprojectionError\030\003 \001(\001\022"
  "\016\n\006Result\030\004 \001(\t\022\020\n\010AnchorId\030\005 \001(\t\022\026\n\016Anc"
  "horByteSize\030\006 \001(\005\022$\n\004Mode\030\007 \001(\0162\026.AR51.C"
  "alibrationModes\"\257\001\n\034CalibrationPointClou"
  "dMessage\022\014\n\004Name\030\001 \001(\t\022\r\n\005Count\030\002 \001(\005\022\037\n"
  "\nStartColor\030\003 \001(\0132\013.AR51.Color\022\035\n\010EndCol"
  "or\030\004 \001(\0132\013.AR51.Color\022\021\n\tStartSize\030\005 \001(\001"
  "\022\017\n\007EndSize\030\006 \001(\001\022\016\n\006Points\030\007 \001(\014\"\331\001\n\037Ca"
  "librationVisualizationMessage\022$\n\004Mode\030\001 "
  "\001(\0162\026.AR51.CalibrationModes\022\020\n\010Progress\030"
  "\002 \001(\001\022\017\n\007Quality\030\003 \001(\001\022\031\n\021ReprojectionEr"
  "ror\030\004 \001(\001\022\r\n\005Title\030\005 \001(\t\022\017\n\007Message\030\006 \001("
  "\t\0222\n\006Points\030\007 \003(\0132\".AR51.CalibrationPoin"
  "tCloudMessage\"A\n\021SetCvsCameraField\022\n\n\002Id"
  "\030\001 \001(\t\022\021\n\tFieldName\030\002 \001(\t\022\r\n\005Value\030\003 \001(\001"
  "\"2\n\021GetCvsCameraField\022\n\n\002Id\030\001 \001(\t\022\021\n\tFie"
  "ldName\030\002 \001(\t\"\356\001\n\rCvsCameraInfo\022\n\n\002Id\030\001 \001"
  "(\t\022\020\n\010Intrisic\030\002 \001(\014\022\021\n\tExtrensic\030\003 \001(\014\022"
  "\r\n\005Width\030\004 \001(\005\022\016\n\006Height\030\005 \001(\005\022\021\n\tFrameR"
  "ate\030\006 \001(\005\022\023\n\013IsConnected\030\007 \001(\010\022\'\n\006Fields"
  "\030\010 \003(\0132\027.AR51.SetCvsCameraField\022\020\n\010IsRem"
  "ote\030\t \001(\010\022\026\n\016RemoteEndpoint\030\n \001(\t\022\022\n\nCam"
  "eraType\030\013 \001(\t\"G\n\033GetAvailableCamerasResp"
  "onse\022(\n\013CameraInfos\030\001 \003(\0132\023.AR51.CvsCame"
  "raInfo\"n\n\024CvsCameraFeedRequest\022\020\n\010Camera"
  "Id\030\001 \001(\t\022\r\n\005Width\030\002 \001(\005\022\016\n\006Height\030\003 \001(\005\022"
  "\021\n\tFrameRate\030\004 \001(\005\022\022\n\nJpgQuality\030\005 \001(\005\"G"
  "\n!CvsCameraGetRecordingReadyRequest\022\020\n\010C"
  "ameraId\030\001 \001(\t\022\020\n\010FileName\030\002 \001(\t\"&\n\022CvsCa"
  "meraIdRequest\022\020\n\010CameraId\030\001 \001(\t\"7\n\025CvsCa"
  "meraFeedResponse\022\013\n\003Jpg\030\001 \001(\014\022\021\n\tActualF"
  "PS\030\002 \001(\002\";\n\nMarkerInfo\022\014\n\004Type\030\001 \001(\t\022\037\n\010"
  "Position\030\002 \001(\0132\r.AR51.Vector3\"D\n\021Tracked"
  "ObjectInfo\022\014\n\004Name\030\001 \001(\t\022!\n\007Markers\030\002 \003("
  "\0132\020.AR51.MarkerInfo\"w\n\rTrackedMarker\022\n\n\002"
  "Id\030\001 \001(\t\022\014\n\004Type\030\002 \001(\t\022\037\n\010Position\030\003 \001(\013"
  "2\r.AR51.Vector3\022\016\n\006Radius\030\004 \001(\002\022\033\n\004Rays\030"
  "\005 \003(\0132\r.AR51.Vector3\"\201\001\n\rTrackedObject\022\n"
  "\n\002Id\030\001 \001(\t\022\014\n\004Name\030\002 \001(\t\022\037\n\010Position\030\003 \001"
  "(\0132\r.AR51.Vector3\022\"\n\010Rotation\030\004 \001(\0132\020.AR"
  "51.Quaternion\022\021\n\tMarkerIds\030\005 \003(\t\"q\n\024Obje"
  "ctDetectionReply\022$\n\007Markers\030\001 \003(\0132\023.AR51"
  ".TrackedMarker\022\"\n\005Items\030\002 \003(\0132\023.AR51.Tra"
  "ckedObject\022\017\n\007Cameras\030\003 \003(\t*S\n\020Controlle"
  "rButton\022\013\n\007ButtonX\020\000\022\013\n\007ButtonY\020\001\022\013\n\007But"
  "tonA\020\002\022\013\n\007ButtonB\020\003\022\013\n\007Trigger\020\004*7\n\026Cont"
  "rollerButtonStatus\022\006\n\002Up\020\000\022\010\n\004Down\020\001\022\013\n\007"
  "Pressed\020\002*a\n\020CalibrationModes\022\027\n\023Calibra"
  "tionModeIdle\020\000\022\031\n\025CalibrationModeCamera\020"
  "\001\022\031\n\025CalibrationModeDevice\020\0022s\n\003Cvs\0228\n\016S"
  "ayHelloSingle\022\022.AR51.HelloRequest\032\020.AR51"
  ".HelloReply\"\000\0222\n\010SayHello\022\022.AR51.HelloRe"
  "quest\032\020.AR51.HelloReply0\0012\372\002\n\017SkeletonSe"
  "rvice\022/\n\013GetSkeleton\022\013.AR51.Empty\032\023.AR51"
  ".SkeletonReply\022.\n\010Register\022\013.AR51.Empty\032"
  "\023.AR51.SkeletonReply0\001\0220\n\tSendHands\022\026.AR"
  "51.HandsInfoRequest\032\013.AR51.Empty\022C\n\022Send"
  "ControllerInfo\022 .AR51.MultiControllerInf"
  "oRequest\032\013.AR51.Empty\0222\n\016StartRecording\022"
  "\023.AR51.StringMessage\032\013.AR51.Empty\022)\n\rSto"
  "pRecording\022\013.AR51.Empty\032\013.AR51.Empty\0220\n\016"
  "GetIsRecording\022\013.AR51.Empty\032\021.AR51.BoolM"
  "essage2\205\003\n\013Calibration\022C\n\024RunCameraCalib"
  "ration\022\020.AR51.DeviceInfo\032\027.AR51.Calibrat"
  "ionStatus0\001\022G\n\030RunCVtoDeviceCalibration\022"
  "\020.AR51.DeviceInfo\032\027.AR51.CalibrationStat"
  "us0\001\022:\n\016DownloadAnchor\022\023.AR51.AnchorRequ"
  "est\032\021.AR51.AnchorBytes0\001\0220\n\020GetCaptureBo"
  "unds\022\013.AR51.Empty\032\017.AR51.BoundInfo\0220\n\020Se"
  "tCaptureBounds\022\017.AR51.BoundInfo\032\013.AR51.E"
  "mpty\022H\n\020GetVisualization\022\013.AR51.Empty\032%."
  "AR51.CalibrationVisualizationMessage0\0012\305"
  "\t\n\021CameraFeedService\022E\n\023GetAvailableCame"
  "ras\022\013.AR51.Empty\032!.AR51.GetAvailableCame"
  "rasResponse\022J\n\rGetCameraFeed\022\032.AR51.CvsC"
  "ameraFeedRequest\032\033.AR51.CvsCameraFeedRes"
  "ponse0\001\022@\n\025SetCameraFeedSettings\022\032.AR51."
  "CvsCameraFeedRequest\032\013.AR51.Empty\022I\n\021Get"
  "RecordingReady\022\'.AR51.CvsCameraGetRecord"
  "ingReadyRequest\032\013.AR51.Empty\0227\n\016StartRec"
  "ording\022\030.AR51.CvsCameraIdRequest\032\013.AR51."
  "Empty\0226\n\rStopRecording\022\030.AR51.CvsCameraI"
  "dRequest\032\013.AR51.Empty\022>\n\rGetFieldValue\022\027"
  ".AR51.GetCvsCameraField\032\024.AR51.Float64Me"
  "ssage\022>\n\rSetFieldValue\022\027.AR51.SetCvsCame"
  "raField\032\024.AR51.Float64Message\022*\n\016SaveCam"
  "eraJson\022\013.AR51.Empty\032\013.AR51.Empty\022L\n\032Vid"
  "eoControlGetCurrentTime\022\030.AR51.CvsCamera"
  "IdRequest\032\024.AR51.Float64Message\022I\n\027Video"
  "ControlGetDuration\022\030.AR51.CvsCameraIdReq"
  "uest\032\024.AR51.Float64Message\022G\n\030VideoContr"
  "olGetIsPlaying\022\030.AR51.CvsCameraIdRequest"
  "\032\021.AR51.BoolMessage\022F\n\027VideoControlGetIs"
  "Paused\022\030.AR51.CvsCameraIdRequest\032\021.AR51."
  "BoolMessage\022>\n\020VideoControlSeek\022\027.AR51.S"
  "etCvsCameraField\032\021.AR51.BoolMessage\022>\n\020V"
  "ideoControlPlay\022\027.AR51.SetCvsCameraField"
  "\032\021.AR51.BoolMessage\022\?\n\021VideoControlPause"
  "\022\027.AR51.SetCvsCameraField\032\021.AR51.BoolMes"
  "sage\022C\n\025VideoControlNextFrame\022\027.AR51.Set"
  "CvsCameraField\032\021.AR51.BoolMessage\022C\n\025Vid"
  "eoControlPrevFrame\022\027.AR51.SetCvsCameraFi"
  "eld\032\021.AR51.BoolMessage2\267\001\n\026ObjectDetecti"
  "onService\0223\n\tTrackItem\022\027.AR51.TrackedObj"
  "ectInfo\032\013.AR51.Empty0\001\0221\n\013UntrackItem\022\023."
  "AR51.StringMessage\032\013.AR51.Empty0\001\0225\n\010Reg"
  "ister\022\013.AR51.Empty\032\032.AR51.ObjectDetectio"
  "nReply0\001B\020\252\002\rAR51.GRPC.CVSb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cvs_2eproto_deps[1] = {
  &::descriptor_table_AR51_2eCore_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cvs_2eproto_sccs[24] = {
  &scc_info_BoundInfo_cvs_2eproto.base,
  &scc_info_CalibrationPointCloudMessage_cvs_2eproto.base,
  &scc_info_CalibrationStatus_cvs_2eproto.base,
  &scc_info_CalibrationVisualizationMessage_cvs_2eproto.base,
  &scc_info_ControllerInfoRequest_cvs_2eproto.base,
  &scc_info_CvsCameraFeedRequest_cvs_2eproto.base,
  &scc_info_CvsCameraFeedResponse_cvs_2eproto.base,
  &scc_info_CvsCameraGetRecordingReadyRequest_cvs_2eproto.base,
  &scc_info_CvsCameraIdRequest_cvs_2eproto.base,
  &scc_info_CvsCameraInfo_cvs_2eproto.base,
  &scc_info_DeviceInfo_cvs_2eproto.base,
  &scc_info_GetAvailableCamerasResponse_cvs_2eproto.base,
  &scc_info_GetCvsCameraField_cvs_2eproto.base,
  &scc_info_HandsInfoRequest_cvs_2eproto.base,
  &scc_info_HelloReply_cvs_2eproto.base,
  &scc_info_HelloRequest_cvs_2eproto.base,
  &scc_info_MarkerInfo_cvs_2eproto.base,
  &scc_info_MultiControllerInfoRequest_cvs_2eproto.base,
  &scc_info_ObjectDetectionReply_cvs_2eproto.base,
  &scc_info_SetCvsCameraField_cvs_2eproto.base,
  &scc_info_SkeletonReply_cvs_2eproto.base,
  &scc_info_TrackedMarker_cvs_2eproto.base,
  &scc_info_TrackedObject_cvs_2eproto.base,
  &scc_info_TrackedObjectInfo_cvs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cvs_2eproto_once;
static bool descriptor_table_cvs_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cvs_2eproto = {
  &descriptor_table_cvs_2eproto_initialized, descriptor_table_protodef_cvs_2eproto, "cvs.proto", 5754,
  &descriptor_table_cvs_2eproto_once, descriptor_table_cvs_2eproto_sccs, descriptor_table_cvs_2eproto_deps, 24, 1,
  schemas4, file_default_instances4, TableStruct_cvs_2eproto::offsets,
  file_level_metadata_cvs_2eproto, 24, file_level_enum_descriptors_cvs_2eproto, file_level_service_descriptors_cvs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cvs_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cvs_2eproto), true);
namespace AR51 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControllerButton_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cvs_2eproto);
  return file_level_enum_descriptors_cvs_2eproto[0];
}
bool ControllerButton_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControllerButtonStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cvs_2eproto);
  return file_level_enum_descriptors_cvs_2eproto[1];
}
bool ControllerButtonStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalibrationModes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cvs_2eproto);
  return file_level_enum_descriptors_cvs_2eproto[2];
}
bool CalibrationModes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void HelloRequest::InitAsDefaultInstance() {
}
class HelloRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HelloRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HelloRequest::HelloRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.HelloRequest)
}
HelloRequest::HelloRequest(const HelloRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.HelloRequest)
}

void HelloRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HelloRequest_cvs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HelloRequest::~HelloRequest() {
  // @@protoc_insertion_point(destructor:AR51.HelloRequest)
  SharedDtor();
}

void HelloRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HelloRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HelloRequest& HelloRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HelloRequest_cvs_2eproto.base);
  return *internal_default_instance();
}


void HelloRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.HelloRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HelloRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "AR51.HelloRequest.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HelloRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.HelloRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.HelloRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.HelloRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.HelloRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HelloRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.HelloRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.HelloRequest.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.HelloRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* HelloRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.HelloRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.HelloRequest.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.HelloRequest)
  return target;
}

size_t HelloRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.HelloRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HelloRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.HelloRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HelloRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HelloRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.HelloRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.HelloRequest)
    MergeFrom(*source);
  }
}

void HelloRequest::MergeFrom(const HelloRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.HelloRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void HelloRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.HelloRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloRequest::CopyFrom(const HelloRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.HelloRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloRequest::IsInitialized() const {
  return true;
}

void HelloRequest::Swap(HelloRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HelloRequest::InternalSwap(HelloRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HelloReply::InitAsDefaultInstance() {
}
class HelloReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HelloReply::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HelloReply::HelloReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.HelloReply)
}
HelloReply::HelloReply(const HelloReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.HelloReply)
}

void HelloReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HelloReply_cvs_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HelloReply::~HelloReply() {
  // @@protoc_insertion_point(destructor:AR51.HelloReply)
  SharedDtor();
}

void HelloReply::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HelloReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HelloReply& HelloReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HelloReply_cvs_2eproto.base);
  return *internal_default_instance();
}


void HelloReply::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.HelloReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HelloReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_message(), ptr, ctx, "AR51.HelloReply.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HelloReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.HelloReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.HelloReply.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.HelloReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.HelloReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HelloReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.HelloReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.HelloReply.message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.HelloReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* HelloReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.HelloReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.HelloReply.message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.HelloReply)
  return target;
}

size_t HelloReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.HelloReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HelloReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.HelloReply)
  GOOGLE_DCHECK_NE(&from, this);
  const HelloReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HelloReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.HelloReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.HelloReply)
    MergeFrom(*source);
  }
}

void HelloReply::MergeFrom(const HelloReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.HelloReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void HelloReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.HelloReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloReply::CopyFrom(const HelloReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.HelloReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloReply::IsInitialized() const {
  return true;
}

void HelloReply::Swap(HelloReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HelloReply::InternalSwap(HelloReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HandsInfoRequest::InitAsDefaultInstance() {
  ::AR51::_HandsInfoRequest_default_instance_._instance.get_mutable()->leftwristposition_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
  ::AR51::_HandsInfoRequest_default_instance_._instance.get_mutable()->rightwristposition_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
  ::AR51::_HandsInfoRequest_default_instance_._instance.get_mutable()->headlocalrotation_ = const_cast< ::AR51::Quaternion*>(
      ::AR51::Quaternion::internal_default_instance());
}
class HandsInfoRequest::HasBitSetters {
 public:
  static const ::AR51::Vector3& leftwristposition(const HandsInfoRequest* msg);
  static const ::AR51::Vector3& rightwristposition(const HandsInfoRequest* msg);
  static const ::AR51::Quaternion& headlocalrotation(const HandsInfoRequest* msg);
};

const ::AR51::Vector3&
HandsInfoRequest::HasBitSetters::leftwristposition(const HandsInfoRequest* msg) {
  return *msg->leftwristposition_;
}
const ::AR51::Vector3&
HandsInfoRequest::HasBitSetters::rightwristposition(const HandsInfoRequest* msg) {
  return *msg->rightwristposition_;
}
const ::AR51::Quaternion&
HandsInfoRequest::HasBitSetters::headlocalrotation(const HandsInfoRequest* msg) {
  return *msg->headlocalrotation_;
}
void HandsInfoRequest::clear_leftwristposition() {
  if (GetArenaNoVirtual() == nullptr && leftwristposition_ != nullptr) {
    delete leftwristposition_;
  }
  leftwristposition_ = nullptr;
}
void HandsInfoRequest::clear_rightwristposition() {
  if (GetArenaNoVirtual() == nullptr && rightwristposition_ != nullptr) {
    delete rightwristposition_;
  }
  rightwristposition_ = nullptr;
}
void HandsInfoRequest::clear_headlocalrotation() {
  if (GetArenaNoVirtual() == nullptr && headlocalrotation_ != nullptr) {
    delete headlocalrotation_;
  }
  headlocalrotation_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HandsInfoRequest::kSkeletonIdFieldNumber;
const int HandsInfoRequest::kLeftWristPositionFieldNumber;
const int HandsInfoRequest::kRightWristPositionFieldNumber;
const int HandsInfoRequest::kLeftHandRotationFieldNumber;
const int HandsInfoRequest::kRightHandRotationFieldNumber;
const int HandsInfoRequest::kHeadLocalRotationFieldNumber;
const int HandsInfoRequest::kLeftHandPositionsFieldNumber;
const int HandsInfoRequest::kRightHandPositionsFieldNumber;
const int HandsInfoRequest::kDeviceIdFieldNumber;
const int HandsInfoRequest::kCharacterPrefabFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HandsInfoRequest::HandsInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.HandsInfoRequest)
}
HandsInfoRequest::HandsInfoRequest(const HandsInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skeletonid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.skeletonid().size() > 0) {
    skeletonid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skeletonid_);
  }
  lefthandrotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.lefthandrotation().size() > 0) {
    lefthandrotation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lefthandrotation_);
  }
  righthandrotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.righthandrotation().size() > 0) {
    righthandrotation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.righthandrotation_);
  }
  lefthandpositions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.lefthandpositions().size() > 0) {
    lefthandpositions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lefthandpositions_);
  }
  righthandpositions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.righthandpositions().size() > 0) {
    righthandpositions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.righthandpositions_);
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.deviceid().size() > 0) {
    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  characterprefab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.characterprefab().size() > 0) {
    characterprefab_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.characterprefab_);
  }
  if (from.has_leftwristposition()) {
    leftwristposition_ = new ::AR51::Vector3(*from.leftwristposition_);
  } else {
    leftwristposition_ = nullptr;
  }
  if (from.has_rightwristposition()) {
    rightwristposition_ = new ::AR51::Vector3(*from.rightwristposition_);
  } else {
    rightwristposition_ = nullptr;
  }
  if (from.has_headlocalrotation()) {
    headlocalrotation_ = new ::AR51::Quaternion(*from.headlocalrotation_);
  } else {
    headlocalrotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AR51.HandsInfoRequest)
}

void HandsInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HandsInfoRequest_cvs_2eproto.base);
  skeletonid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lefthandrotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  righthandrotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lefthandpositions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  righthandpositions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characterprefab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&leftwristposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&headlocalrotation_) -
      reinterpret_cast<char*>(&leftwristposition_)) + sizeof(headlocalrotation_));
}

HandsInfoRequest::~HandsInfoRequest() {
  // @@protoc_insertion_point(destructor:AR51.HandsInfoRequest)
  SharedDtor();
}

void HandsInfoRequest::SharedDtor() {
  skeletonid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lefthandrotation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  righthandrotation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lefthandpositions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  righthandpositions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characterprefab_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete leftwristposition_;
  if (this != internal_default_instance()) delete rightwristposition_;
  if (this != internal_default_instance()) delete headlocalrotation_;
}

void HandsInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HandsInfoRequest& HandsInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HandsInfoRequest_cvs_2eproto.base);
  return *internal_default_instance();
}


void HandsInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.HandsInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skeletonid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lefthandrotation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  righthandrotation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lefthandpositions_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  righthandpositions_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characterprefab_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && leftwristposition_ != nullptr) {
    delete leftwristposition_;
  }
  leftwristposition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rightwristposition_ != nullptr) {
    delete rightwristposition_;
  }
  rightwristposition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && headlocalrotation_ != nullptr) {
    delete headlocalrotation_;
  }
  headlocalrotation_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HandsInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string SkeletonId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_skeletonid(), ptr, ctx, "AR51.HandsInfoRequest.SkeletonId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector3 LeftWristPosition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_leftwristposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector3 RightWristPosition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_rightwristposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes LeftHandRotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_lefthandrotation(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes RightHandRotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_righthandrotation(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Quaternion HeadLocalRotation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_headlocalrotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes LeftHandPositions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_lefthandpositions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes RightHandPositions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_righthandpositions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DeviceId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_deviceid(), ptr, ctx, "AR51.HandsInfoRequest.DeviceId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CharacterPrefab = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_characterprefab(), ptr, ctx, "AR51.HandsInfoRequest.CharacterPrefab");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HandsInfoRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.HandsInfoRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string SkeletonId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_skeletonid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->skeletonid().data(), static_cast<int>(this->skeletonid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.HandsInfoRequest.SkeletonId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector3 LeftWristPosition = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_leftwristposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector3 RightWristPosition = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rightwristposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes LeftHandRotation = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lefthandrotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes RightHandRotation = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_righthandrotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Quaternion HeadLocalRotation = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_headlocalrotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes LeftHandPositions = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lefthandpositions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes RightHandPositions = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_righthandpositions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string DeviceId = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->deviceid().data(), static_cast<int>(this->deviceid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.HandsInfoRequest.DeviceId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CharacterPrefab = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_characterprefab()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->characterprefab().data(), static_cast<int>(this->characterprefab().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.HandsInfoRequest.CharacterPrefab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.HandsInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.HandsInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HandsInfoRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.HandsInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string SkeletonId = 1;
  if (this->skeletonid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->skeletonid().data(), static_cast<int>(this->skeletonid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.HandsInfoRequest.SkeletonId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->skeletonid(), output);
  }

  // .AR51.Vector3 LeftWristPosition = 2;
  if (this->has_leftwristposition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::leftwristposition(this), output);
  }

  // .AR51.Vector3 RightWristPosition = 3;
  if (this->has_rightwristposition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::rightwristposition(this), output);
  }

  // bytes LeftHandRotation = 4;
  if (this->lefthandrotation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->lefthandrotation(), output);
  }

  // bytes RightHandRotation = 5;
  if (this->righthandrotation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->righthandrotation(), output);
  }

  // .AR51.Quaternion HeadLocalRotation = 6;
  if (this->has_headlocalrotation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::headlocalrotation(this), output);
  }

  // bytes LeftHandPositions = 7;
  if (this->lefthandpositions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->lefthandpositions(), output);
  }

  // bytes RightHandPositions = 8;
  if (this->righthandpositions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->righthandpositions(), output);
  }

  // string DeviceId = 9;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), static_cast<int>(this->deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.HandsInfoRequest.DeviceId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->deviceid(), output);
  }

  // string CharacterPrefab = 10;
  if (this->characterprefab().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->characterprefab().data(), static_cast<int>(this->characterprefab().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.HandsInfoRequest.CharacterPrefab");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->characterprefab(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.HandsInfoRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* HandsInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.HandsInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string SkeletonId = 1;
  if (this->skeletonid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->skeletonid().data(), static_cast<int>(this->skeletonid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.HandsInfoRequest.SkeletonId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->skeletonid(), target);
  }

  // .AR51.Vector3 LeftWristPosition = 2;
  if (this->has_leftwristposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::leftwristposition(this), target);
  }

  // .AR51.Vector3 RightWristPosition = 3;
  if (this->has_rightwristposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::rightwristposition(this), target);
  }

  // bytes LeftHandRotation = 4;
  if (this->lefthandrotation().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->lefthandrotation(), target);
  }

  // bytes RightHandRotation = 5;
  if (this->righthandrotation().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->righthandrotation(), target);
  }

  // .AR51.Quaternion HeadLocalRotation = 6;
  if (this->has_headlocalrotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::headlocalrotation(this), target);
  }

  // bytes LeftHandPositions = 7;
  if (this->lefthandpositions().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->lefthandpositions(), target);
  }

  // bytes RightHandPositions = 8;
  if (this->righthandpositions().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        8, this->righthandpositions(), target);
  }

  // string DeviceId = 9;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), static_cast<int>(this->deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.HandsInfoRequest.DeviceId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->deviceid(), target);
  }

  // string CharacterPrefab = 10;
  if (this->characterprefab().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->characterprefab().data(), static_cast<int>(this->characterprefab().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.HandsInfoRequest.CharacterPrefab");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->characterprefab(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.HandsInfoRequest)
  return target;
}

size_t HandsInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.HandsInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SkeletonId = 1;
  if (this->skeletonid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->skeletonid());
  }

  // bytes LeftHandRotation = 4;
  if (this->lefthandrotation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->lefthandrotation());
  }

  // bytes RightHandRotation = 5;
  if (this->righthandrotation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->righthandrotation());
  }

  // bytes LeftHandPositions = 7;
  if (this->lefthandpositions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->lefthandpositions());
  }

  // bytes RightHandPositions = 8;
  if (this->righthandpositions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->righthandpositions());
  }

  // string DeviceId = 9;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->deviceid());
  }

  // string CharacterPrefab = 10;
  if (this->characterprefab().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->characterprefab());
  }

  // .AR51.Vector3 LeftWristPosition = 2;
  if (this->has_leftwristposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftwristposition_);
  }

  // .AR51.Vector3 RightWristPosition = 3;
  if (this->has_rightwristposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightwristposition_);
  }

  // .AR51.Quaternion HeadLocalRotation = 6;
  if (this->has_headlocalrotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *headlocalrotation_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HandsInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.HandsInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HandsInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HandsInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.HandsInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.HandsInfoRequest)
    MergeFrom(*source);
  }
}

void HandsInfoRequest::MergeFrom(const HandsInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.HandsInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skeletonid().size() > 0) {

    skeletonid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skeletonid_);
  }
  if (from.lefthandrotation().size() > 0) {

    lefthandrotation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lefthandrotation_);
  }
  if (from.righthandrotation().size() > 0) {

    righthandrotation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.righthandrotation_);
  }
  if (from.lefthandpositions().size() > 0) {

    lefthandpositions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lefthandpositions_);
  }
  if (from.righthandpositions().size() > 0) {

    righthandpositions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.righthandpositions_);
  }
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.characterprefab().size() > 0) {

    characterprefab_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.characterprefab_);
  }
  if (from.has_leftwristposition()) {
    mutable_leftwristposition()->::AR51::Vector3::MergeFrom(from.leftwristposition());
  }
  if (from.has_rightwristposition()) {
    mutable_rightwristposition()->::AR51::Vector3::MergeFrom(from.rightwristposition());
  }
  if (from.has_headlocalrotation()) {
    mutable_headlocalrotation()->::AR51::Quaternion::MergeFrom(from.headlocalrotation());
  }
}

void HandsInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.HandsInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandsInfoRequest::CopyFrom(const HandsInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.HandsInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandsInfoRequest::IsInitialized() const {
  return true;
}

void HandsInfoRequest::Swap(HandsInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HandsInfoRequest::InternalSwap(HandsInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  skeletonid_.Swap(&other->skeletonid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lefthandrotation_.Swap(&other->lefthandrotation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  righthandrotation_.Swap(&other->righthandrotation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lefthandpositions_.Swap(&other->lefthandpositions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  righthandpositions_.Swap(&other->righthandpositions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  characterprefab_.Swap(&other->characterprefab_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(leftwristposition_, other->leftwristposition_);
  swap(rightwristposition_, other->rightwristposition_);
  swap(headlocalrotation_, other->headlocalrotation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandsInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControllerInfoRequest::InitAsDefaultInstance() {
}
class ControllerInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerInfoRequest::kIsDetectedFieldNumber;
const int ControllerInfoRequest::kLocalToWorldLHFieldNumber;
const int ControllerInfoRequest::kLocalToAnchorLHFieldNumber;
const int ControllerInfoRequest::kButtonsFieldNumber;
const int ControllerInfoRequest::kButtonStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerInfoRequest::ControllerInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.ControllerInfoRequest)
}
ControllerInfoRequest::ControllerInfoRequest(const ControllerInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      buttons_(from.buttons_),
      buttonstatus_(from.buttonstatus_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  localtoworldlh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.localtoworldlh().size() > 0) {
    localtoworldlh_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.localtoworldlh_);
  }
  localtoanchorlh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.localtoanchorlh().size() > 0) {
    localtoanchorlh_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.localtoanchorlh_);
  }
  isdetected_ = from.isdetected_;
  // @@protoc_insertion_point(copy_constructor:AR51.ControllerInfoRequest)
}

void ControllerInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControllerInfoRequest_cvs_2eproto.base);
  localtoworldlh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localtoanchorlh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isdetected_ = false;
}

ControllerInfoRequest::~ControllerInfoRequest() {
  // @@protoc_insertion_point(destructor:AR51.ControllerInfoRequest)
  SharedDtor();
}

void ControllerInfoRequest::SharedDtor() {
  localtoworldlh_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localtoanchorlh_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControllerInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControllerInfoRequest& ControllerInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControllerInfoRequest_cvs_2eproto.base);
  return *internal_default_instance();
}


void ControllerInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.ControllerInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buttons_.Clear();
  buttonstatus_.Clear();
  localtoworldlh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localtoanchorlh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isdetected_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ControllerInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool IsDetected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isdetected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes LocalToWorldLH = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_localtoworldlh(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes LocalToAnchorLH = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_localtoanchorlh(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AR51.ControllerButton Buttons = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_buttons(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_buttons(static_cast<::AR51::ControllerButton>(val));
        } else goto handle_unusual;
        continue;
      // repeated .AR51.ControllerButtonStatus ButtonStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_buttonstatus(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_buttonstatus(static_cast<::AR51::ControllerButtonStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ControllerInfoRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.ControllerInfoRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool IsDetected = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdetected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes LocalToWorldLH = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_localtoworldlh()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes LocalToAnchorLH = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_localtoanchorlh()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AR51.ControllerButton Buttons = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_buttons(static_cast< ::AR51::ControllerButton >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_buttons(static_cast< ::AR51::ControllerButton >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AR51.ControllerButtonStatus ButtonStatus = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_buttonstatus(static_cast< ::AR51::ControllerButtonStatus >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_buttonstatus(static_cast< ::AR51::ControllerButtonStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.ControllerInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.ControllerInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ControllerInfoRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.ControllerInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsDetected = 1;
  if (this->isdetected() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->isdetected(), output);
  }

  // bytes LocalToWorldLH = 2;
  if (this->localtoworldlh().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->localtoworldlh(), output);
  }

  // bytes LocalToAnchorLH = 3;
  if (this->localtoanchorlh().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->localtoanchorlh(), output);
  }

  // repeated .AR51.ControllerButton Buttons = 4;
  if (this->buttons_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_buttons_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->buttons_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->buttons(i), output);
  }

  // repeated .AR51.ControllerButtonStatus ButtonStatus = 5;
  if (this->buttonstatus_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_buttonstatus_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->buttonstatus_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->buttonstatus(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.ControllerInfoRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.ControllerInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsDetected = 1;
  if (this->isdetected() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->isdetected(), target);
  }

  // bytes LocalToWorldLH = 2;
  if (this->localtoworldlh().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->localtoworldlh(), target);
  }

  // bytes LocalToAnchorLH = 3;
  if (this->localtoanchorlh().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->localtoanchorlh(), target);
  }

  // repeated .AR51.ControllerButton Buttons = 4;
  if (this->buttons_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _buttons_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->buttons_, target);
  }

  // repeated .AR51.ControllerButtonStatus ButtonStatus = 5;
  if (this->buttonstatus_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _buttonstatus_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->buttonstatus_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.ControllerInfoRequest)
  return target;
}

size_t ControllerInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.ControllerInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AR51.ControllerButton Buttons = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->buttons_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->buttons(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _buttons_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .AR51.ControllerButtonStatus ButtonStatus = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->buttonstatus_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->buttonstatus(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _buttonstatus_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes LocalToWorldLH = 2;
  if (this->localtoworldlh().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->localtoworldlh());
  }

  // bytes LocalToAnchorLH = 3;
  if (this->localtoanchorlh().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->localtoanchorlh());
  }

  // bool IsDetected = 1;
  if (this->isdetected() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.ControllerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.ControllerInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.ControllerInfoRequest)
    MergeFrom(*source);
  }
}

void ControllerInfoRequest::MergeFrom(const ControllerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.ControllerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buttons_.MergeFrom(from.buttons_);
  buttonstatus_.MergeFrom(from.buttonstatus_);
  if (from.localtoworldlh().size() > 0) {

    localtoworldlh_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.localtoworldlh_);
  }
  if (from.localtoanchorlh().size() > 0) {

    localtoanchorlh_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.localtoanchorlh_);
  }
  if (from.isdetected() != 0) {
    set_isdetected(from.isdetected());
  }
}

void ControllerInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.ControllerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerInfoRequest::CopyFrom(const ControllerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.ControllerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerInfoRequest::IsInitialized() const {
  return true;
}

void ControllerInfoRequest::Swap(ControllerInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerInfoRequest::InternalSwap(ControllerInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  buttons_.InternalSwap(&other->buttons_);
  buttonstatus_.InternalSwap(&other->buttonstatus_);
  localtoworldlh_.Swap(&other->localtoworldlh_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  localtoanchorlh_.Swap(&other->localtoanchorlh_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(isdetected_, other->isdetected_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiControllerInfoRequest::InitAsDefaultInstance() {
  ::AR51::_MultiControllerInfoRequest_default_instance_._instance.get_mutable()->leftcontroller_ = const_cast< ::AR51::ControllerInfoRequest*>(
      ::AR51::ControllerInfoRequest::internal_default_instance());
  ::AR51::_MultiControllerInfoRequest_default_instance_._instance.get_mutable()->rightcontroller_ = const_cast< ::AR51::ControllerInfoRequest*>(
      ::AR51::ControllerInfoRequest::internal_default_instance());
}
class MultiControllerInfoRequest::HasBitSetters {
 public:
  static const ::AR51::ControllerInfoRequest& leftcontroller(const MultiControllerInfoRequest* msg);
  static const ::AR51::ControllerInfoRequest& rightcontroller(const MultiControllerInfoRequest* msg);
};

const ::AR51::ControllerInfoRequest&
MultiControllerInfoRequest::HasBitSetters::leftcontroller(const MultiControllerInfoRequest* msg) {
  return *msg->leftcontroller_;
}
const ::AR51::ControllerInfoRequest&
MultiControllerInfoRequest::HasBitSetters::rightcontroller(const MultiControllerInfoRequest* msg) {
  return *msg->rightcontroller_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiControllerInfoRequest::kSkeletonIdFieldNumber;
const int MultiControllerInfoRequest::kLeftControllerFieldNumber;
const int MultiControllerInfoRequest::kRightControllerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiControllerInfoRequest::MultiControllerInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.MultiControllerInfoRequest)
}
MultiControllerInfoRequest::MultiControllerInfoRequest(const MultiControllerInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skeletonid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.skeletonid().size() > 0) {
    skeletonid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skeletonid_);
  }
  if (from.has_leftcontroller()) {
    leftcontroller_ = new ::AR51::ControllerInfoRequest(*from.leftcontroller_);
  } else {
    leftcontroller_ = nullptr;
  }
  if (from.has_rightcontroller()) {
    rightcontroller_ = new ::AR51::ControllerInfoRequest(*from.rightcontroller_);
  } else {
    rightcontroller_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AR51.MultiControllerInfoRequest)
}

void MultiControllerInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiControllerInfoRequest_cvs_2eproto.base);
  skeletonid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&leftcontroller_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightcontroller_) -
      reinterpret_cast<char*>(&leftcontroller_)) + sizeof(rightcontroller_));
}

MultiControllerInfoRequest::~MultiControllerInfoRequest() {
  // @@protoc_insertion_point(destructor:AR51.MultiControllerInfoRequest)
  SharedDtor();
}

void MultiControllerInfoRequest::SharedDtor() {
  skeletonid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete leftcontroller_;
  if (this != internal_default_instance()) delete rightcontroller_;
}

void MultiControllerInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiControllerInfoRequest& MultiControllerInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiControllerInfoRequest_cvs_2eproto.base);
  return *internal_default_instance();
}


void MultiControllerInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.MultiControllerInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skeletonid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && leftcontroller_ != nullptr) {
    delete leftcontroller_;
  }
  leftcontroller_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rightcontroller_ != nullptr) {
    delete rightcontroller_;
  }
  rightcontroller_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MultiControllerInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string SkeletonId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_skeletonid(), ptr, ctx, "AR51.MultiControllerInfoRequest.SkeletonId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.ControllerInfoRequest LeftController = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_leftcontroller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.ControllerInfoRequest RightController = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_rightcontroller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MultiControllerInfoRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.MultiControllerInfoRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string SkeletonId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_skeletonid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->skeletonid().data(), static_cast<int>(this->skeletonid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.MultiControllerInfoRequest.SkeletonId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.ControllerInfoRequest LeftController = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_leftcontroller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.ControllerInfoRequest RightController = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rightcontroller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.MultiControllerInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.MultiControllerInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MultiControllerInfoRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.MultiControllerInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string SkeletonId = 1;
  if (this->skeletonid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->skeletonid().data(), static_cast<int>(this->skeletonid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.MultiControllerInfoRequest.SkeletonId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->skeletonid(), output);
  }

  // .AR51.ControllerInfoRequest LeftController = 2;
  if (this->has_leftcontroller()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::leftcontroller(this), output);
  }

  // .AR51.ControllerInfoRequest RightController = 3;
  if (this->has_rightcontroller()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::rightcontroller(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.MultiControllerInfoRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiControllerInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.MultiControllerInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string SkeletonId = 1;
  if (this->skeletonid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->skeletonid().data(), static_cast<int>(this->skeletonid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.MultiControllerInfoRequest.SkeletonId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->skeletonid(), target);
  }

  // .AR51.ControllerInfoRequest LeftController = 2;
  if (this->has_leftcontroller()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::leftcontroller(this), target);
  }

  // .AR51.ControllerInfoRequest RightController = 3;
  if (this->has_rightcontroller()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::rightcontroller(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.MultiControllerInfoRequest)
  return target;
}

size_t MultiControllerInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.MultiControllerInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SkeletonId = 1;
  if (this->skeletonid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->skeletonid());
  }

  // .AR51.ControllerInfoRequest LeftController = 2;
  if (this->has_leftcontroller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftcontroller_);
  }

  // .AR51.ControllerInfoRequest RightController = 3;
  if (this->has_rightcontroller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightcontroller_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiControllerInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.MultiControllerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiControllerInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiControllerInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.MultiControllerInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.MultiControllerInfoRequest)
    MergeFrom(*source);
  }
}

void MultiControllerInfoRequest::MergeFrom(const MultiControllerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.MultiControllerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skeletonid().size() > 0) {

    skeletonid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skeletonid_);
  }
  if (from.has_leftcontroller()) {
    mutable_leftcontroller()->::AR51::ControllerInfoRequest::MergeFrom(from.leftcontroller());
  }
  if (from.has_rightcontroller()) {
    mutable_rightcontroller()->::AR51::ControllerInfoRequest::MergeFrom(from.rightcontroller());
  }
}

void MultiControllerInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.MultiControllerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiControllerInfoRequest::CopyFrom(const MultiControllerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.MultiControllerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiControllerInfoRequest::IsInitialized() const {
  return true;
}

void MultiControllerInfoRequest::Swap(MultiControllerInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiControllerInfoRequest::InternalSwap(MultiControllerInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  skeletonid_.Swap(&other->skeletonid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(leftcontroller_, other->leftcontroller_);
  swap(rightcontroller_, other->rightcontroller_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiControllerInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SkeletonReply::InitAsDefaultInstance() {
  ::AR51::_SkeletonReply_default_instance_._instance.get_mutable()->headlocalrotation_ = const_cast< ::AR51::Quaternion*>(
      ::AR51::Quaternion::internal_default_instance());
  ::AR51::_SkeletonReply_default_instance_._instance.get_mutable()->leftwristposition_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
  ::AR51::_SkeletonReply_default_instance_._instance.get_mutable()->rightwristposition_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
  ::AR51::_SkeletonReply_default_instance_._instance.get_mutable()->multicontrollerinfo_ = const_cast< ::AR51::MultiControllerInfoRequest*>(
      ::AR51::MultiControllerInfoRequest::internal_default_instance());
}
class SkeletonReply::HasBitSetters {
 public:
  static const ::AR51::Quaternion& headlocalrotation(const SkeletonReply* msg);
  static const ::AR51::Vector3& leftwristposition(const SkeletonReply* msg);
  static const ::AR51::Vector3& rightwristposition(const SkeletonReply* msg);
  static const ::AR51::MultiControllerInfoRequest& multicontrollerinfo(const SkeletonReply* msg);
};

const ::AR51::Quaternion&
SkeletonReply::HasBitSetters::headlocalrotation(const SkeletonReply* msg) {
  return *msg->headlocalrotation_;
}
const ::AR51::Vector3&
SkeletonReply::HasBitSetters::leftwristposition(const SkeletonReply* msg) {
  return *msg->leftwristposition_;
}
const ::AR51::Vector3&
SkeletonReply::HasBitSetters::rightwristposition(const SkeletonReply* msg) {
  return *msg->rightwristposition_;
}
const ::AR51::MultiControllerInfoRequest&
SkeletonReply::HasBitSetters::multicontrollerinfo(const SkeletonReply* msg) {
  return *msg->multicontrollerinfo_;
}
void SkeletonReply::clear_headlocalrotation() {
  if (GetArenaNoVirtual() == nullptr && headlocalrotation_ != nullptr) {
    delete headlocalrotation_;
  }
  headlocalrotation_ = nullptr;
}
void SkeletonReply::clear_leftwristposition() {
  if (GetArenaNoVirtual() == nullptr && leftwristposition_ != nullptr) {
    delete leftwristposition_;
  }
  leftwristposition_ = nullptr;
}
void SkeletonReply::clear_rightwristposition() {
  if (GetArenaNoVirtual() == nullptr && rightwristposition_ != nullptr) {
    delete rightwristposition_;
  }
  rightwristposition_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SkeletonReply::kIdFieldNumber;
const int SkeletonReply::kAnchorIdFieldNumber;
const int SkeletonReply::kPositionsFieldNumber;
const int SkeletonReply::kLeftHandRotationFieldNumber;
const int SkeletonReply::kRightHandRotationFieldNumber;
const int SkeletonReply::kHasHeadLocalRotationFieldNumber;
const int SkeletonReply::kHeadLocalRotationFieldNumber;
const int SkeletonReply::kHasWristPositionsFieldNumber;
const int SkeletonReply::kLeftWristPositionFieldNumber;
const int SkeletonReply::kRightWristPositionFieldNumber;
const int SkeletonReply::kLeftHandPositionsFieldNumber;
const int SkeletonReply::kRightHandPositionsFieldNumber;
const int SkeletonReply::kCaptureTimeFieldNumber;
const int SkeletonReply::kConfidenceFieldNumber;
const int SkeletonReply::kMultiControllerInfoFieldNumber;
const int SkeletonReply::kDeviceIdFieldNumber;
const int SkeletonReply::kCharacterPrefabFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SkeletonReply::SkeletonReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.SkeletonReply)
}
SkeletonReply::SkeletonReply(const SkeletonReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  anchorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.anchorid().size() > 0) {
    anchorid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anchorid_);
  }
  positions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.positions().size() > 0) {
    positions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.positions_);
  }
  lefthandrotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.lefthandrotation().size() > 0) {
    lefthandrotation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lefthandrotation_);
  }
  righthandrotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.righthandrotation().size() > 0) {
    righthandrotation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.righthandrotation_);
  }
  lefthandpositions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.lefthandpositions().size() > 0) {
    lefthandpositions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lefthandpositions_);
  }
  righthandpositions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.righthandpositions().size() > 0) {
    righthandpositions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.righthandpositions_);
  }
  confidence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.confidence().size() > 0) {
    confidence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.confidence_);
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.deviceid().size() > 0) {
    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  characterprefab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.characterprefab().size() > 0) {
    characterprefab_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.characterprefab_);
  }
  if (from.has_headlocalrotation()) {
    headlocalrotation_ = new ::AR51::Quaternion(*from.headlocalrotation_);
  } else {
    headlocalrotation_ = nullptr;
  }
  if (from.has_leftwristposition()) {
    leftwristposition_ = new ::AR51::Vector3(*from.leftwristposition_);
  } else {
    leftwristposition_ = nullptr;
  }
  if (from.has_rightwristposition()) {
    rightwristposition_ = new ::AR51::Vector3(*from.rightwristposition_);
  } else {
    rightwristposition_ = nullptr;
  }
  if (from.has_multicontrollerinfo()) {
    multicontrollerinfo_ = new ::AR51::MultiControllerInfoRequest(*from.multicontrollerinfo_);
  } else {
    multicontrollerinfo_ = nullptr;
  }
  ::memcpy(&capturetime_, &from.capturetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&haswristpositions_) -
    reinterpret_cast<char*>(&capturetime_)) + sizeof(haswristpositions_));
  // @@protoc_insertion_point(copy_constructor:AR51.SkeletonReply)
}

void SkeletonReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SkeletonReply_cvs_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anchorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  positions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lefthandrotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  righthandrotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lefthandpositions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  righthandpositions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  confidence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characterprefab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&headlocalrotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&haswristpositions_) -
      reinterpret_cast<char*>(&headlocalrotation_)) + sizeof(haswristpositions_));
}

SkeletonReply::~SkeletonReply() {
  // @@protoc_insertion_point(destructor:AR51.SkeletonReply)
  SharedDtor();
}

void SkeletonReply::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anchorid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  positions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lefthandrotation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  righthandrotation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lefthandpositions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  righthandpositions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  confidence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characterprefab_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete headlocalrotation_;
  if (this != internal_default_instance()) delete leftwristposition_;
  if (this != internal_default_instance()) delete rightwristposition_;
  if (this != internal_default_instance()) delete multicontrollerinfo_;
}

void SkeletonReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SkeletonReply& SkeletonReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SkeletonReply_cvs_2eproto.base);
  return *internal_default_instance();
}


void SkeletonReply::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.SkeletonReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anchorid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  positions_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lefthandrotation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  righthandrotation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lefthandpositions_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  righthandpositions_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  confidence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  characterprefab_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && headlocalrotation_ != nullptr) {
    delete headlocalrotation_;
  }
  headlocalrotation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && leftwristposition_ != nullptr) {
    delete leftwristposition_;
  }
  leftwristposition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rightwristposition_ != nullptr) {
    delete rightwristposition_;
  }
  rightwristposition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && multicontrollerinfo_ != nullptr) {
    delete multicontrollerinfo_;
  }
  multicontrollerinfo_ = nullptr;
  ::memset(&capturetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&haswristpositions_) -
      reinterpret_cast<char*>(&capturetime_)) + sizeof(haswristpositions_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SkeletonReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "AR51.SkeletonReply.Id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string AnchorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_anchorid(), ptr, ctx, "AR51.SkeletonReply.AnchorId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Positions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_positions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes LeftHandRotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_lefthandrotation(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes RightHandRotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_righthandrotation(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HasHeadLocalRotation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          hasheadlocalrotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Quaternion HeadLocalRotation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_headlocalrotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HasWristPositions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          haswristpositions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector3 LeftWristPosition = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_leftwristposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector3 RightWristPosition = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_rightwristposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes LeftHandPositions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_lefthandpositions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes RightHandPositions = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_righthandpositions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double CaptureTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          capturetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes Confidence = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_confidence(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.MultiControllerInfoRequest MultiControllerInfo = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_multicontrollerinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DeviceId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_deviceid(), ptr, ctx, "AR51.SkeletonReply.DeviceId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CharacterPrefab = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_characterprefab(), ptr, ctx, "AR51.SkeletonReply.CharacterPrefab");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SkeletonReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.SkeletonReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.SkeletonReply.Id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string AnchorId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_anchorid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->anchorid().data(), static_cast<int>(this->anchorid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.SkeletonReply.AnchorId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Positions = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes LeftHandRotation = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lefthandrotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes RightHandRotation = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_righthandrotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool HasHeadLocalRotation = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasheadlocalrotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Quaternion HeadLocalRotation = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_headlocalrotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool HasWristPositions = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haswristpositions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector3 LeftWristPosition = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_leftwristposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector3 RightWristPosition = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rightwristposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes LeftHandPositions = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lefthandpositions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes RightHandPositions = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_righthandpositions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CaptureTime = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (105 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &capturetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Confidence = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.MultiControllerInfoRequest MultiControllerInfo = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_multicontrollerinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string DeviceId = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->deviceid().data(), static_cast<int>(this->deviceid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.SkeletonReply.DeviceId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CharacterPrefab = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_characterprefab()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->characterprefab().data(), static_cast<int>(this->characterprefab().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.SkeletonReply.CharacterPrefab"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.SkeletonReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.SkeletonReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SkeletonReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.SkeletonReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SkeletonReply.Id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string AnchorId = 2;
  if (this->anchorid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->anchorid().data(), static_cast<int>(this->anchorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SkeletonReply.AnchorId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->anchorid(), output);
  }

  // bytes Positions = 3;
  if (this->positions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->positions(), output);
  }

  // bytes LeftHandRotation = 4;
  if (this->lefthandrotation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->lefthandrotation(), output);
  }

  // bytes RightHandRotation = 5;
  if (this->righthandrotation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->righthandrotation(), output);
  }

  // bool HasHeadLocalRotation = 6;
  if (this->hasheadlocalrotation() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->hasheadlocalrotation(), output);
  }

  // .AR51.Quaternion HeadLocalRotation = 7;
  if (this->has_headlocalrotation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::headlocalrotation(this), output);
  }

  // bool HasWristPositions = 8;
  if (this->haswristpositions() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->haswristpositions(), output);
  }

  // .AR51.Vector3 LeftWristPosition = 9;
  if (this->has_leftwristposition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::leftwristposition(this), output);
  }

  // .AR51.Vector3 RightWristPosition = 10;
  if (this->has_rightwristposition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::rightwristposition(this), output);
  }

  // bytes LeftHandPositions = 11;
  if (this->lefthandpositions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->lefthandpositions(), output);
  }

  // bytes RightHandPositions = 12;
  if (this->righthandpositions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->righthandpositions(), output);
  }

  // double CaptureTime = 13;
  if (!(this->capturetime() <= 0 && this->capturetime() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(13, this->capturetime(), output);
  }

  // bytes Confidence = 14;
  if (this->confidence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->confidence(), output);
  }

  // .AR51.MultiControllerInfoRequest MultiControllerInfo = 15;
  if (this->has_multicontrollerinfo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::multicontrollerinfo(this), output);
  }

  // string DeviceId = 16;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), static_cast<int>(this->deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SkeletonReply.DeviceId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->deviceid(), output);
  }

  // string CharacterPrefab = 17;
  if (this->characterprefab().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->characterprefab().data(), static_cast<int>(this->characterprefab().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SkeletonReply.CharacterPrefab");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->characterprefab(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.SkeletonReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* SkeletonReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.SkeletonReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SkeletonReply.Id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string AnchorId = 2;
  if (this->anchorid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->anchorid().data(), static_cast<int>(this->anchorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SkeletonReply.AnchorId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->anchorid(), target);
  }

  // bytes Positions = 3;
  if (this->positions().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->positions(), target);
  }

  // bytes LeftHandRotation = 4;
  if (this->lefthandrotation().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->lefthandrotation(), target);
  }

  // bytes RightHandRotation = 5;
  if (this->righthandrotation().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->righthandrotation(), target);
  }

  // bool HasHeadLocalRotation = 6;
  if (this->hasheadlocalrotation() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->hasheadlocalrotation(), target);
  }

  // .AR51.Quaternion HeadLocalRotation = 7;
  if (this->has_headlocalrotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::headlocalrotation(this), target);
  }

  // bool HasWristPositions = 8;
  if (this->haswristpositions() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->haswristpositions(), target);
  }

  // .AR51.Vector3 LeftWristPosition = 9;
  if (this->has_leftwristposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::leftwristposition(this), target);
  }

  // .AR51.Vector3 RightWristPosition = 10;
  if (this->has_rightwristposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::rightwristposition(this), target);
  }

  // bytes LeftHandPositions = 11;
  if (this->lefthandpositions().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        11, this->lefthandpositions(), target);
  }

  // bytes RightHandPositions = 12;
  if (this->righthandpositions().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        12, this->righthandpositions(), target);
  }

  // double CaptureTime = 13;
  if (!(this->capturetime() <= 0 && this->capturetime() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->capturetime(), target);
  }

  // bytes Confidence = 14;
  if (this->confidence().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        14, this->confidence(), target);
  }

  // .AR51.MultiControllerInfoRequest MultiControllerInfo = 15;
  if (this->has_multicontrollerinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::multicontrollerinfo(this), target);
  }

  // string DeviceId = 16;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), static_cast<int>(this->deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SkeletonReply.DeviceId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        16, this->deviceid(), target);
  }

  // string CharacterPrefab = 17;
  if (this->characterprefab().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->characterprefab().data(), static_cast<int>(this->characterprefab().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SkeletonReply.CharacterPrefab");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        17, this->characterprefab(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.SkeletonReply)
  return target;
}

size_t SkeletonReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.SkeletonReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string AnchorId = 2;
  if (this->anchorid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->anchorid());
  }

  // bytes Positions = 3;
  if (this->positions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->positions());
  }

  // bytes LeftHandRotation = 4;
  if (this->lefthandrotation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->lefthandrotation());
  }

  // bytes RightHandRotation = 5;
  if (this->righthandrotation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->righthandrotation());
  }

  // bytes LeftHandPositions = 11;
  if (this->lefthandpositions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->lefthandpositions());
  }

  // bytes RightHandPositions = 12;
  if (this->righthandpositions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->righthandpositions());
  }

  // bytes Confidence = 14;
  if (this->confidence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->confidence());
  }

  // string DeviceId = 16;
  if (this->deviceid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->deviceid());
  }

  // string CharacterPrefab = 17;
  if (this->characterprefab().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->characterprefab());
  }

  // .AR51.Quaternion HeadLocalRotation = 7;
  if (this->has_headlocalrotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *headlocalrotation_);
  }

  // .AR51.Vector3 LeftWristPosition = 9;
  if (this->has_leftwristposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftwristposition_);
  }

  // .AR51.Vector3 RightWristPosition = 10;
  if (this->has_rightwristposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightwristposition_);
  }

  // .AR51.MultiControllerInfoRequest MultiControllerInfo = 15;
  if (this->has_multicontrollerinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multicontrollerinfo_);
  }

  // double CaptureTime = 13;
  if (!(this->capturetime() <= 0 && this->capturetime() >= 0)) {
    total_size += 1 + 8;
  }

  // bool HasHeadLocalRotation = 6;
  if (this->hasheadlocalrotation() != 0) {
    total_size += 1 + 1;
  }

  // bool HasWristPositions = 8;
  if (this->haswristpositions() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SkeletonReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.SkeletonReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SkeletonReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SkeletonReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.SkeletonReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.SkeletonReply)
    MergeFrom(*source);
  }
}

void SkeletonReply::MergeFrom(const SkeletonReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.SkeletonReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.anchorid().size() > 0) {

    anchorid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anchorid_);
  }
  if (from.positions().size() > 0) {

    positions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.positions_);
  }
  if (from.lefthandrotation().size() > 0) {

    lefthandrotation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lefthandrotation_);
  }
  if (from.righthandrotation().size() > 0) {

    righthandrotation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.righthandrotation_);
  }
  if (from.lefthandpositions().size() > 0) {

    lefthandpositions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lefthandpositions_);
  }
  if (from.righthandpositions().size() > 0) {

    righthandpositions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.righthandpositions_);
  }
  if (from.confidence().size() > 0) {

    confidence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.confidence_);
  }
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.characterprefab().size() > 0) {

    characterprefab_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.characterprefab_);
  }
  if (from.has_headlocalrotation()) {
    mutable_headlocalrotation()->::AR51::Quaternion::MergeFrom(from.headlocalrotation());
  }
  if (from.has_leftwristposition()) {
    mutable_leftwristposition()->::AR51::Vector3::MergeFrom(from.leftwristposition());
  }
  if (from.has_rightwristposition()) {
    mutable_rightwristposition()->::AR51::Vector3::MergeFrom(from.rightwristposition());
  }
  if (from.has_multicontrollerinfo()) {
    mutable_multicontrollerinfo()->::AR51::MultiControllerInfoRequest::MergeFrom(from.multicontrollerinfo());
  }
  if (!(from.capturetime() <= 0 && from.capturetime() >= 0)) {
    set_capturetime(from.capturetime());
  }
  if (from.hasheadlocalrotation() != 0) {
    set_hasheadlocalrotation(from.hasheadlocalrotation());
  }
  if (from.haswristpositions() != 0) {
    set_haswristpositions(from.haswristpositions());
  }
}

void SkeletonReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.SkeletonReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkeletonReply::CopyFrom(const SkeletonReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.SkeletonReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkeletonReply::IsInitialized() const {
  return true;
}

void SkeletonReply::Swap(SkeletonReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SkeletonReply::InternalSwap(SkeletonReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  anchorid_.Swap(&other->anchorid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  positions_.Swap(&other->positions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lefthandrotation_.Swap(&other->lefthandrotation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  righthandrotation_.Swap(&other->righthandrotation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lefthandpositions_.Swap(&other->lefthandpositions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  righthandpositions_.Swap(&other->righthandpositions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  confidence_.Swap(&other->confidence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  characterprefab_.Swap(&other->characterprefab_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(headlocalrotation_, other->headlocalrotation_);
  swap(leftwristposition_, other->leftwristposition_);
  swap(rightwristposition_, other->rightwristposition_);
  swap(multicontrollerinfo_, other->multicontrollerinfo_);
  swap(capturetime_, other->capturetime_);
  swap(hasheadlocalrotation_, other->hasheadlocalrotation_);
  swap(haswristpositions_, other->haswristpositions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SkeletonReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundInfo::InitAsDefaultInstance() {
  ::AR51::_BoundInfo_default_instance_._instance.get_mutable()->center_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
  ::AR51::_BoundInfo_default_instance_._instance.get_mutable()->extents_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
}
class BoundInfo::HasBitSetters {
 public:
  static const ::AR51::Vector3& center(const BoundInfo* msg);
  static const ::AR51::Vector3& extents(const BoundInfo* msg);
};

const ::AR51::Vector3&
BoundInfo::HasBitSetters::center(const BoundInfo* msg) {
  return *msg->center_;
}
const ::AR51::Vector3&
BoundInfo::HasBitSetters::extents(const BoundInfo* msg) {
  return *msg->extents_;
}
void BoundInfo::clear_center() {
  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
void BoundInfo::clear_extents() {
  if (GetArenaNoVirtual() == nullptr && extents_ != nullptr) {
    delete extents_;
  }
  extents_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundInfo::kCenterFieldNumber;
const int BoundInfo::kExtentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundInfo::BoundInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.BoundInfo)
}
BoundInfo::BoundInfo(const BoundInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    center_ = new ::AR51::Vector3(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from.has_extents()) {
    extents_ = new ::AR51::Vector3(*from.extents_);
  } else {
    extents_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AR51.BoundInfo)
}

void BoundInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundInfo_cvs_2eproto.base);
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extents_) -
      reinterpret_cast<char*>(&center_)) + sizeof(extents_));
}

BoundInfo::~BoundInfo() {
  // @@protoc_insertion_point(destructor:AR51.BoundInfo)
  SharedDtor();
}

void BoundInfo::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete extents_;
}

void BoundInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundInfo& BoundInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundInfo_cvs_2eproto.base);
  return *internal_default_instance();
}


void BoundInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.BoundInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && extents_ != nullptr) {
    delete extents_;
  }
  extents_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoundInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AR51.Vector3 Center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector3 Extents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_extents(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoundInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.BoundInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AR51.Vector3 Center = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector3 Extents = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.BoundInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.BoundInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoundInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.BoundInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.Vector3 Center = 1;
  if (this->has_center()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::center(this), output);
  }

  // .AR51.Vector3 Extents = 2;
  if (this->has_extents()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::extents(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.BoundInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.BoundInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.Vector3 Center = 1;
  if (this->has_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::center(this), target);
  }

  // .AR51.Vector3 Extents = 2;
  if (this->has_extents()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::extents(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.BoundInfo)
  return target;
}

size_t BoundInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.BoundInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AR51.Vector3 Center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // .AR51.Vector3 Extents = 2;
  if (this->has_extents()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extents_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.BoundInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.BoundInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.BoundInfo)
    MergeFrom(*source);
  }
}

void BoundInfo::MergeFrom(const BoundInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.BoundInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    mutable_center()->::AR51::Vector3::MergeFrom(from.center());
  }
  if (from.has_extents()) {
    mutable_extents()->::AR51::Vector3::MergeFrom(from.extents());
  }
}

void BoundInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.BoundInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundInfo::CopyFrom(const BoundInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.BoundInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundInfo::IsInitialized() const {
  return true;
}

void BoundInfo::Swap(BoundInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundInfo::InternalSwap(BoundInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(center_, other->center_);
  swap(extents_, other->extents_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceInfo::InitAsDefaultInstance() {
}
class DeviceInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfo::kNameFieldNumber;
const int DeviceInfo::kIpAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfo::DeviceInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ipaddress().size() > 0) {
    ipaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceInfo_cvs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:AR51.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceInfo& DeviceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceInfo_cvs_2eproto.base);
  return *internal_default_instance();
}


void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "AR51.DeviceInfo.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string IpAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ipaddress(), ptr, ctx, "AR51.DeviceInfo.IpAddress");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.DeviceInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.DeviceInfo.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string IpAddress = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddress().data(), static_cast<int>(this->ipaddress().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.DeviceInfo.IpAddress"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.DeviceInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.DeviceInfo.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string IpAddress = 2;
  if (this->ipaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), static_cast<int>(this->ipaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.DeviceInfo.IpAddress");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ipaddress(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.DeviceInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.DeviceInfo.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string IpAddress = 2;
  if (this->ipaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), static_cast<int>(this->ipaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.DeviceInfo.IpAddress");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->ipaddress(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.DeviceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string IpAddress = 2;
  if (this->ipaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ipaddress());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.DeviceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ipaddress().size() > 0) {

    ipaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
}

void DeviceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipaddress_.Swap(&other->ipaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalibrationStatus::InitAsDefaultInstance() {
}
class CalibrationStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalibrationStatus::kProgressFieldNumber;
const int CalibrationStatus::kQualityFieldNumber;
const int CalibrationStatus::kReprojectionErrorFieldNumber;
const int CalibrationStatus::kResultFieldNumber;
const int CalibrationStatus::kAnchorIdFieldNumber;
const int CalibrationStatus::kAnchorByteSizeFieldNumber;
const int CalibrationStatus::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalibrationStatus::CalibrationStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.CalibrationStatus)
}
CalibrationStatus::CalibrationStatus(const CalibrationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.result().size() > 0) {
    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  anchorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.anchorid().size() > 0) {
    anchorid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anchorid_);
  }
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:AR51.CalibrationStatus)
}

void CalibrationStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalibrationStatus_cvs_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anchorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(mode_));
}

CalibrationStatus::~CalibrationStatus() {
  // @@protoc_insertion_point(destructor:AR51.CalibrationStatus)
  SharedDtor();
}

void CalibrationStatus::SharedDtor() {
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anchorid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CalibrationStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibrationStatus& CalibrationStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalibrationStatus_cvs_2eproto.base);
  return *internal_default_instance();
}


void CalibrationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.CalibrationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anchorid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(mode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalibrationStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double Progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ReprojectionError = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          reprojectionerror_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string Result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_result(), ptr, ctx, "AR51.CalibrationStatus.Result");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string AnchorId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_anchorid(), ptr, ctx, "AR51.CalibrationStatus.AnchorId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 AnchorByteSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          anchorbytesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.CalibrationModes Mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_mode(static_cast<::AR51::CalibrationModes>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalibrationStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.CalibrationStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double Progress = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Quality = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ReprojectionError = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reprojectionerror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Result = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), static_cast<int>(this->result().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.CalibrationStatus.Result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string AnchorId = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_anchorid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->anchorid().data(), static_cast<int>(this->anchorid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.CalibrationStatus.AnchorId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 AnchorByteSize = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &anchorbytesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.CalibrationModes Mode = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::AR51::CalibrationModes >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.CalibrationStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.CalibrationStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalibrationStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.CalibrationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Progress = 1;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->progress(), output);
  }

  // double Quality = 2;
  if (!(this->quality() <= 0 && this->quality() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->quality(), output);
  }

  // double ReprojectionError = 3;
  if (!(this->reprojectionerror() <= 0 && this->reprojectionerror() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->reprojectionerror(), output);
  }

  // string Result = 4;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CalibrationStatus.Result");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->result(), output);
  }

  // string AnchorId = 5;
  if (this->anchorid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->anchorid().data(), static_cast<int>(this->anchorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CalibrationStatus.AnchorId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->anchorid(), output);
  }

  // int32 AnchorByteSize = 6;
  if (this->anchorbytesize() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->anchorbytesize(), output);
  }

  // .AR51.CalibrationModes Mode = 7;
  if (this->mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.CalibrationStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8* CalibrationStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.CalibrationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Progress = 1;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->progress(), target);
  }

  // double Quality = 2;
  if (!(this->quality() <= 0 && this->quality() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->quality(), target);
  }

  // double ReprojectionError = 3;
  if (!(this->reprojectionerror() <= 0 && this->reprojectionerror() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->reprojectionerror(), target);
  }

  // string Result = 4;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CalibrationStatus.Result");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->result(), target);
  }

  // string AnchorId = 5;
  if (this->anchorid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->anchorid().data(), static_cast<int>(this->anchorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CalibrationStatus.AnchorId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->anchorid(), target);
  }

  // int32 AnchorByteSize = 6;
  if (this->anchorbytesize() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->anchorbytesize(), target);
  }

  // .AR51.CalibrationModes Mode = 7;
  if (this->mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.CalibrationStatus)
  return target;
}

size_t CalibrationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.CalibrationStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Result = 4;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->result());
  }

  // string AnchorId = 5;
  if (this->anchorid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->anchorid());
  }

  // double Progress = 1;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    total_size += 1 + 8;
  }

  // double Quality = 2;
  if (!(this->quality() <= 0 && this->quality() >= 0)) {
    total_size += 1 + 8;
  }

  // double ReprojectionError = 3;
  if (!(this->reprojectionerror() <= 0 && this->reprojectionerror() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 AnchorByteSize = 6;
  if (this->anchorbytesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->anchorbytesize());
  }

  // .AR51.CalibrationModes Mode = 7;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibrationStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.CalibrationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrationStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalibrationStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.CalibrationStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.CalibrationStatus)
    MergeFrom(*source);
  }
}

void CalibrationStatus::MergeFrom(const CalibrationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.CalibrationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.anchorid().size() > 0) {

    anchorid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anchorid_);
  }
  if (!(from.progress() <= 0 && from.progress() >= 0)) {
    set_progress(from.progress());
  }
  if (!(from.quality() <= 0 && from.quality() >= 0)) {
    set_quality(from.quality());
  }
  if (!(from.reprojectionerror() <= 0 && from.reprojectionerror() >= 0)) {
    set_reprojectionerror(from.reprojectionerror());
  }
  if (from.anchorbytesize() != 0) {
    set_anchorbytesize(from.anchorbytesize());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void CalibrationStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.CalibrationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationStatus::CopyFrom(const CalibrationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.CalibrationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationStatus::IsInitialized() const {
  return true;
}

void CalibrationStatus::Swap(CalibrationStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalibrationStatus::InternalSwap(CalibrationStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  anchorid_.Swap(&other->anchorid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(progress_, other->progress_);
  swap(quality_, other->quality_);
  swap(reprojectionerror_, other->reprojectionerror_);
  swap(anchorbytesize_, other->anchorbytesize_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalibrationStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalibrationPointCloudMessage::InitAsDefaultInstance() {
  ::AR51::_CalibrationPointCloudMessage_default_instance_._instance.get_mutable()->startcolor_ = const_cast< ::AR51::Color*>(
      ::AR51::Color::internal_default_instance());
  ::AR51::_CalibrationPointCloudMessage_default_instance_._instance.get_mutable()->endcolor_ = const_cast< ::AR51::Color*>(
      ::AR51::Color::internal_default_instance());
}
class CalibrationPointCloudMessage::HasBitSetters {
 public:
  static const ::AR51::Color& startcolor(const CalibrationPointCloudMessage* msg);
  static const ::AR51::Color& endcolor(const CalibrationPointCloudMessage* msg);
};

const ::AR51::Color&
CalibrationPointCloudMessage::HasBitSetters::startcolor(const CalibrationPointCloudMessage* msg) {
  return *msg->startcolor_;
}
const ::AR51::Color&
CalibrationPointCloudMessage::HasBitSetters::endcolor(const CalibrationPointCloudMessage* msg) {
  return *msg->endcolor_;
}
void CalibrationPointCloudMessage::clear_startcolor() {
  if (GetArenaNoVirtual() == nullptr && startcolor_ != nullptr) {
    delete startcolor_;
  }
  startcolor_ = nullptr;
}
void CalibrationPointCloudMessage::clear_endcolor() {
  if (GetArenaNoVirtual() == nullptr && endcolor_ != nullptr) {
    delete endcolor_;
  }
  endcolor_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalibrationPointCloudMessage::kNameFieldNumber;
const int CalibrationPointCloudMessage::kCountFieldNumber;
const int CalibrationPointCloudMessage::kStartColorFieldNumber;
const int CalibrationPointCloudMessage::kEndColorFieldNumber;
const int CalibrationPointCloudMessage::kStartSizeFieldNumber;
const int CalibrationPointCloudMessage::kEndSizeFieldNumber;
const int CalibrationPointCloudMessage::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalibrationPointCloudMessage::CalibrationPointCloudMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.CalibrationPointCloudMessage)
}
CalibrationPointCloudMessage::CalibrationPointCloudMessage(const CalibrationPointCloudMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  points_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.points().size() > 0) {
    points_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.points_);
  }
  if (from.has_startcolor()) {
    startcolor_ = new ::AR51::Color(*from.startcolor_);
  } else {
    startcolor_ = nullptr;
  }
  if (from.has_endcolor()) {
    endcolor_ = new ::AR51::Color(*from.endcolor_);
  } else {
    endcolor_ = nullptr;
  }
  ::memcpy(&startsize_, &from.startsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&startsize_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:AR51.CalibrationPointCloudMessage)
}

void CalibrationPointCloudMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalibrationPointCloudMessage_cvs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  points_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&startcolor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&startcolor_)) + sizeof(count_));
}

CalibrationPointCloudMessage::~CalibrationPointCloudMessage() {
  // @@protoc_insertion_point(destructor:AR51.CalibrationPointCloudMessage)
  SharedDtor();
}

void CalibrationPointCloudMessage::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  points_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete startcolor_;
  if (this != internal_default_instance()) delete endcolor_;
}

void CalibrationPointCloudMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibrationPointCloudMessage& CalibrationPointCloudMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalibrationPointCloudMessage_cvs_2eproto.base);
  return *internal_default_instance();
}


void CalibrationPointCloudMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.CalibrationPointCloudMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  points_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && startcolor_ != nullptr) {
    delete startcolor_;
  }
  startcolor_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && endcolor_ != nullptr) {
    delete endcolor_;
  }
  endcolor_ = nullptr;
  ::memset(&startsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&startsize_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalibrationPointCloudMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "AR51.CalibrationPointCloudMessage.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Color StartColor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_startcolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Color EndColor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_endcolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double StartSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          startsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double EndSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          endsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes Points = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalibrationPointCloudMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.CalibrationPointCloudMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.CalibrationPointCloudMessage.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Color StartColor = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_startcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Color EndColor = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_endcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double StartSize = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double EndSize = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Points = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.CalibrationPointCloudMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.CalibrationPointCloudMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalibrationPointCloudMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.CalibrationPointCloudMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CalibrationPointCloudMessage.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 Count = 2;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // .AR51.Color StartColor = 3;
  if (this->has_startcolor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::startcolor(this), output);
  }

  // .AR51.Color EndColor = 4;
  if (this->has_endcolor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::endcolor(this), output);
  }

  // double StartSize = 5;
  if (!(this->startsize() <= 0 && this->startsize() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->startsize(), output);
  }

  // double EndSize = 6;
  if (!(this->endsize() <= 0 && this->endsize() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->endsize(), output);
  }

  // bytes Points = 7;
  if (this->points().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->points(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.CalibrationPointCloudMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* CalibrationPointCloudMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.CalibrationPointCloudMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CalibrationPointCloudMessage.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 Count = 2;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // .AR51.Color StartColor = 3;
  if (this->has_startcolor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::startcolor(this), target);
  }

  // .AR51.Color EndColor = 4;
  if (this->has_endcolor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::endcolor(this), target);
  }

  // double StartSize = 5;
  if (!(this->startsize() <= 0 && this->startsize() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->startsize(), target);
  }

  // double EndSize = 6;
  if (!(this->endsize() <= 0 && this->endsize() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->endsize(), target);
  }

  // bytes Points = 7;
  if (this->points().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->points(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.CalibrationPointCloudMessage)
  return target;
}

size_t CalibrationPointCloudMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.CalibrationPointCloudMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes Points = 7;
  if (this->points().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->points());
  }

  // .AR51.Color StartColor = 3;
  if (this->has_startcolor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *startcolor_);
  }

  // .AR51.Color EndColor = 4;
  if (this->has_endcolor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endcolor_);
  }

  // double StartSize = 5;
  if (!(this->startsize() <= 0 && this->startsize() >= 0)) {
    total_size += 1 + 8;
  }

  // double EndSize = 6;
  if (!(this->endsize() <= 0 && this->endsize() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 Count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibrationPointCloudMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.CalibrationPointCloudMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrationPointCloudMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalibrationPointCloudMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.CalibrationPointCloudMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.CalibrationPointCloudMessage)
    MergeFrom(*source);
  }
}

void CalibrationPointCloudMessage::MergeFrom(const CalibrationPointCloudMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.CalibrationPointCloudMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.points().size() > 0) {

    points_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.points_);
  }
  if (from.has_startcolor()) {
    mutable_startcolor()->::AR51::Color::MergeFrom(from.startcolor());
  }
  if (from.has_endcolor()) {
    mutable_endcolor()->::AR51::Color::MergeFrom(from.endcolor());
  }
  if (!(from.startsize() <= 0 && from.startsize() >= 0)) {
    set_startsize(from.startsize());
  }
  if (!(from.endsize() <= 0 && from.endsize() >= 0)) {
    set_endsize(from.endsize());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void CalibrationPointCloudMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.CalibrationPointCloudMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationPointCloudMessage::CopyFrom(const CalibrationPointCloudMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.CalibrationPointCloudMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationPointCloudMessage::IsInitialized() const {
  return true;
}

void CalibrationPointCloudMessage::Swap(CalibrationPointCloudMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalibrationPointCloudMessage::InternalSwap(CalibrationPointCloudMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  points_.Swap(&other->points_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(startcolor_, other->startcolor_);
  swap(endcolor_, other->endcolor_);
  swap(startsize_, other->startsize_);
  swap(endsize_, other->endsize_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalibrationPointCloudMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalibrationVisualizationMessage::InitAsDefaultInstance() {
}
class CalibrationVisualizationMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalibrationVisualizationMessage::kModeFieldNumber;
const int CalibrationVisualizationMessage::kProgressFieldNumber;
const int CalibrationVisualizationMessage::kQualityFieldNumber;
const int CalibrationVisualizationMessage::kReprojectionErrorFieldNumber;
const int CalibrationVisualizationMessage::kTitleFieldNumber;
const int CalibrationVisualizationMessage::kMessageFieldNumber;
const int CalibrationVisualizationMessage::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalibrationVisualizationMessage::CalibrationVisualizationMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.CalibrationVisualizationMessage)
}
CalibrationVisualizationMessage::CalibrationVisualizationMessage(const CalibrationVisualizationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:AR51.CalibrationVisualizationMessage)
}

void CalibrationVisualizationMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalibrationVisualizationMessage_cvs_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(mode_));
}

CalibrationVisualizationMessage::~CalibrationVisualizationMessage() {
  // @@protoc_insertion_point(destructor:AR51.CalibrationVisualizationMessage)
  SharedDtor();
}

void CalibrationVisualizationMessage::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CalibrationVisualizationMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibrationVisualizationMessage& CalibrationVisualizationMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalibrationVisualizationMessage_cvs_2eproto.base);
  return *internal_default_instance();
}


void CalibrationVisualizationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.CalibrationVisualizationMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(mode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalibrationVisualizationMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AR51.CalibrationModes Mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_mode(static_cast<::AR51::CalibrationModes>(val));
        } else goto handle_unusual;
        continue;
      // double Progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Quality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ReprojectionError = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          reprojectionerror_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string Title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_title(), ptr, ctx, "AR51.CalibrationVisualizationMessage.Title");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_message(), ptr, ctx, "AR51.CalibrationVisualizationMessage.Message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AR51.CalibrationPointCloudMessage Points = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalibrationVisualizationMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.CalibrationVisualizationMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AR51.CalibrationModes Mode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::AR51::CalibrationModes >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Progress = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Quality = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ReprojectionError = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reprojectionerror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Title = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.CalibrationVisualizationMessage.Title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Message = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.CalibrationVisualizationMessage.Message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AR51.CalibrationPointCloudMessage Points = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.CalibrationVisualizationMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.CalibrationVisualizationMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalibrationVisualizationMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.CalibrationVisualizationMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.CalibrationModes Mode = 1;
  if (this->mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // double Progress = 2;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->progress(), output);
  }

  // double Quality = 3;
  if (!(this->quality() <= 0 && this->quality() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->quality(), output);
  }

  // double ReprojectionError = 4;
  if (!(this->reprojectionerror() <= 0 && this->reprojectionerror() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->reprojectionerror(), output);
  }

  // string Title = 5;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CalibrationVisualizationMessage.Title");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // string Message = 6;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CalibrationVisualizationMessage.Message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->message(), output);
  }

  // repeated .AR51.CalibrationPointCloudMessage Points = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->points(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.CalibrationVisualizationMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* CalibrationVisualizationMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.CalibrationVisualizationMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AR51.CalibrationModes Mode = 1;
  if (this->mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // double Progress = 2;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->progress(), target);
  }

  // double Quality = 3;
  if (!(this->quality() <= 0 && this->quality() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->quality(), target);
  }

  // double ReprojectionError = 4;
  if (!(this->reprojectionerror() <= 0 && this->reprojectionerror() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->reprojectionerror(), target);
  }

  // string Title = 5;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CalibrationVisualizationMessage.Title");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // string Message = 6;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CalibrationVisualizationMessage.Message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->message(), target);
  }

  // repeated .AR51.CalibrationPointCloudMessage Points = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->points(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.CalibrationVisualizationMessage)
  return target;
}

size_t CalibrationVisualizationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.CalibrationVisualizationMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AR51.CalibrationPointCloudMessage Points = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // string Title = 5;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string Message = 6;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());
  }

  // double Progress = 2;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    total_size += 1 + 8;
  }

  // double Quality = 3;
  if (!(this->quality() <= 0 && this->quality() >= 0)) {
    total_size += 1 + 8;
  }

  // double ReprojectionError = 4;
  if (!(this->reprojectionerror() <= 0 && this->reprojectionerror() >= 0)) {
    total_size += 1 + 8;
  }

  // .AR51.CalibrationModes Mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibrationVisualizationMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.CalibrationVisualizationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrationVisualizationMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalibrationVisualizationMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.CalibrationVisualizationMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.CalibrationVisualizationMessage)
    MergeFrom(*source);
  }
}

void CalibrationVisualizationMessage::MergeFrom(const CalibrationVisualizationMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.CalibrationVisualizationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (!(from.progress() <= 0 && from.progress() >= 0)) {
    set_progress(from.progress());
  }
  if (!(from.quality() <= 0 && from.quality() >= 0)) {
    set_quality(from.quality());
  }
  if (!(from.reprojectionerror() <= 0 && from.reprojectionerror() >= 0)) {
    set_reprojectionerror(from.reprojectionerror());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void CalibrationVisualizationMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.CalibrationVisualizationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationVisualizationMessage::CopyFrom(const CalibrationVisualizationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.CalibrationVisualizationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationVisualizationMessage::IsInitialized() const {
  return true;
}

void CalibrationVisualizationMessage::Swap(CalibrationVisualizationMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalibrationVisualizationMessage::InternalSwap(CalibrationVisualizationMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(progress_, other->progress_);
  swap(quality_, other->quality_);
  swap(reprojectionerror_, other->reprojectionerror_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalibrationVisualizationMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetCvsCameraField::InitAsDefaultInstance() {
}
class SetCvsCameraField::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetCvsCameraField::kIdFieldNumber;
const int SetCvsCameraField::kFieldNameFieldNumber;
const int SetCvsCameraField::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetCvsCameraField::SetCvsCameraField()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.SetCvsCameraField)
}
SetCvsCameraField::SetCvsCameraField(const SetCvsCameraField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fieldname().size() > 0) {
    fieldname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fieldname_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:AR51.SetCvsCameraField)
}

void SetCvsCameraField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetCvsCameraField_cvs_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

SetCvsCameraField::~SetCvsCameraField() {
  // @@protoc_insertion_point(destructor:AR51.SetCvsCameraField)
  SharedDtor();
}

void SetCvsCameraField::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fieldname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetCvsCameraField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetCvsCameraField& SetCvsCameraField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetCvsCameraField_cvs_2eproto.base);
  return *internal_default_instance();
}


void SetCvsCameraField::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.SetCvsCameraField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fieldname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetCvsCameraField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "AR51.SetCvsCameraField.Id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FieldName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fieldname(), ptr, ctx, "AR51.SetCvsCameraField.FieldName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double Value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetCvsCameraField::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.SetCvsCameraField)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.SetCvsCameraField.Id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FieldName = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fieldname().data(), static_cast<int>(this->fieldname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.SetCvsCameraField.FieldName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.SetCvsCameraField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.SetCvsCameraField)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetCvsCameraField::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.SetCvsCameraField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetCvsCameraField.Id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string FieldName = 2;
  if (this->fieldname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fieldname().data(), static_cast<int>(this->fieldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetCvsCameraField.FieldName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fieldname(), output);
  }

  // double Value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.SetCvsCameraField)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCvsCameraField::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.SetCvsCameraField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetCvsCameraField.Id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string FieldName = 2;
  if (this->fieldname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fieldname().data(), static_cast<int>(this->fieldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.SetCvsCameraField.FieldName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->fieldname(), target);
  }

  // double Value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.SetCvsCameraField)
  return target;
}

size_t SetCvsCameraField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.SetCvsCameraField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string FieldName = 2;
  if (this->fieldname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fieldname());
  }

  // double Value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCvsCameraField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.SetCvsCameraField)
  GOOGLE_DCHECK_NE(&from, this);
  const SetCvsCameraField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetCvsCameraField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.SetCvsCameraField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.SetCvsCameraField)
    MergeFrom(*source);
  }
}

void SetCvsCameraField::MergeFrom(const SetCvsCameraField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.SetCvsCameraField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.fieldname().size() > 0) {

    fieldname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fieldname_);
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
}

void SetCvsCameraField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.SetCvsCameraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCvsCameraField::CopyFrom(const SetCvsCameraField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.SetCvsCameraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCvsCameraField::IsInitialized() const {
  return true;
}

void SetCvsCameraField::Swap(SetCvsCameraField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetCvsCameraField::InternalSwap(SetCvsCameraField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fieldname_.Swap(&other->fieldname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCvsCameraField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCvsCameraField::InitAsDefaultInstance() {
}
class GetCvsCameraField::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCvsCameraField::kIdFieldNumber;
const int GetCvsCameraField::kFieldNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCvsCameraField::GetCvsCameraField()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.GetCvsCameraField)
}
GetCvsCameraField::GetCvsCameraField(const GetCvsCameraField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fieldname().size() > 0) {
    fieldname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fieldname_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.GetCvsCameraField)
}

void GetCvsCameraField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCvsCameraField_cvs_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetCvsCameraField::~GetCvsCameraField() {
  // @@protoc_insertion_point(destructor:AR51.GetCvsCameraField)
  SharedDtor();
}

void GetCvsCameraField::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fieldname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCvsCameraField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCvsCameraField& GetCvsCameraField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCvsCameraField_cvs_2eproto.base);
  return *internal_default_instance();
}


void GetCvsCameraField::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.GetCvsCameraField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fieldname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCvsCameraField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "AR51.GetCvsCameraField.Id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FieldName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fieldname(), ptr, ctx, "AR51.GetCvsCameraField.FieldName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCvsCameraField::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.GetCvsCameraField)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.GetCvsCameraField.Id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FieldName = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fieldname().data(), static_cast<int>(this->fieldname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.GetCvsCameraField.FieldName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.GetCvsCameraField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.GetCvsCameraField)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCvsCameraField::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.GetCvsCameraField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GetCvsCameraField.Id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string FieldName = 2;
  if (this->fieldname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fieldname().data(), static_cast<int>(this->fieldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GetCvsCameraField.FieldName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fieldname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.GetCvsCameraField)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCvsCameraField::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.GetCvsCameraField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GetCvsCameraField.Id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string FieldName = 2;
  if (this->fieldname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fieldname().data(), static_cast<int>(this->fieldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.GetCvsCameraField.FieldName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->fieldname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.GetCvsCameraField)
  return target;
}

size_t GetCvsCameraField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.GetCvsCameraField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string FieldName = 2;
  if (this->fieldname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fieldname());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCvsCameraField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.GetCvsCameraField)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCvsCameraField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCvsCameraField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.GetCvsCameraField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.GetCvsCameraField)
    MergeFrom(*source);
  }
}

void GetCvsCameraField::MergeFrom(const GetCvsCameraField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.GetCvsCameraField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.fieldname().size() > 0) {

    fieldname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fieldname_);
  }
}

void GetCvsCameraField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.GetCvsCameraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCvsCameraField::CopyFrom(const GetCvsCameraField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.GetCvsCameraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCvsCameraField::IsInitialized() const {
  return true;
}

void GetCvsCameraField::Swap(GetCvsCameraField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCvsCameraField::InternalSwap(GetCvsCameraField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fieldname_.Swap(&other->fieldname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCvsCameraField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CvsCameraInfo::InitAsDefaultInstance() {
}
class CvsCameraInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CvsCameraInfo::kIdFieldNumber;
const int CvsCameraInfo::kIntrisicFieldNumber;
const int CvsCameraInfo::kExtrensicFieldNumber;
const int CvsCameraInfo::kWidthFieldNumber;
const int CvsCameraInfo::kHeightFieldNumber;
const int CvsCameraInfo::kFrameRateFieldNumber;
const int CvsCameraInfo::kIsConnectedFieldNumber;
const int CvsCameraInfo::kFieldsFieldNumber;
const int CvsCameraInfo::kIsRemoteFieldNumber;
const int CvsCameraInfo::kRemoteEndpointFieldNumber;
const int CvsCameraInfo::kCameraTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CvsCameraInfo::CvsCameraInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.CvsCameraInfo)
}
CvsCameraInfo::CvsCameraInfo(const CvsCameraInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  intrisic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.intrisic().size() > 0) {
    intrisic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intrisic_);
  }
  extrensic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.extrensic().size() > 0) {
    extrensic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extrensic_);
  }
  remoteendpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.remoteendpoint().size() > 0) {
    remoteendpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remoteendpoint_);
  }
  cameratype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cameratype().size() > 0) {
    cameratype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameratype_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&isremote_) -
    reinterpret_cast<char*>(&width_)) + sizeof(isremote_));
  // @@protoc_insertion_point(copy_constructor:AR51.CvsCameraInfo)
}

void CvsCameraInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CvsCameraInfo_cvs_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intrisic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extrensic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remoteendpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cameratype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isremote_) -
      reinterpret_cast<char*>(&width_)) + sizeof(isremote_));
}

CvsCameraInfo::~CvsCameraInfo() {
  // @@protoc_insertion_point(destructor:AR51.CvsCameraInfo)
  SharedDtor();
}

void CvsCameraInfo::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intrisic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extrensic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remoteendpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cameratype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CvsCameraInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CvsCameraInfo& CvsCameraInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CvsCameraInfo_cvs_2eproto.base);
  return *internal_default_instance();
}


void CvsCameraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.CvsCameraInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intrisic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extrensic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remoteendpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cameratype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isremote_) -
      reinterpret_cast<char*>(&width_)) + sizeof(isremote_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CvsCameraInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "AR51.CvsCameraInfo.Id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Intrisic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_intrisic(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Extrensic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_extrensic(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 FrameRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsConnected = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          isconnected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AR51.SetCvsCameraField Fields = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // bool IsRemote = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          isremote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string RemoteEndpoint = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_remoteendpoint(), ptr, ctx, "AR51.CvsCameraInfo.RemoteEndpoint");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CameraType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cameratype(), ptr, ctx, "AR51.CvsCameraInfo.CameraType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CvsCameraInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.CvsCameraInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.CvsCameraInfo.Id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Intrisic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_intrisic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Extrensic = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extrensic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Width = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Height = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FrameRate = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &framerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsConnected = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isconnected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AR51.SetCvsCameraField Fields = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsRemote = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isremote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string RemoteEndpoint = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_remoteendpoint()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->remoteendpoint().data(), static_cast<int>(this->remoteendpoint().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.CvsCameraInfo.RemoteEndpoint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CameraType = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cameratype()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cameratype().data(), static_cast<int>(this->cameratype().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.CvsCameraInfo.CameraType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.CvsCameraInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.CvsCameraInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CvsCameraInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.CvsCameraInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CvsCameraInfo.Id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // bytes Intrisic = 2;
  if (this->intrisic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->intrisic(), output);
  }

  // bytes Extrensic = 3;
  if (this->extrensic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->extrensic(), output);
  }

  // int32 Width = 4;
  if (this->width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // int32 Height = 5;
  if (this->height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // int32 FrameRate = 6;
  if (this->framerate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->framerate(), output);
  }

  // bool IsConnected = 7;
  if (this->isconnected() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->isconnected(), output);
  }

  // repeated .AR51.SetCvsCameraField Fields = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->fields(static_cast<int>(i)),
      output);
  }

  // bool IsRemote = 9;
  if (this->isremote() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->isremote(), output);
  }

  // string RemoteEndpoint = 10;
  if (this->remoteendpoint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remoteendpoint().data(), static_cast<int>(this->remoteendpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CvsCameraInfo.RemoteEndpoint");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->remoteendpoint(), output);
  }

  // string CameraType = 11;
  if (this->cameratype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cameratype().data(), static_cast<int>(this->cameratype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CvsCameraInfo.CameraType");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->cameratype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.CvsCameraInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* CvsCameraInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.CvsCameraInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CvsCameraInfo.Id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // bytes Intrisic = 2;
  if (this->intrisic().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->intrisic(), target);
  }

  // bytes Extrensic = 3;
  if (this->extrensic().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->extrensic(), target);
  }

  // int32 Width = 4;
  if (this->width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // int32 Height = 5;
  if (this->height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // int32 FrameRate = 6;
  if (this->framerate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->framerate(), target);
  }

  // bool IsConnected = 7;
  if (this->isconnected() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->isconnected(), target);
  }

  // repeated .AR51.SetCvsCameraField Fields = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->fields(static_cast<int>(i)), target);
  }

  // bool IsRemote = 9;
  if (this->isremote() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->isremote(), target);
  }

  // string RemoteEndpoint = 10;
  if (this->remoteendpoint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remoteendpoint().data(), static_cast<int>(this->remoteendpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CvsCameraInfo.RemoteEndpoint");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->remoteendpoint(), target);
  }

  // string CameraType = 11;
  if (this->cameratype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cameratype().data(), static_cast<int>(this->cameratype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CvsCameraInfo.CameraType");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->cameratype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.CvsCameraInfo)
  return target;
}

size_t CvsCameraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.CvsCameraInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AR51.SetCvsCameraField Fields = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->fields(static_cast<int>(i)));
    }
  }

  // string Id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // bytes Intrisic = 2;
  if (this->intrisic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->intrisic());
  }

  // bytes Extrensic = 3;
  if (this->extrensic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->extrensic());
  }

  // string RemoteEndpoint = 10;
  if (this->remoteendpoint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->remoteendpoint());
  }

  // string CameraType = 11;
  if (this->cameratype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cameratype());
  }

  // int32 Width = 4;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 Height = 5;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 FrameRate = 6;
  if (this->framerate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->framerate());
  }

  // bool IsConnected = 7;
  if (this->isconnected() != 0) {
    total_size += 1 + 1;
  }

  // bool IsRemote = 9;
  if (this->isremote() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CvsCameraInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.CvsCameraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CvsCameraInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CvsCameraInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.CvsCameraInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.CvsCameraInfo)
    MergeFrom(*source);
  }
}

void CvsCameraInfo::MergeFrom(const CvsCameraInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.CvsCameraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.intrisic().size() > 0) {

    intrisic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intrisic_);
  }
  if (from.extrensic().size() > 0) {

    extrensic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extrensic_);
  }
  if (from.remoteendpoint().size() > 0) {

    remoteendpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remoteendpoint_);
  }
  if (from.cameratype().size() > 0) {

    cameratype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameratype_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.framerate() != 0) {
    set_framerate(from.framerate());
  }
  if (from.isconnected() != 0) {
    set_isconnected(from.isconnected());
  }
  if (from.isremote() != 0) {
    set_isremote(from.isremote());
  }
}

void CvsCameraInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.CvsCameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CvsCameraInfo::CopyFrom(const CvsCameraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.CvsCameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CvsCameraInfo::IsInitialized() const {
  return true;
}

void CvsCameraInfo::Swap(CvsCameraInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CvsCameraInfo::InternalSwap(CvsCameraInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&fields_)->InternalSwap(CastToBase(&other->fields_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  intrisic_.Swap(&other->intrisic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extrensic_.Swap(&other->extrensic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remoteendpoint_.Swap(&other->remoteendpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cameratype_.Swap(&other->cameratype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(framerate_, other->framerate_);
  swap(isconnected_, other->isconnected_);
  swap(isremote_, other->isremote_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CvsCameraInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAvailableCamerasResponse::InitAsDefaultInstance() {
}
class GetAvailableCamerasResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAvailableCamerasResponse::kCameraInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAvailableCamerasResponse::GetAvailableCamerasResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.GetAvailableCamerasResponse)
}
GetAvailableCamerasResponse::GetAvailableCamerasResponse(const GetAvailableCamerasResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      camerainfos_(from.camerainfos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AR51.GetAvailableCamerasResponse)
}

void GetAvailableCamerasResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAvailableCamerasResponse_cvs_2eproto.base);
}

GetAvailableCamerasResponse::~GetAvailableCamerasResponse() {
  // @@protoc_insertion_point(destructor:AR51.GetAvailableCamerasResponse)
  SharedDtor();
}

void GetAvailableCamerasResponse::SharedDtor() {
}

void GetAvailableCamerasResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAvailableCamerasResponse& GetAvailableCamerasResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAvailableCamerasResponse_cvs_2eproto.base);
  return *internal_default_instance();
}


void GetAvailableCamerasResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.GetAvailableCamerasResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camerainfos_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAvailableCamerasResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .AR51.CvsCameraInfo CameraInfos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_camerainfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAvailableCamerasResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.GetAvailableCamerasResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AR51.CvsCameraInfo CameraInfos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_camerainfos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.GetAvailableCamerasResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.GetAvailableCamerasResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAvailableCamerasResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.GetAvailableCamerasResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AR51.CvsCameraInfo CameraInfos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camerainfos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->camerainfos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.GetAvailableCamerasResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAvailableCamerasResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.GetAvailableCamerasResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AR51.CvsCameraInfo CameraInfos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camerainfos_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->camerainfos(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.GetAvailableCamerasResponse)
  return target;
}

size_t GetAvailableCamerasResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.GetAvailableCamerasResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AR51.CvsCameraInfo CameraInfos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->camerainfos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->camerainfos(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAvailableCamerasResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.GetAvailableCamerasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAvailableCamerasResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAvailableCamerasResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.GetAvailableCamerasResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.GetAvailableCamerasResponse)
    MergeFrom(*source);
  }
}

void GetAvailableCamerasResponse::MergeFrom(const GetAvailableCamerasResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.GetAvailableCamerasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  camerainfos_.MergeFrom(from.camerainfos_);
}

void GetAvailableCamerasResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.GetAvailableCamerasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAvailableCamerasResponse::CopyFrom(const GetAvailableCamerasResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.GetAvailableCamerasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAvailableCamerasResponse::IsInitialized() const {
  return true;
}

void GetAvailableCamerasResponse::Swap(GetAvailableCamerasResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAvailableCamerasResponse::InternalSwap(GetAvailableCamerasResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&camerainfos_)->InternalSwap(CastToBase(&other->camerainfos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAvailableCamerasResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CvsCameraFeedRequest::InitAsDefaultInstance() {
}
class CvsCameraFeedRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CvsCameraFeedRequest::kCameraIdFieldNumber;
const int CvsCameraFeedRequest::kWidthFieldNumber;
const int CvsCameraFeedRequest::kHeightFieldNumber;
const int CvsCameraFeedRequest::kFrameRateFieldNumber;
const int CvsCameraFeedRequest::kJpgQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CvsCameraFeedRequest::CvsCameraFeedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.CvsCameraFeedRequest)
}
CvsCameraFeedRequest::CvsCameraFeedRequest(const CvsCameraFeedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cameraid().size() > 0) {
    cameraid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraid_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&jpgquality_) -
    reinterpret_cast<char*>(&width_)) + sizeof(jpgquality_));
  // @@protoc_insertion_point(copy_constructor:AR51.CvsCameraFeedRequest)
}

void CvsCameraFeedRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CvsCameraFeedRequest_cvs_2eproto.base);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jpgquality_) -
      reinterpret_cast<char*>(&width_)) + sizeof(jpgquality_));
}

CvsCameraFeedRequest::~CvsCameraFeedRequest() {
  // @@protoc_insertion_point(destructor:AR51.CvsCameraFeedRequest)
  SharedDtor();
}

void CvsCameraFeedRequest::SharedDtor() {
  cameraid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CvsCameraFeedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CvsCameraFeedRequest& CvsCameraFeedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CvsCameraFeedRequest_cvs_2eproto.base);
  return *internal_default_instance();
}


void CvsCameraFeedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.CvsCameraFeedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameraid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jpgquality_) -
      reinterpret_cast<char*>(&width_)) + sizeof(jpgquality_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CvsCameraFeedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string CameraId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cameraid(), ptr, ctx, "AR51.CvsCameraFeedRequest.CameraId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 FrameRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 JpgQuality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          jpgquality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CvsCameraFeedRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.CvsCameraFeedRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string CameraId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cameraid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cameraid().data(), static_cast<int>(this->cameraid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.CvsCameraFeedRequest.CameraId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Width = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Height = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FrameRate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &framerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 JpgQuality = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &jpgquality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.CvsCameraFeedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.CvsCameraFeedRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CvsCameraFeedRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.CvsCameraFeedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string CameraId = 1;
  if (this->cameraid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cameraid().data(), static_cast<int>(this->cameraid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CvsCameraFeedRequest.CameraId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cameraid(), output);
  }

  // int32 Width = 2;
  if (this->width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // int32 Height = 3;
  if (this->height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // int32 FrameRate = 4;
  if (this->framerate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->framerate(), output);
  }

  // int32 JpgQuality = 5;
  if (this->jpgquality() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->jpgquality(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.CvsCameraFeedRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CvsCameraFeedRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.CvsCameraFeedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string CameraId = 1;
  if (this->cameraid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cameraid().data(), static_cast<int>(this->cameraid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CvsCameraFeedRequest.CameraId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->cameraid(), target);
  }

  // int32 Width = 2;
  if (this->width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // int32 Height = 3;
  if (this->height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // int32 FrameRate = 4;
  if (this->framerate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->framerate(), target);
  }

  // int32 JpgQuality = 5;
  if (this->jpgquality() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->jpgquality(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.CvsCameraFeedRequest)
  return target;
}

size_t CvsCameraFeedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.CvsCameraFeedRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string CameraId = 1;
  if (this->cameraid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cameraid());
  }

  // int32 Width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 Height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 FrameRate = 4;
  if (this->framerate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->framerate());
  }

  // int32 JpgQuality = 5;
  if (this->jpgquality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->jpgquality());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CvsCameraFeedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.CvsCameraFeedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CvsCameraFeedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CvsCameraFeedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.CvsCameraFeedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.CvsCameraFeedRequest)
    MergeFrom(*source);
  }
}

void CvsCameraFeedRequest::MergeFrom(const CvsCameraFeedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.CvsCameraFeedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cameraid().size() > 0) {

    cameraid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraid_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.framerate() != 0) {
    set_framerate(from.framerate());
  }
  if (from.jpgquality() != 0) {
    set_jpgquality(from.jpgquality());
  }
}

void CvsCameraFeedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.CvsCameraFeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CvsCameraFeedRequest::CopyFrom(const CvsCameraFeedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.CvsCameraFeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CvsCameraFeedRequest::IsInitialized() const {
  return true;
}

void CvsCameraFeedRequest::Swap(CvsCameraFeedRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CvsCameraFeedRequest::InternalSwap(CvsCameraFeedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cameraid_.Swap(&other->cameraid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(framerate_, other->framerate_);
  swap(jpgquality_, other->jpgquality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CvsCameraFeedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CvsCameraGetRecordingReadyRequest::InitAsDefaultInstance() {
}
class CvsCameraGetRecordingReadyRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CvsCameraGetRecordingReadyRequest::kCameraIdFieldNumber;
const int CvsCameraGetRecordingReadyRequest::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CvsCameraGetRecordingReadyRequest::CvsCameraGetRecordingReadyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.CvsCameraGetRecordingReadyRequest)
}
CvsCameraGetRecordingReadyRequest::CvsCameraGetRecordingReadyRequest(const CvsCameraGetRecordingReadyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cameraid().size() > 0) {
    cameraid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraid_);
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.CvsCameraGetRecordingReadyRequest)
}

void CvsCameraGetRecordingReadyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CvsCameraGetRecordingReadyRequest_cvs_2eproto.base);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CvsCameraGetRecordingReadyRequest::~CvsCameraGetRecordingReadyRequest() {
  // @@protoc_insertion_point(destructor:AR51.CvsCameraGetRecordingReadyRequest)
  SharedDtor();
}

void CvsCameraGetRecordingReadyRequest::SharedDtor() {
  cameraid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CvsCameraGetRecordingReadyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CvsCameraGetRecordingReadyRequest& CvsCameraGetRecordingReadyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CvsCameraGetRecordingReadyRequest_cvs_2eproto.base);
  return *internal_default_instance();
}


void CvsCameraGetRecordingReadyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.CvsCameraGetRecordingReadyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameraid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CvsCameraGetRecordingReadyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string CameraId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cameraid(), ptr, ctx, "AR51.CvsCameraGetRecordingReadyRequest.CameraId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string FileName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_filename(), ptr, ctx, "AR51.CvsCameraGetRecordingReadyRequest.FileName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CvsCameraGetRecordingReadyRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.CvsCameraGetRecordingReadyRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string CameraId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cameraid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cameraid().data(), static_cast<int>(this->cameraid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.CvsCameraGetRecordingReadyRequest.CameraId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FileName = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.CvsCameraGetRecordingReadyRequest.FileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.CvsCameraGetRecordingReadyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.CvsCameraGetRecordingReadyRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CvsCameraGetRecordingReadyRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.CvsCameraGetRecordingReadyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string CameraId = 1;
  if (this->cameraid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cameraid().data(), static_cast<int>(this->cameraid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CvsCameraGetRecordingReadyRequest.CameraId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cameraid(), output);
  }

  // string FileName = 2;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CvsCameraGetRecordingReadyRequest.FileName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.CvsCameraGetRecordingReadyRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CvsCameraGetRecordingReadyRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.CvsCameraGetRecordingReadyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string CameraId = 1;
  if (this->cameraid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cameraid().data(), static_cast<int>(this->cameraid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CvsCameraGetRecordingReadyRequest.CameraId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->cameraid(), target);
  }

  // string FileName = 2;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CvsCameraGetRecordingReadyRequest.FileName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.CvsCameraGetRecordingReadyRequest)
  return target;
}

size_t CvsCameraGetRecordingReadyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.CvsCameraGetRecordingReadyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string CameraId = 1;
  if (this->cameraid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cameraid());
  }

  // string FileName = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->filename());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CvsCameraGetRecordingReadyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.CvsCameraGetRecordingReadyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CvsCameraGetRecordingReadyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CvsCameraGetRecordingReadyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.CvsCameraGetRecordingReadyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.CvsCameraGetRecordingReadyRequest)
    MergeFrom(*source);
  }
}

void CvsCameraGetRecordingReadyRequest::MergeFrom(const CvsCameraGetRecordingReadyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.CvsCameraGetRecordingReadyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cameraid().size() > 0) {

    cameraid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraid_);
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
}

void CvsCameraGetRecordingReadyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.CvsCameraGetRecordingReadyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CvsCameraGetRecordingReadyRequest::CopyFrom(const CvsCameraGetRecordingReadyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.CvsCameraGetRecordingReadyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CvsCameraGetRecordingReadyRequest::IsInitialized() const {
  return true;
}

void CvsCameraGetRecordingReadyRequest::Swap(CvsCameraGetRecordingReadyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CvsCameraGetRecordingReadyRequest::InternalSwap(CvsCameraGetRecordingReadyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cameraid_.Swap(&other->cameraid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CvsCameraGetRecordingReadyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CvsCameraIdRequest::InitAsDefaultInstance() {
}
class CvsCameraIdRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CvsCameraIdRequest::kCameraIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CvsCameraIdRequest::CvsCameraIdRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.CvsCameraIdRequest)
}
CvsCameraIdRequest::CvsCameraIdRequest(const CvsCameraIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cameraid().size() > 0) {
    cameraid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraid_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.CvsCameraIdRequest)
}

void CvsCameraIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CvsCameraIdRequest_cvs_2eproto.base);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CvsCameraIdRequest::~CvsCameraIdRequest() {
  // @@protoc_insertion_point(destructor:AR51.CvsCameraIdRequest)
  SharedDtor();
}

void CvsCameraIdRequest::SharedDtor() {
  cameraid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CvsCameraIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CvsCameraIdRequest& CvsCameraIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CvsCameraIdRequest_cvs_2eproto.base);
  return *internal_default_instance();
}


void CvsCameraIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.CvsCameraIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameraid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CvsCameraIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string CameraId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cameraid(), ptr, ctx, "AR51.CvsCameraIdRequest.CameraId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CvsCameraIdRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.CvsCameraIdRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string CameraId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cameraid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cameraid().data(), static_cast<int>(this->cameraid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.CvsCameraIdRequest.CameraId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.CvsCameraIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.CvsCameraIdRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CvsCameraIdRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.CvsCameraIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string CameraId = 1;
  if (this->cameraid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cameraid().data(), static_cast<int>(this->cameraid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CvsCameraIdRequest.CameraId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cameraid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.CvsCameraIdRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CvsCameraIdRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.CvsCameraIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string CameraId = 1;
  if (this->cameraid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cameraid().data(), static_cast<int>(this->cameraid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.CvsCameraIdRequest.CameraId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->cameraid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.CvsCameraIdRequest)
  return target;
}

size_t CvsCameraIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.CvsCameraIdRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string CameraId = 1;
  if (this->cameraid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cameraid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CvsCameraIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.CvsCameraIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CvsCameraIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CvsCameraIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.CvsCameraIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.CvsCameraIdRequest)
    MergeFrom(*source);
  }
}

void CvsCameraIdRequest::MergeFrom(const CvsCameraIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.CvsCameraIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cameraid().size() > 0) {

    cameraid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraid_);
  }
}

void CvsCameraIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.CvsCameraIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CvsCameraIdRequest::CopyFrom(const CvsCameraIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.CvsCameraIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CvsCameraIdRequest::IsInitialized() const {
  return true;
}

void CvsCameraIdRequest::Swap(CvsCameraIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CvsCameraIdRequest::InternalSwap(CvsCameraIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cameraid_.Swap(&other->cameraid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CvsCameraIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CvsCameraFeedResponse::InitAsDefaultInstance() {
}
class CvsCameraFeedResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CvsCameraFeedResponse::kJpgFieldNumber;
const int CvsCameraFeedResponse::kActualFPSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CvsCameraFeedResponse::CvsCameraFeedResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.CvsCameraFeedResponse)
}
CvsCameraFeedResponse::CvsCameraFeedResponse(const CvsCameraFeedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  jpg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.jpg().size() > 0) {
    jpg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jpg_);
  }
  actualfps_ = from.actualfps_;
  // @@protoc_insertion_point(copy_constructor:AR51.CvsCameraFeedResponse)
}

void CvsCameraFeedResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CvsCameraFeedResponse_cvs_2eproto.base);
  jpg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actualfps_ = 0;
}

CvsCameraFeedResponse::~CvsCameraFeedResponse() {
  // @@protoc_insertion_point(destructor:AR51.CvsCameraFeedResponse)
  SharedDtor();
}

void CvsCameraFeedResponse::SharedDtor() {
  jpg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CvsCameraFeedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CvsCameraFeedResponse& CvsCameraFeedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CvsCameraFeedResponse_cvs_2eproto.base);
  return *internal_default_instance();
}


void CvsCameraFeedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.CvsCameraFeedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jpg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actualfps_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CvsCameraFeedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes Jpg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_jpg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float ActualFPS = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          actualfps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CvsCameraFeedResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.CvsCameraFeedResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes Jpg = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jpg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ActualFPS = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &actualfps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.CvsCameraFeedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.CvsCameraFeedResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CvsCameraFeedResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.CvsCameraFeedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Jpg = 1;
  if (this->jpg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->jpg(), output);
  }

  // float ActualFPS = 2;
  if (!(this->actualfps() <= 0 && this->actualfps() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->actualfps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.CvsCameraFeedResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CvsCameraFeedResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.CvsCameraFeedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Jpg = 1;
  if (this->jpg().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->jpg(), target);
  }

  // float ActualFPS = 2;
  if (!(this->actualfps() <= 0 && this->actualfps() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->actualfps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.CvsCameraFeedResponse)
  return target;
}

size_t CvsCameraFeedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.CvsCameraFeedResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Jpg = 1;
  if (this->jpg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->jpg());
  }

  // float ActualFPS = 2;
  if (!(this->actualfps() <= 0 && this->actualfps() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CvsCameraFeedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.CvsCameraFeedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CvsCameraFeedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CvsCameraFeedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.CvsCameraFeedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.CvsCameraFeedResponse)
    MergeFrom(*source);
  }
}

void CvsCameraFeedResponse::MergeFrom(const CvsCameraFeedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.CvsCameraFeedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.jpg().size() > 0) {

    jpg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jpg_);
  }
  if (!(from.actualfps() <= 0 && from.actualfps() >= 0)) {
    set_actualfps(from.actualfps());
  }
}

void CvsCameraFeedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.CvsCameraFeedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CvsCameraFeedResponse::CopyFrom(const CvsCameraFeedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.CvsCameraFeedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CvsCameraFeedResponse::IsInitialized() const {
  return true;
}

void CvsCameraFeedResponse::Swap(CvsCameraFeedResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CvsCameraFeedResponse::InternalSwap(CvsCameraFeedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jpg_.Swap(&other->jpg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(actualfps_, other->actualfps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CvsCameraFeedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarkerInfo::InitAsDefaultInstance() {
  ::AR51::_MarkerInfo_default_instance_._instance.get_mutable()->position_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
}
class MarkerInfo::HasBitSetters {
 public:
  static const ::AR51::Vector3& position(const MarkerInfo* msg);
};

const ::AR51::Vector3&
MarkerInfo::HasBitSetters::position(const MarkerInfo* msg) {
  return *msg->position_;
}
void MarkerInfo::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkerInfo::kTypeFieldNumber;
const int MarkerInfo::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkerInfo::MarkerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.MarkerInfo)
}
MarkerInfo::MarkerInfo(const MarkerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_position()) {
    position_ = new ::AR51::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AR51.MarkerInfo)
}

void MarkerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarkerInfo_cvs_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_ = nullptr;
}

MarkerInfo::~MarkerInfo() {
  // @@protoc_insertion_point(destructor:AR51.MarkerInfo)
  SharedDtor();
}

void MarkerInfo::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
}

void MarkerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarkerInfo& MarkerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarkerInfo_cvs_2eproto.base);
  return *internal_default_instance();
}


void MarkerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.MarkerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarkerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_type(), ptr, ctx, "AR51.MarkerInfo.Type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector3 Position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarkerInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.MarkerInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.MarkerInfo.Type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector3 Position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.MarkerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.MarkerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarkerInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.MarkerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.MarkerInfo.Type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // .AR51.Vector3 Position = 2;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::position(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.MarkerInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* MarkerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.MarkerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.MarkerInfo.Type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // .AR51.Vector3 Position = 2;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::position(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.MarkerInfo)
  return target;
}

size_t MarkerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.MarkerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->type());
  }

  // .AR51.Vector3 Position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarkerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.MarkerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarkerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.MarkerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.MarkerInfo)
    MergeFrom(*source);
  }
}

void MarkerInfo::MergeFrom(const MarkerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.MarkerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_position()) {
    mutable_position()->::AR51::Vector3::MergeFrom(from.position());
  }
}

void MarkerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.MarkerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkerInfo::CopyFrom(const MarkerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.MarkerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkerInfo::IsInitialized() const {
  return true;
}

void MarkerInfo::Swap(MarkerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkerInfo::InternalSwap(MarkerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarkerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackedObjectInfo::InitAsDefaultInstance() {
}
class TrackedObjectInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackedObjectInfo::kNameFieldNumber;
const int TrackedObjectInfo::kMarkersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackedObjectInfo::TrackedObjectInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.TrackedObjectInfo)
}
TrackedObjectInfo::TrackedObjectInfo(const TrackedObjectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      markers_(from.markers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:AR51.TrackedObjectInfo)
}

void TrackedObjectInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackedObjectInfo_cvs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TrackedObjectInfo::~TrackedObjectInfo() {
  // @@protoc_insertion_point(destructor:AR51.TrackedObjectInfo)
  SharedDtor();
}

void TrackedObjectInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrackedObjectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackedObjectInfo& TrackedObjectInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackedObjectInfo_cvs_2eproto.base);
  return *internal_default_instance();
}


void TrackedObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.TrackedObjectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markers_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackedObjectInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "AR51.TrackedObjectInfo.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AR51.MarkerInfo Markers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_markers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackedObjectInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.TrackedObjectInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.TrackedObjectInfo.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AR51.MarkerInfo Markers = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_markers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.TrackedObjectInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.TrackedObjectInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackedObjectInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.TrackedObjectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.TrackedObjectInfo.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .AR51.MarkerInfo Markers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->markers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->markers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.TrackedObjectInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackedObjectInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.TrackedObjectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.TrackedObjectInfo.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .AR51.MarkerInfo Markers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->markers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->markers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.TrackedObjectInfo)
  return target;
}

size_t TrackedObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.TrackedObjectInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AR51.MarkerInfo Markers = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->markers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->markers(static_cast<int>(i)));
    }
  }

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackedObjectInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.TrackedObjectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackedObjectInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackedObjectInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.TrackedObjectInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.TrackedObjectInfo)
    MergeFrom(*source);
  }
}

void TrackedObjectInfo::MergeFrom(const TrackedObjectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.TrackedObjectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markers_.MergeFrom(from.markers_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void TrackedObjectInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.TrackedObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedObjectInfo::CopyFrom(const TrackedObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.TrackedObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedObjectInfo::IsInitialized() const {
  return true;
}

void TrackedObjectInfo::Swap(TrackedObjectInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackedObjectInfo::InternalSwap(TrackedObjectInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&markers_)->InternalSwap(CastToBase(&other->markers_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedObjectInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackedMarker::InitAsDefaultInstance() {
  ::AR51::_TrackedMarker_default_instance_._instance.get_mutable()->position_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
}
class TrackedMarker::HasBitSetters {
 public:
  static const ::AR51::Vector3& position(const TrackedMarker* msg);
};

const ::AR51::Vector3&
TrackedMarker::HasBitSetters::position(const TrackedMarker* msg) {
  return *msg->position_;
}
void TrackedMarker::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void TrackedMarker::clear_rays() {
  rays_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackedMarker::kIdFieldNumber;
const int TrackedMarker::kTypeFieldNumber;
const int TrackedMarker::kPositionFieldNumber;
const int TrackedMarker::kRadiusFieldNumber;
const int TrackedMarker::kRaysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackedMarker::TrackedMarker()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.TrackedMarker)
}
TrackedMarker::TrackedMarker(const TrackedMarker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rays_(from.rays_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_position()) {
    position_ = new ::AR51::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:AR51.TrackedMarker)
}

void TrackedMarker::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackedMarker_cvs_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&position_)) + sizeof(radius_));
}

TrackedMarker::~TrackedMarker() {
  // @@protoc_insertion_point(destructor:AR51.TrackedMarker)
  SharedDtor();
}

void TrackedMarker::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
}

void TrackedMarker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackedMarker& TrackedMarker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackedMarker_cvs_2eproto.base);
  return *internal_default_instance();
}


void TrackedMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.TrackedMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rays_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  radius_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackedMarker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "AR51.TrackedMarker.Id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_type(), ptr, ctx, "AR51.TrackedMarker.Type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector3 Position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Radius = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .AR51.Vector3 Rays = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_rays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackedMarker::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.TrackedMarker)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.TrackedMarker.Id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.TrackedMarker.Type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector3 Position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Radius = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AR51.Vector3 Rays = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_rays()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.TrackedMarker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.TrackedMarker)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackedMarker::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.TrackedMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.TrackedMarker.Id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string Type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.TrackedMarker.Type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // .AR51.Vector3 Position = 3;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::position(this), output);
  }

  // float Radius = 4;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->radius(), output);
  }

  // repeated .AR51.Vector3 Rays = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rays_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->rays(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.TrackedMarker)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackedMarker::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.TrackedMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.TrackedMarker.Id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string Type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.TrackedMarker.Type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // .AR51.Vector3 Position = 3;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::position(this), target);
  }

  // float Radius = 4;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->radius(), target);
  }

  // repeated .AR51.Vector3 Rays = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rays_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->rays(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.TrackedMarker)
  return target;
}

size_t TrackedMarker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.TrackedMarker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AR51.Vector3 Rays = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->rays_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->rays(static_cast<int>(i)));
    }
  }

  // string Id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string Type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->type());
  }

  // .AR51.Vector3 Position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // float Radius = 4;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackedMarker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.TrackedMarker)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackedMarker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackedMarker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.TrackedMarker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.TrackedMarker)
    MergeFrom(*source);
  }
}

void TrackedMarker::MergeFrom(const TrackedMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.TrackedMarker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rays_.MergeFrom(from.rays_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_position()) {
    mutable_position()->::AR51::Vector3::MergeFrom(from.position());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    set_radius(from.radius());
  }
}

void TrackedMarker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.TrackedMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedMarker::CopyFrom(const TrackedMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.TrackedMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedMarker::IsInitialized() const {
  return true;
}

void TrackedMarker::Swap(TrackedMarker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackedMarker::InternalSwap(TrackedMarker* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&rays_)->InternalSwap(CastToBase(&other->rays_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(radius_, other->radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedMarker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackedObject::InitAsDefaultInstance() {
  ::AR51::_TrackedObject_default_instance_._instance.get_mutable()->position_ = const_cast< ::AR51::Vector3*>(
      ::AR51::Vector3::internal_default_instance());
  ::AR51::_TrackedObject_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::AR51::Quaternion*>(
      ::AR51::Quaternion::internal_default_instance());
}
class TrackedObject::HasBitSetters {
 public:
  static const ::AR51::Vector3& position(const TrackedObject* msg);
  static const ::AR51::Quaternion& rotation(const TrackedObject* msg);
};

const ::AR51::Vector3&
TrackedObject::HasBitSetters::position(const TrackedObject* msg) {
  return *msg->position_;
}
const ::AR51::Quaternion&
TrackedObject::HasBitSetters::rotation(const TrackedObject* msg) {
  return *msg->rotation_;
}
void TrackedObject::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void TrackedObject::clear_rotation() {
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackedObject::kIdFieldNumber;
const int TrackedObject::kNameFieldNumber;
const int TrackedObject::kPositionFieldNumber;
const int TrackedObject::kRotationFieldNumber;
const int TrackedObject::kMarkerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackedObject::TrackedObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.TrackedObject)
}
TrackedObject::TrackedObject(const TrackedObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      markerids_(from.markerids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_position()) {
    position_ = new ::AR51::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_rotation()) {
    rotation_ = new ::AR51::Quaternion(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AR51.TrackedObject)
}

void TrackedObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackedObject_cvs_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&position_)) + sizeof(rotation_));
}

TrackedObject::~TrackedObject() {
  // @@protoc_insertion_point(destructor:AR51.TrackedObject)
  SharedDtor();
}

void TrackedObject::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
}

void TrackedObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackedObject& TrackedObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackedObject_cvs_2eproto.base);
  return *internal_default_instance();
}


void TrackedObject::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.TrackedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markerids_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackedObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "AR51.TrackedObject.Id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "AR51.TrackedObject.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Vector3 Position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AR51.Quaternion Rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string MarkerIds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_markerids(), ptr, ctx, "AR51.TrackedObject.MarkerIds");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackedObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.TrackedObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.TrackedObject.Id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.TrackedObject.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Vector3 Position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AR51.Quaternion Rotation = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string MarkerIds = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_markerids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->markerids(this->markerids_size() - 1).data(),
            static_cast<int>(this->markerids(this->markerids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.TrackedObject.MarkerIds"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.TrackedObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.TrackedObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackedObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.TrackedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.TrackedObject.Id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.TrackedObject.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .AR51.Vector3 Position = 3;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::position(this), output);
  }

  // .AR51.Quaternion Rotation = 4;
  if (this->has_rotation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::rotation(this), output);
  }

  // repeated string MarkerIds = 5;
  for (int i = 0, n = this->markerids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->markerids(i).data(), static_cast<int>(this->markerids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.TrackedObject.MarkerIds");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->markerids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.TrackedObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackedObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.TrackedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.TrackedObject.Id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.TrackedObject.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .AR51.Vector3 Position = 3;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::position(this), target);
  }

  // .AR51.Quaternion Rotation = 4;
  if (this->has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::rotation(this), target);
  }

  // repeated string MarkerIds = 5;
  for (int i = 0, n = this->markerids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->markerids(i).data(), static_cast<int>(this->markerids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.TrackedObject.MarkerIds");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(5, this->markerids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.TrackedObject)
  return target;
}

size_t TrackedObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.TrackedObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string MarkerIds = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->markerids_size());
  for (int i = 0, n = this->markerids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->markerids(i));
  }

  // string Id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .AR51.Vector3 Position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .AR51.Quaternion Rotation = 4;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackedObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.TrackedObject)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackedObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackedObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.TrackedObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.TrackedObject)
    MergeFrom(*source);
  }
}

void TrackedObject::MergeFrom(const TrackedObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.TrackedObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markerids_.MergeFrom(from.markerids_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_position()) {
    mutable_position()->::AR51::Vector3::MergeFrom(from.position());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::AR51::Quaternion::MergeFrom(from.rotation());
  }
}

void TrackedObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.TrackedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedObject::CopyFrom(const TrackedObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.TrackedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedObject::IsInitialized() const {
  return true;
}

void TrackedObject::Swap(TrackedObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackedObject::InternalSwap(TrackedObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  markerids_.InternalSwap(CastToBase(&other->markerids_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(rotation_, other->rotation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectDetectionReply::InitAsDefaultInstance() {
}
class ObjectDetectionReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDetectionReply::kMarkersFieldNumber;
const int ObjectDetectionReply::kItemsFieldNumber;
const int ObjectDetectionReply::kCamerasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDetectionReply::ObjectDetectionReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AR51.ObjectDetectionReply)
}
ObjectDetectionReply::ObjectDetectionReply(const ObjectDetectionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      markers_(from.markers_),
      items_(from.items_),
      cameras_(from.cameras_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AR51.ObjectDetectionReply)
}

void ObjectDetectionReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectDetectionReply_cvs_2eproto.base);
}

ObjectDetectionReply::~ObjectDetectionReply() {
  // @@protoc_insertion_point(destructor:AR51.ObjectDetectionReply)
  SharedDtor();
}

void ObjectDetectionReply::SharedDtor() {
}

void ObjectDetectionReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectDetectionReply& ObjectDetectionReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectDetectionReply_cvs_2eproto.base);
  return *internal_default_instance();
}


void ObjectDetectionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:AR51.ObjectDetectionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markers_.Clear();
  items_.Clear();
  cameras_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectDetectionReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .AR51.TrackedMarker Markers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_markers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .AR51.TrackedObject Items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated string Cameras = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_cameras(), ptr, ctx, "AR51.ObjectDetectionReply.Cameras");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectDetectionReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AR51.ObjectDetectionReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AR51.TrackedMarker Markers = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_markers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AR51.TrackedObject Items = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string Cameras = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_cameras()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cameras(this->cameras_size() - 1).data(),
            static_cast<int>(this->cameras(this->cameras_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AR51.ObjectDetectionReply.Cameras"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AR51.ObjectDetectionReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AR51.ObjectDetectionReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectDetectionReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AR51.ObjectDetectionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AR51.TrackedMarker Markers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->markers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->markers(static_cast<int>(i)),
      output);
  }

  // repeated .AR51.TrackedObject Items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->items(static_cast<int>(i)),
      output);
  }

  // repeated string Cameras = 3;
  for (int i = 0, n = this->cameras_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cameras(i).data(), static_cast<int>(this->cameras(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.ObjectDetectionReply.Cameras");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->cameras(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AR51.ObjectDetectionReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectDetectionReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AR51.ObjectDetectionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AR51.TrackedMarker Markers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->markers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->markers(static_cast<int>(i)), target);
  }

  // repeated .AR51.TrackedObject Items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->items(static_cast<int>(i)), target);
  }

  // repeated string Cameras = 3;
  for (int i = 0, n = this->cameras_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cameras(i).data(), static_cast<int>(this->cameras(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AR51.ObjectDetectionReply.Cameras");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->cameras(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AR51.ObjectDetectionReply)
  return target;
}

size_t ObjectDetectionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AR51.ObjectDetectionReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AR51.TrackedMarker Markers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->markers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->markers(static_cast<int>(i)));
    }
  }

  // repeated .AR51.TrackedObject Items = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  // repeated string Cameras = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->cameras_size());
  for (int i = 0, n = this->cameras_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->cameras(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDetectionReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AR51.ObjectDetectionReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDetectionReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectDetectionReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AR51.ObjectDetectionReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AR51.ObjectDetectionReply)
    MergeFrom(*source);
  }
}

void ObjectDetectionReply::MergeFrom(const ObjectDetectionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AR51.ObjectDetectionReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markers_.MergeFrom(from.markers_);
  items_.MergeFrom(from.items_);
  cameras_.MergeFrom(from.cameras_);
}

void ObjectDetectionReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AR51.ObjectDetectionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDetectionReply::CopyFrom(const ObjectDetectionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AR51.ObjectDetectionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDetectionReply::IsInitialized() const {
  return true;
}

void ObjectDetectionReply::Swap(ObjectDetectionReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDetectionReply::InternalSwap(ObjectDetectionReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&markers_)->InternalSwap(CastToBase(&other->markers_));
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  cameras_.InternalSwap(CastToBase(&other->cameras_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDetectionReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AR51
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AR51::HelloRequest* Arena::CreateMaybeMessage< ::AR51::HelloRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::HelloRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::HelloReply* Arena::CreateMaybeMessage< ::AR51::HelloReply >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::HelloReply >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::HandsInfoRequest* Arena::CreateMaybeMessage< ::AR51::HandsInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::HandsInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::ControllerInfoRequest* Arena::CreateMaybeMessage< ::AR51::ControllerInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::ControllerInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::MultiControllerInfoRequest* Arena::CreateMaybeMessage< ::AR51::MultiControllerInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::MultiControllerInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::SkeletonReply* Arena::CreateMaybeMessage< ::AR51::SkeletonReply >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::SkeletonReply >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::BoundInfo* Arena::CreateMaybeMessage< ::AR51::BoundInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::BoundInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::DeviceInfo* Arena::CreateMaybeMessage< ::AR51::DeviceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::CalibrationStatus* Arena::CreateMaybeMessage< ::AR51::CalibrationStatus >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::CalibrationStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::CalibrationPointCloudMessage* Arena::CreateMaybeMessage< ::AR51::CalibrationPointCloudMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::CalibrationPointCloudMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::CalibrationVisualizationMessage* Arena::CreateMaybeMessage< ::AR51::CalibrationVisualizationMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::CalibrationVisualizationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::SetCvsCameraField* Arena::CreateMaybeMessage< ::AR51::SetCvsCameraField >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::SetCvsCameraField >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::GetCvsCameraField* Arena::CreateMaybeMessage< ::AR51::GetCvsCameraField >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::GetCvsCameraField >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::CvsCameraInfo* Arena::CreateMaybeMessage< ::AR51::CvsCameraInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::CvsCameraInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::GetAvailableCamerasResponse* Arena::CreateMaybeMessage< ::AR51::GetAvailableCamerasResponse >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::GetAvailableCamerasResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::CvsCameraFeedRequest* Arena::CreateMaybeMessage< ::AR51::CvsCameraFeedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::CvsCameraFeedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::CvsCameraGetRecordingReadyRequest* Arena::CreateMaybeMessage< ::AR51::CvsCameraGetRecordingReadyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::CvsCameraGetRecordingReadyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::CvsCameraIdRequest* Arena::CreateMaybeMessage< ::AR51::CvsCameraIdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::CvsCameraIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::CvsCameraFeedResponse* Arena::CreateMaybeMessage< ::AR51::CvsCameraFeedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::CvsCameraFeedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::MarkerInfo* Arena::CreateMaybeMessage< ::AR51::MarkerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::MarkerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::TrackedObjectInfo* Arena::CreateMaybeMessage< ::AR51::TrackedObjectInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::TrackedObjectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::TrackedMarker* Arena::CreateMaybeMessage< ::AR51::TrackedMarker >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::TrackedMarker >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::TrackedObject* Arena::CreateMaybeMessage< ::AR51::TrackedObject >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::TrackedObject >(arena);
}
template<> PROTOBUF_NOINLINE ::AR51::ObjectDetectionReply* Arena::CreateMaybeMessage< ::AR51::ObjectDetectionReply >(Arena* arena) {
  return Arena::CreateInternal< ::AR51::ObjectDetectionReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
