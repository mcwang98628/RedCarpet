// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: registrationService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_registrationService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_registrationService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "AR51.Core.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_registrationService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_registrationService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_registrationService_2eproto;
namespace AR51 {
class ComponentDescriptor;
class ComponentDescriptorDefaultTypeInternal;
extern ComponentDescriptorDefaultTypeInternal _ComponentDescriptor_default_instance_;
class ComponentList;
class ComponentListDefaultTypeInternal;
extern ComponentListDefaultTypeInternal _ComponentList_default_instance_;
class ComponentsChanged;
class ComponentsChangedDefaultTypeInternal;
extern ComponentsChangedDefaultTypeInternal _ComponentsChanged_default_instance_;
class IsAliveQuery;
class IsAliveQueryDefaultTypeInternal;
extern IsAliveQueryDefaultTypeInternal _IsAliveQuery_default_instance_;
}  // namespace AR51
PROTOBUF_NAMESPACE_OPEN
template<> ::AR51::ComponentDescriptor* Arena::CreateMaybeMessage<::AR51::ComponentDescriptor>(Arena*);
template<> ::AR51::ComponentList* Arena::CreateMaybeMessage<::AR51::ComponentList>(Arena*);
template<> ::AR51::ComponentsChanged* Arena::CreateMaybeMessage<::AR51::ComponentsChanged>(Arena*);
template<> ::AR51::IsAliveQuery* Arena::CreateMaybeMessage<::AR51::IsAliveQuery>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AR51 {

enum ComponentType : int {
  OMSComponent = 0,
  CVSComponent = 1,
  DGSComponent = 2,
  DeviceComponent = 3,
  CVSCameraComponent = 4,
  CVSCalibrationComponent = 5,
  ComponentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ComponentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ComponentType_IsValid(int value);
constexpr ComponentType ComponentType_MIN = OMSComponent;
constexpr ComponentType ComponentType_MAX = CVSCalibrationComponent;
constexpr int ComponentType_ARRAYSIZE = ComponentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComponentType_descriptor();
template<typename T>
inline const std::string& ComponentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComponentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComponentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComponentType_descriptor(), enum_t_value);
}
inline bool ComponentType_Parse(
    const std::string& name, ComponentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComponentType>(
    ComponentType_descriptor(), name, value);
}
enum ComponentChangedType : int {
  ComponentCurrentState = 0,
  ComponentAdded = 1,
  ComponentRemoved = 2,
  ComponentChangedType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ComponentChangedType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ComponentChangedType_IsValid(int value);
constexpr ComponentChangedType ComponentChangedType_MIN = ComponentCurrentState;
constexpr ComponentChangedType ComponentChangedType_MAX = ComponentRemoved;
constexpr int ComponentChangedType_ARRAYSIZE = ComponentChangedType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComponentChangedType_descriptor();
template<typename T>
inline const std::string& ComponentChangedType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComponentChangedType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComponentChangedType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComponentChangedType_descriptor(), enum_t_value);
}
inline bool ComponentChangedType_Parse(
    const std::string& name, ComponentChangedType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComponentChangedType>(
    ComponentChangedType_descriptor(), name, value);
}
// ===================================================================

class ComponentDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.ComponentDescriptor) */ {
 public:
  ComponentDescriptor();
  virtual ~ComponentDescriptor();

  ComponentDescriptor(const ComponentDescriptor& from);
  ComponentDescriptor(ComponentDescriptor&& from) noexcept
    : ComponentDescriptor() {
    *this = ::std::move(from);
  }

  inline ComponentDescriptor& operator=(const ComponentDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentDescriptor& operator=(ComponentDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComponentDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComponentDescriptor* internal_default_instance() {
    return reinterpret_cast<const ComponentDescriptor*>(
               &_ComponentDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ComponentDescriptor* other);
  friend void swap(ComponentDescriptor& a, ComponentDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComponentDescriptor* New() const final {
    return CreateMaybeMessage<ComponentDescriptor>(nullptr);
  }

  ComponentDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComponentDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComponentDescriptor& from);
  void MergeFrom(const ComponentDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.ComponentDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_registrationService_2eproto);
    return ::descriptor_table_registrationService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Services = 7;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 7;
  const std::string& services(int index) const;
  std::string* mutable_services(int index);
  void set_services(int index, const std::string& value);
  void set_services(int index, std::string&& value);
  void set_services(int index, const char* value);
  void set_services(int index, const char* value, size_t size);
  std::string* add_services();
  void add_services(const std::string& value);
  void add_services(std::string&& value);
  void add_services(const char* value);
  void add_services(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& services() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_services();

  // string Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string Ip = 3;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // string MacAddress = 9;
  void clear_macaddress();
  static const int kMacAddressFieldNumber = 9;
  const std::string& macaddress() const;
  void set_macaddress(const std::string& value);
  void set_macaddress(std::string&& value);
  void set_macaddress(const char* value);
  void set_macaddress(const char* value, size_t size);
  std::string* mutable_macaddress();
  std::string* release_macaddress();
  void set_allocated_macaddress(std::string* macaddress);

  // int32 Port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .AR51.ComponentType Type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::AR51::ComponentType type() const;
  void set_type(::AR51::ComponentType value);

  // .AR51.PlatformType Platform = 6;
  void clear_platform();
  static const int kPlatformFieldNumber = 6;
  ::AR51::PlatformType platform() const;
  void set_platform(::AR51::PlatformType value);

  // float BatteryLevel = 8;
  void clear_batterylevel();
  static const int kBatteryLevelFieldNumber = 8;
  float batterylevel() const;
  void set_batterylevel(float value);

  // @@protoc_insertion_point(class_scope:AR51.ComponentDescriptor)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> services_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr macaddress_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  int type_;
  int platform_;
  float batterylevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_registrationService_2eproto;
};
// -------------------------------------------------------------------

class IsAliveQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.IsAliveQuery) */ {
 public:
  IsAliveQuery();
  virtual ~IsAliveQuery();

  IsAliveQuery(const IsAliveQuery& from);
  IsAliveQuery(IsAliveQuery&& from) noexcept
    : IsAliveQuery() {
    *this = ::std::move(from);
  }

  inline IsAliveQuery& operator=(const IsAliveQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsAliveQuery& operator=(IsAliveQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsAliveQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsAliveQuery* internal_default_instance() {
    return reinterpret_cast<const IsAliveQuery*>(
               &_IsAliveQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IsAliveQuery* other);
  friend void swap(IsAliveQuery& a, IsAliveQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IsAliveQuery* New() const final {
    return CreateMaybeMessage<IsAliveQuery>(nullptr);
  }

  IsAliveQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsAliveQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsAliveQuery& from);
  void MergeFrom(const IsAliveQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsAliveQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.IsAliveQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_registrationService_2eproto);
    return ::descriptor_table_registrationService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AR51.IsAliveQuery)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_registrationService_2eproto;
};
// -------------------------------------------------------------------

class ComponentsChanged :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.ComponentsChanged) */ {
 public:
  ComponentsChanged();
  virtual ~ComponentsChanged();

  ComponentsChanged(const ComponentsChanged& from);
  ComponentsChanged(ComponentsChanged&& from) noexcept
    : ComponentsChanged() {
    *this = ::std::move(from);
  }

  inline ComponentsChanged& operator=(const ComponentsChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentsChanged& operator=(ComponentsChanged&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComponentsChanged& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComponentsChanged* internal_default_instance() {
    return reinterpret_cast<const ComponentsChanged*>(
               &_ComponentsChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ComponentsChanged* other);
  friend void swap(ComponentsChanged& a, ComponentsChanged& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComponentsChanged* New() const final {
    return CreateMaybeMessage<ComponentsChanged>(nullptr);
  }

  ComponentsChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComponentsChanged>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComponentsChanged& from);
  void MergeFrom(const ComponentsChanged& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentsChanged* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.ComponentsChanged";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_registrationService_2eproto);
    return ::descriptor_table_registrationService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AR51.ComponentDescriptor Components = 2;
  int components_size() const;
  void clear_components();
  static const int kComponentsFieldNumber = 2;
  ::AR51::ComponentDescriptor* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::ComponentDescriptor >*
      mutable_components();
  const ::AR51::ComponentDescriptor& components(int index) const;
  ::AR51::ComponentDescriptor* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::ComponentDescriptor >&
      components() const;

  // .AR51.ComponentChangedType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::AR51::ComponentChangedType type() const;
  void set_type(::AR51::ComponentChangedType value);

  // @@protoc_insertion_point(class_scope:AR51.ComponentsChanged)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::ComponentDescriptor > components_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_registrationService_2eproto;
};
// -------------------------------------------------------------------

class ComponentList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AR51.ComponentList) */ {
 public:
  ComponentList();
  virtual ~ComponentList();

  ComponentList(const ComponentList& from);
  ComponentList(ComponentList&& from) noexcept
    : ComponentList() {
    *this = ::std::move(from);
  }

  inline ComponentList& operator=(const ComponentList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentList& operator=(ComponentList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComponentList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComponentList* internal_default_instance() {
    return reinterpret_cast<const ComponentList*>(
               &_ComponentList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ComponentList* other);
  friend void swap(ComponentList& a, ComponentList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComponentList* New() const final {
    return CreateMaybeMessage<ComponentList>(nullptr);
  }

  ComponentList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComponentList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComponentList& from);
  void MergeFrom(const ComponentList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AR51.ComponentList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_registrationService_2eproto);
    return ::descriptor_table_registrationService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AR51.ComponentDescriptor Components = 1;
  int components_size() const;
  void clear_components();
  static const int kComponentsFieldNumber = 1;
  ::AR51::ComponentDescriptor* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::ComponentDescriptor >*
      mutable_components();
  const ::AR51::ComponentDescriptor& components(int index) const;
  ::AR51::ComponentDescriptor* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::ComponentDescriptor >&
      components() const;

  // @@protoc_insertion_point(class_scope:AR51.ComponentList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::ComponentDescriptor > components_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_registrationService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComponentDescriptor

// string Id = 1;
inline void ComponentDescriptor::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ComponentDescriptor::id() const {
  // @@protoc_insertion_point(field_get:AR51.ComponentDescriptor.Id)
  return id_.GetNoArena();
}
inline void ComponentDescriptor::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.ComponentDescriptor.Id)
}
inline void ComponentDescriptor::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.ComponentDescriptor.Id)
}
inline void ComponentDescriptor::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.ComponentDescriptor.Id)
}
inline void ComponentDescriptor::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.ComponentDescriptor.Id)
}
inline std::string* ComponentDescriptor::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:AR51.ComponentDescriptor.Id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ComponentDescriptor::release_id() {
  // @@protoc_insertion_point(field_release:AR51.ComponentDescriptor.Id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ComponentDescriptor::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AR51.ComponentDescriptor.Id)
}

// string Name = 2;
inline void ComponentDescriptor::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ComponentDescriptor::name() const {
  // @@protoc_insertion_point(field_get:AR51.ComponentDescriptor.Name)
  return name_.GetNoArena();
}
inline void ComponentDescriptor::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.ComponentDescriptor.Name)
}
inline void ComponentDescriptor::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.ComponentDescriptor.Name)
}
inline void ComponentDescriptor::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.ComponentDescriptor.Name)
}
inline void ComponentDescriptor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.ComponentDescriptor.Name)
}
inline std::string* ComponentDescriptor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AR51.ComponentDescriptor.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ComponentDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:AR51.ComponentDescriptor.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ComponentDescriptor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AR51.ComponentDescriptor.Name)
}

// string Ip = 3;
inline void ComponentDescriptor::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ComponentDescriptor::ip() const {
  // @@protoc_insertion_point(field_get:AR51.ComponentDescriptor.Ip)
  return ip_.GetNoArena();
}
inline void ComponentDescriptor::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.ComponentDescriptor.Ip)
}
inline void ComponentDescriptor::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.ComponentDescriptor.Ip)
}
inline void ComponentDescriptor::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.ComponentDescriptor.Ip)
}
inline void ComponentDescriptor::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.ComponentDescriptor.Ip)
}
inline std::string* ComponentDescriptor::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:AR51.ComponentDescriptor.Ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ComponentDescriptor::release_ip() {
  // @@protoc_insertion_point(field_release:AR51.ComponentDescriptor.Ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ComponentDescriptor::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:AR51.ComponentDescriptor.Ip)
}

// int32 Port = 4;
inline void ComponentDescriptor::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComponentDescriptor::port() const {
  // @@protoc_insertion_point(field_get:AR51.ComponentDescriptor.Port)
  return port_;
}
inline void ComponentDescriptor::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:AR51.ComponentDescriptor.Port)
}

// .AR51.ComponentType Type = 5;
inline void ComponentDescriptor::clear_type() {
  type_ = 0;
}
inline ::AR51::ComponentType ComponentDescriptor::type() const {
  // @@protoc_insertion_point(field_get:AR51.ComponentDescriptor.Type)
  return static_cast< ::AR51::ComponentType >(type_);
}
inline void ComponentDescriptor::set_type(::AR51::ComponentType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AR51.ComponentDescriptor.Type)
}

// .AR51.PlatformType Platform = 6;
inline void ComponentDescriptor::clear_platform() {
  platform_ = 0;
}
inline ::AR51::PlatformType ComponentDescriptor::platform() const {
  // @@protoc_insertion_point(field_get:AR51.ComponentDescriptor.Platform)
  return static_cast< ::AR51::PlatformType >(platform_);
}
inline void ComponentDescriptor::set_platform(::AR51::PlatformType value) {
  
  platform_ = value;
  // @@protoc_insertion_point(field_set:AR51.ComponentDescriptor.Platform)
}

// repeated string Services = 7;
inline int ComponentDescriptor::services_size() const {
  return services_.size();
}
inline void ComponentDescriptor::clear_services() {
  services_.Clear();
}
inline const std::string& ComponentDescriptor::services(int index) const {
  // @@protoc_insertion_point(field_get:AR51.ComponentDescriptor.Services)
  return services_.Get(index);
}
inline std::string* ComponentDescriptor::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:AR51.ComponentDescriptor.Services)
  return services_.Mutable(index);
}
inline void ComponentDescriptor::set_services(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AR51.ComponentDescriptor.Services)
  services_.Mutable(index)->assign(value);
}
inline void ComponentDescriptor::set_services(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AR51.ComponentDescriptor.Services)
  services_.Mutable(index)->assign(std::move(value));
}
inline void ComponentDescriptor::set_services(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AR51.ComponentDescriptor.Services)
}
inline void ComponentDescriptor::set_services(int index, const char* value, size_t size) {
  services_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AR51.ComponentDescriptor.Services)
}
inline std::string* ComponentDescriptor::add_services() {
  // @@protoc_insertion_point(field_add_mutable:AR51.ComponentDescriptor.Services)
  return services_.Add();
}
inline void ComponentDescriptor::add_services(const std::string& value) {
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AR51.ComponentDescriptor.Services)
}
inline void ComponentDescriptor::add_services(std::string&& value) {
  services_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AR51.ComponentDescriptor.Services)
}
inline void ComponentDescriptor::add_services(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AR51.ComponentDescriptor.Services)
}
inline void ComponentDescriptor::add_services(const char* value, size_t size) {
  services_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AR51.ComponentDescriptor.Services)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ComponentDescriptor::services() const {
  // @@protoc_insertion_point(field_list:AR51.ComponentDescriptor.Services)
  return services_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ComponentDescriptor::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:AR51.ComponentDescriptor.Services)
  return &services_;
}

// float BatteryLevel = 8;
inline void ComponentDescriptor::clear_batterylevel() {
  batterylevel_ = 0;
}
inline float ComponentDescriptor::batterylevel() const {
  // @@protoc_insertion_point(field_get:AR51.ComponentDescriptor.BatteryLevel)
  return batterylevel_;
}
inline void ComponentDescriptor::set_batterylevel(float value) {
  
  batterylevel_ = value;
  // @@protoc_insertion_point(field_set:AR51.ComponentDescriptor.BatteryLevel)
}

// string MacAddress = 9;
inline void ComponentDescriptor::clear_macaddress() {
  macaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ComponentDescriptor::macaddress() const {
  // @@protoc_insertion_point(field_get:AR51.ComponentDescriptor.MacAddress)
  return macaddress_.GetNoArena();
}
inline void ComponentDescriptor::set_macaddress(const std::string& value) {
  
  macaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AR51.ComponentDescriptor.MacAddress)
}
inline void ComponentDescriptor::set_macaddress(std::string&& value) {
  
  macaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AR51.ComponentDescriptor.MacAddress)
}
inline void ComponentDescriptor::set_macaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  macaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AR51.ComponentDescriptor.MacAddress)
}
inline void ComponentDescriptor::set_macaddress(const char* value, size_t size) {
  
  macaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AR51.ComponentDescriptor.MacAddress)
}
inline std::string* ComponentDescriptor::mutable_macaddress() {
  
  // @@protoc_insertion_point(field_mutable:AR51.ComponentDescriptor.MacAddress)
  return macaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ComponentDescriptor::release_macaddress() {
  // @@protoc_insertion_point(field_release:AR51.ComponentDescriptor.MacAddress)
  
  return macaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ComponentDescriptor::set_allocated_macaddress(std::string* macaddress) {
  if (macaddress != nullptr) {
    
  } else {
    
  }
  macaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), macaddress);
  // @@protoc_insertion_point(field_set_allocated:AR51.ComponentDescriptor.MacAddress)
}

// -------------------------------------------------------------------

// IsAliveQuery

// -------------------------------------------------------------------

// ComponentsChanged

// .AR51.ComponentChangedType Type = 1;
inline void ComponentsChanged::clear_type() {
  type_ = 0;
}
inline ::AR51::ComponentChangedType ComponentsChanged::type() const {
  // @@protoc_insertion_point(field_get:AR51.ComponentsChanged.Type)
  return static_cast< ::AR51::ComponentChangedType >(type_);
}
inline void ComponentsChanged::set_type(::AR51::ComponentChangedType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AR51.ComponentsChanged.Type)
}

// repeated .AR51.ComponentDescriptor Components = 2;
inline int ComponentsChanged::components_size() const {
  return components_.size();
}
inline void ComponentsChanged::clear_components() {
  components_.Clear();
}
inline ::AR51::ComponentDescriptor* ComponentsChanged::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:AR51.ComponentsChanged.Components)
  return components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::ComponentDescriptor >*
ComponentsChanged::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:AR51.ComponentsChanged.Components)
  return &components_;
}
inline const ::AR51::ComponentDescriptor& ComponentsChanged::components(int index) const {
  // @@protoc_insertion_point(field_get:AR51.ComponentsChanged.Components)
  return components_.Get(index);
}
inline ::AR51::ComponentDescriptor* ComponentsChanged::add_components() {
  // @@protoc_insertion_point(field_add:AR51.ComponentsChanged.Components)
  return components_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::ComponentDescriptor >&
ComponentsChanged::components() const {
  // @@protoc_insertion_point(field_list:AR51.ComponentsChanged.Components)
  return components_;
}

// -------------------------------------------------------------------

// ComponentList

// repeated .AR51.ComponentDescriptor Components = 1;
inline int ComponentList::components_size() const {
  return components_.size();
}
inline void ComponentList::clear_components() {
  components_.Clear();
}
inline ::AR51::ComponentDescriptor* ComponentList::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:AR51.ComponentList.Components)
  return components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::ComponentDescriptor >*
ComponentList::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:AR51.ComponentList.Components)
  return &components_;
}
inline const ::AR51::ComponentDescriptor& ComponentList::components(int index) const {
  // @@protoc_insertion_point(field_get:AR51.ComponentList.Components)
  return components_.Get(index);
}
inline ::AR51::ComponentDescriptor* ComponentList::add_components() {
  // @@protoc_insertion_point(field_add:AR51.ComponentList.Components)
  return components_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AR51::ComponentDescriptor >&
ComponentList::components() const {
  // @@protoc_insertion_point(field_list:AR51.ComponentList.Components)
  return components_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AR51

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AR51::ComponentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AR51::ComponentType>() {
  return ::AR51::ComponentType_descriptor();
}
template <> struct is_proto_enum< ::AR51::ComponentChangedType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AR51::ComponentChangedType>() {
  return ::AR51::ComponentChangedType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_registrationService_2eproto
