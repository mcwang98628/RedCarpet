// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: registrationService.proto

#include "registrationService.pb.h"
#include "registrationService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace AR51 {

static const char* RegistrationService_method_names[] = {
  "/AR51.RegistrationService/ListenToComponents",
  "/AR51.RegistrationService/GetComponents",
  "/AR51.RegistrationService/Register",
};

std::unique_ptr< RegistrationService::Stub> RegistrationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RegistrationService::Stub> stub(new RegistrationService::Stub(channel));
  return stub;
}

RegistrationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListenToComponents_(RegistrationService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetComponents_(RegistrationService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Register_(RegistrationService_method_names[2], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReader< ::AR51::ComponentsChanged>* RegistrationService::Stub::ListenToComponentsRaw(::grpc::ClientContext* context, const ::AR51::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::AR51::ComponentsChanged>::Create(channel_.get(), rpcmethod_ListenToComponents_, context, request);
}

void RegistrationService::Stub::experimental_async::ListenToComponents(::grpc::ClientContext* context, ::AR51::Empty* request, ::grpc::experimental::ClientReadReactor< ::AR51::ComponentsChanged>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::AR51::ComponentsChanged>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenToComponents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::AR51::ComponentsChanged>* RegistrationService::Stub::AsyncListenToComponentsRaw(::grpc::ClientContext* context, const ::AR51::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::AR51::ComponentsChanged>::Create(channel_.get(), cq, rpcmethod_ListenToComponents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::AR51::ComponentsChanged>* RegistrationService::Stub::PrepareAsyncListenToComponentsRaw(::grpc::ClientContext* context, const ::AR51::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::AR51::ComponentsChanged>::Create(channel_.get(), cq, rpcmethod_ListenToComponents_, context, request, false, nullptr);
}

::grpc::Status RegistrationService::Stub::GetComponents(::grpc::ClientContext* context, const ::AR51::Empty& request, ::AR51::ComponentList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetComponents_, context, request, response);
}

void RegistrationService::Stub::experimental_async::GetComponents(::grpc::ClientContext* context, const ::AR51::Empty* request, ::AR51::ComponentList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetComponents_, context, request, response, std::move(f));
}

void RegistrationService::Stub::experimental_async::GetComponents(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AR51::ComponentList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetComponents_, context, request, response, std::move(f));
}

void RegistrationService::Stub::experimental_async::GetComponents(::grpc::ClientContext* context, const ::AR51::Empty* request, ::AR51::ComponentList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetComponents_, context, request, response, reactor);
}

void RegistrationService::Stub::experimental_async::GetComponents(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AR51::ComponentList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetComponents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AR51::ComponentList>* RegistrationService::Stub::AsyncGetComponentsRaw(::grpc::ClientContext* context, const ::AR51::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AR51::ComponentList>::Create(channel_.get(), cq, rpcmethod_GetComponents_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AR51::ComponentList>* RegistrationService::Stub::PrepareAsyncGetComponentsRaw(::grpc::ClientContext* context, const ::AR51::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AR51::ComponentList>::Create(channel_.get(), cq, rpcmethod_GetComponents_, context, request, false);
}

::grpc::ClientReaderWriter< ::AR51::ComponentList, ::AR51::IsAliveQuery>* RegistrationService::Stub::RegisterRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::AR51::ComponentList, ::AR51::IsAliveQuery>::Create(channel_.get(), rpcmethod_Register_, context);
}

void RegistrationService::Stub::experimental_async::Register(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::AR51::ComponentList,::AR51::IsAliveQuery>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::AR51::ComponentList,::AR51::IsAliveQuery>::Create(stub_->channel_.get(), stub_->rpcmethod_Register_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::AR51::ComponentList, ::AR51::IsAliveQuery>* RegistrationService::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::AR51::ComponentList, ::AR51::IsAliveQuery>::Create(channel_.get(), cq, rpcmethod_Register_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::AR51::ComponentList, ::AR51::IsAliveQuery>* RegistrationService::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::AR51::ComponentList, ::AR51::IsAliveQuery>::Create(channel_.get(), cq, rpcmethod_Register_, context, false, nullptr);
}

RegistrationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegistrationService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RegistrationService::Service, ::AR51::Empty, ::AR51::ComponentsChanged>(
          std::mem_fn(&RegistrationService::Service::ListenToComponents), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegistrationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RegistrationService::Service, ::AR51::Empty, ::AR51::ComponentList>(
          std::mem_fn(&RegistrationService::Service::GetComponents), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegistrationService_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RegistrationService::Service, ::AR51::ComponentList, ::AR51::IsAliveQuery>(
          std::mem_fn(&RegistrationService::Service::Register), this)));
}

RegistrationService::Service::~Service() {
}

::grpc::Status RegistrationService::Service::ListenToComponents(::grpc::ServerContext* context, const ::AR51::Empty* request, ::grpc::ServerWriter< ::AR51::ComponentsChanged>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegistrationService::Service::GetComponents(::grpc::ServerContext* context, const ::AR51::Empty* request, ::AR51::ComponentList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegistrationService::Service::Register(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::AR51::IsAliveQuery, ::AR51::ComponentList>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace AR51

